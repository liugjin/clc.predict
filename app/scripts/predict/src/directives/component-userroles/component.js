// Generated by IcedCoffeeScript 108.0.13

/*
* File: component-userroles-directive
* User: James
* Date: 2018/11/20
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var ComponentUserrolesDirective, exports;
  ComponentUserrolesDirective = (function(_super) {
    __extends(ComponentUserrolesDirective, _super);

    function ComponentUserrolesDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.init = __bind(this.init, this);
      this.show = __bind(this.show, this);
      this.id = "component-userroles";
      ComponentUserrolesDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
      this.$routeParams = $routeParams;
      this.roleService = commonService.modelEngine.modelManager.getService("roles");
      this.userService = commonService.modelEngine.modelManager.getService("users");
      this.logonUser = commonService.$rootScope.user;
    }

    ComponentUserrolesDirective.prototype.setScope = function() {};

    ComponentUserrolesDirective.prototype.setCSS = function() {
      return css;
    };

    ComponentUserrolesDirective.prototype.setTemplate = function() {
      return view;
    };

    ComponentUserrolesDirective.prototype.show = function(scope, element, attrs) {
      this.scope = scope;
      this.init();
      this.scope.saveUser = (function(_this) {
        return function() {};
      })(this);
      return this.scope.roleDetails = (function(_this) {
        return function() {};
      })(this);
    };

    ComponentUserrolesDirective.prototype.init = function() {
      var filter2;
      this.scope.hasRoles = {};
      this.scope.allUserFlag = false;
      this.scope.allUserCheckFlags = {};
      this.scope.roleObj = {};
      this.scope.roles = [];
      this.queryRoles();
      filter2 = {};
      if (this.logonUser.user.toLowerCase() !== "admin") {
        filter2.user = this.$routeParams.user;
      }
      this.userService.query(filter2, null, (function(_this) {
        return function(err, model) {
          var filter3;
          if (model) {
            if (model[0].group) {
              filter3 = {};
              filter3.group = model[0].group;
              return _this.userService.query(filter2, null, function(err, model3) {
                return _this.scope.users = model;
              });
            } else {
              return _this.scope.users = model;
            }
          }
        };
      })(this));
      this.scope.userRoleDetails = (function(_this) {
        return function(refData, key) {
          var userItem, _i, _len, _ref, _results;
          $('.roles-active').removeClass('active');
          $('#roles' + key).addClass('active');
          _this.scope.roleObj = refData;
          _this.resetCheckFlags();
          _this.scope.allUserFlag = false;
          if (refData.users) {
            if (refData.users[0] === "_all") {
              return _this.scope.allUserFlag = true;
            } else {
              _this.scope.allUserFlag = false;
              _ref = refData.users;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                userItem = _ref[_i];
                _results.push(_this.scope.allUserCheckFlags[userItem] = true);
              }
              return _results;
            }
          }
        };
      })(this);
      return this.scope.saveRoles = (function(_this) {
        return function() {
          var otherRoleUsers, rejectRoleItem, rejectRoles, rejectUserItem, strUsers, tipFlag, tmpUsers, _i, _j, _len, _len1, _ref;
          if (_.isEmpty(_this.scope.roleObj)) {
            _this.display(null, '温馨提示：请选择角色！');
            return;
          }
          rejectRoles = _.reject(_this.scope.roles, function(data) {
            return data.role === _this.scope.roleObj.role;
          });
          otherRoleUsers = {};
          for (_i = 0, _len = rejectRoles.length; _i < _len; _i++) {
            rejectRoleItem = rejectRoles[_i];
            if (rejectRoleItem.users[0] !== "_all") {
              _ref = rejectRoleItem.users;
              for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                rejectUserItem = _ref[_j];
                otherRoleUsers[rejectUserItem] = rejectUserItem;
              }
            }
          }
          tmpUsers = [];
          strUsers = "";
          tipFlag = false;
          tipFlag = _.mapObject(_this.scope.allUserCheckFlags, function(val, key) {
            if (val) {
              tmpUsers.push(key);
              if (otherRoleUsers[key]) {
                return strUsers += key + "、";
              }
            }
          });
          if (strUsers.length > 0) {
            _this.display(null, '温馨提示：' + strUsers + '用户已分配角色，不能再分配，请查证！');
            return;
          }
          _this.scope.roleObj.users = tmpUsers;
          return _this.roleService.save(_this.scope.roleObj, function(err, data) {
            _this.queryRoles();
            return _this.display(err, '操作成功！');
          });
        };
      })(this);
    };

    ComponentUserrolesDirective.prototype.queryRoles = function() {
      var filter;
      filter = this.scope.project.getIds();
      return this.roleService.query(filter, null, (function(_this) {
        return function(err, model) {
          var modelItem, userItem, _i, _len, _results;
          _this.scope.roles = model;
          _results = [];
          for (_i = 0, _len = model.length; _i < _len; _i++) {
            modelItem = model[_i];
            if (modelItem.users.length > 0) {
              _results.push((function() {
                var _j, _len1, _ref, _results1;
                _ref = modelItem.users;
                _results1 = [];
                for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                  userItem = _ref[_j];
                  _results1.push(this.scope.hasRoles[userItem] = userItem);
                }
                return _results1;
              }).call(_this));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        };
      })(this), true);
    };

    ComponentUserrolesDirective.prototype.resetCheckFlags = function() {
      var userItem, _i, _len, _ref, _results;
      if (this.scope.users) {
        if (this.scope.users.length > 0) {
          _ref = this.scope.users;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            userItem = _ref[_i];
            _results.push(this.scope.allUserCheckFlags[userItem.user] = false);
          }
          return _results;
        }
      }
    };

    ComponentUserrolesDirective.prototype.resize = function(scope) {};

    ComponentUserrolesDirective.prototype.dispose = function(scope) {};

    return ComponentUserrolesDirective;

  })(base.BaseDirective);
  return exports = {
    ComponentUserrolesDirective: ComponentUserrolesDirective
  };
});
