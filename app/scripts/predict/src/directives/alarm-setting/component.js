// Generated by IcedCoffeeScript 108.0.13

/*
* File: alarm-setting-directive
* User: David
* Date: 2019/07/04
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var AlarmSettingDirective, exports;
  AlarmSettingDirective = (function(_super) {
    __extends(AlarmSettingDirective, _super);

    function AlarmSettingDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "alarm-setting";
      AlarmSettingDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    AlarmSettingDirective.prototype.setScope = function() {};

    AlarmSettingDirective.prototype.setCSS = function() {
      return css;
    };

    AlarmSettingDirective.prototype.setTemplate = function() {
      return view;
    };

    AlarmSettingDirective.prototype.show = function(scope, element, attrs) {
      var templates;
      scope.templates = [];
      scope.list = [];
      scope.events = {};
      scope.sort = {};
      templates = {};
      scope.severities = _.sortBy(scope.project.dictionary.eventseverities.items, function(item) {
        return item.model.severity;
      });
      scope.getSeverityName = function(severity) {
        var item;
        item = _.find(scope.severities, function(item) {
          return item.model.severity === severity;
        });
        return item != null ? item.model.name : void 0;
      };
      scope.getCountBySeverity = function(severity) {
        var items;
        items = _.filter(scope.list, function(item) {
          return item.severity === severity;
        });
        return items != null ? items.length : void 0;
      };
      scope.selectSeverity = function(severity) {
        return scope.severity = severity;
      };
      scope.sortBy = function(id) {
        scope.sort.predicate = id;
        return scope.sort.reverse = !scope.sort.reverse;
      };
      scope.filterEvent = (function(_this) {
        return function() {
          return function(event) {
            var text, _ref, _ref1, _ref2;
            if (scope.severity && event.severity !== scope.severity) {
              return false;
            }
            text = (_ref = scope.search) != null ? _ref.toLowerCase() : void 0;
            if (!text) {
              return true;
            }
            if (event.name.toLowerCase().indexOf(text) >= 0) {
              return true;
            }
            if (((_ref1 = event.content) != null ? _ref1.toLowerCase().indexOf(text) : void 0) >= 0) {
              return true;
            }
            if (((_ref2 = event.value) != null ? _ref2.toLowerCase().indexOf(text) : void 0) >= 0) {
              return true;
            }
            return false;
          };
        };
      })(this);
      scope.selectTemplateId = (function(_this) {
        return function(templateId) {
          return scope.selectTemplate(templates[templateId]);
        };
      })(this);
      scope.selectTemplate = (function(_this) {
        return function(template) {
          if (!template) {
            return;
          }
          scope.severity = null;
          scope.list = [];
          scope.events = {};
          scope.currentTemplate = template;
          if (template === "all") {
            return _this.loadTemplateIndexEvents(scope, 0);
          } else {
            return _this.loadTemplateEvents(scope, template);
          }
        };
      })(this);
      scope.saveSetting = (function(_this) {
        return function() {
          var event, _i, _len, _ref;
          _ref = scope.list;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            event = _ref[_i];
            if (event.value !== event.newvalue || event.severity !== parseInt(event.newseverity) || event.changeAbleFlag === true) {
              if (event.newvalue !== "") {
                _this.saveEvent(scope, event);
              } else {
                M.toast({
                  html: '告警阈值格式错误，请重新输入'
                });
                return false;
              }
            }
          }
        };
      })(this);
      scope.controller.$rootScope.executing = true;
      scope.project.loadEquipmentTemplates(null, null, (function(_this) {
        return function(err, tmps) {
          var n;
          tmps = _.filter(tmps, function(tmp) {
            return tmp.model.template.substr(0, 1) !== "_";
          });
          n = 0;
          return _.each(tmps, function(tmp) {
            return tmp.loadEvents(null, function(err, evts) {
              var j, station, stations, _i, _len, _results;
              n++;
              if (evts.length > 0) {
                templates[tmp.model.type + "." + tmp.model.template] = tmp;
              }
              if (n === tmps.length) {
                stations = _this.commonService.loadStationChildren(scope.station, true);
                j = 0;
                _results = [];
                for (_i = 0, _len = stations.length; _i < _len; _i++) {
                  station = stations[_i];
                  _results.push(station.loadEquipments(null, null, function(err, equips) {
                    var group, key, keys, _j, _len1;
                    j++;
                    group = _.groupBy(equips, function(equip) {
                      return equip.model.type + "." + equip.model.template;
                    });
                    keys = _.keys(group);
                    for (_j = 0, _len1 = keys.length; _j < _len1; _j++) {
                      key = keys[_j];
                      if (templates[key] && _.indexOf(scope.templates, templates[key]) === -1) {
                        scope.templates.push(templates[key]);
                      }
                      if (_this.$routeParams.template === key) {
                        scope.selectTemplate(templates[key]);
                      }
                    }
                    if (j === stations.length && !_this.$routeParams.template) {
                      return setTimeout(function() {
                        return scope.selectTemplate("all");
                      }, 10);
                    }
                  }));
                }
                return _results;
              }
            });
          });
        };
      })(this));
      scope.switchEventAble = function(lis) {
        if (lis.changeAbleFlag) {
          return lis.changeAbleFlag = !lis.changeAbleFlag;
        } else {
          return lis.changeAbleFlag = true;
        }
      };
      return scope.editEventSeverity = function(event, index) {
        event.show = true;
        return setTimeout(function() {
          return $('#event' + index).parent().find("input").click();
        }, 20);
      };
    };

    AlarmSettingDirective.prototype.loadTemplateIndexEvents = function(scope, index) {
      var template;
      if (scope.currentTemplate !== "all") {
        return;
      }
      template = scope.templates[index];
      if (template) {
        return this.loadTemplateEvents(scope, template, (function(_this) {
          return function() {
            return setTimeout(function() {
              return _this.loadTemplateIndexEvents(scope, index + 1);
            }, 100);
          };
        })(this));
      }
    };

    AlarmSettingDirective.prototype.loadTemplateEvents = function(scope, template, callback) {
      return template.loadEvents(null, (function(_this) {
        return function(err, events) {
          var event, evt, rule, _i, _j, _len, _len1, _ref, _ref1;
          for (_i = 0, _len = events.length; _i < _len; _i++) {
            event = events[_i];
            scope.events[event.key] = event;
            _ref = event.model.rules;
            for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
              rule = _ref[_j];
              evt = {
                key: event.key,
                enable: event.model.enable,
                type: event.model.type,
                templateId: event.model.template,
                template: template.model.name,
                event: event.model.event,
                name: event.model.name,
                rule: rule.name,
                content: rule.title,
                value: rule.start.condition.values,
                newvalue: rule.start.condition.values,
                severity: rule.severity,
                newseverity: (_ref1 = rule.severity) != null ? _ref1.toString() : void 0
              };
              scope.list.push(evt);
            }
          }
          scope.$applyAsync();
          scope.controller.$rootScope.executing = false;
          return typeof callback === "function" ? callback() : void 0;
        };
      })(this));
    };

    AlarmSettingDirective.prototype.saveEvent = function(scope, item) {
      var event, rule;
      console.log(item);
      event = scope.events[item.key];
      console.log(event);
      event.model.enable = item.enable;
      rule = _.find(event.model.rules, function(it) {
        return it.name === item.rule;
      });
      console.log(rule);
      if (rule) {
        rule.severity = parseInt(item.newseverity);
      }
      if (rule) {
        rule.start.condition.values = item.newvalue;
      }
      return event.save(function(err, result) {
        if (!err) {
          item.severity = parseInt(item.newseverity);
          item.value = item.newvalue;
          return item.changeAbleFlag = false;
        }
      });
    };

    AlarmSettingDirective.prototype.resize = function(scope) {};

    AlarmSettingDirective.prototype.dispose = function(scope) {};

    return AlarmSettingDirective;

  })(base.BaseDirective);
  return exports = {
    AlarmSettingDirective: AlarmSettingDirective
  };
});
