// Generated by IcedCoffeeScript 108.0.13

/*
* File: wisdom-predict-directive
* User: David
* Date: 2019/12/23
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var WisdomPredictDirective, exports;
  WisdomPredictDirective = (function(_super) {
    __extends(WisdomPredictDirective, _super);

    function WisdomPredictDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.addZero = __bind(this.addZero, this);
      this.queryAlarms = __bind(this.queryAlarms, this);
      this.setTime = __bind(this.setTime, this);
      this.getDevice = __bind(this.getDevice, this);
      this.show = __bind(this.show, this);
      this.id = "wisdom-predict";
      WisdomPredictDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    WisdomPredictDirective.prototype.setScope = function() {};

    WisdomPredictDirective.prototype.setCSS = function() {
      return css;
    };

    WisdomPredictDirective.prototype.setTemplate = function() {
      return view;
    };

    WisdomPredictDirective.prototype.show = function(scope, element, attrs) {
      scope.eventRecords = [];
      scope.intellect = [];
      scope.equipment = null;
      this.setTime(scope, element);
      this.getDevice(scope);
      this.queryAlarms(scope, 1, 8, 'divine', scope.eventRecords);
      scope.focus = 1;
      scope.clickTime = (function(_this) {
        return function(i) {
          scope.focus = i;
          if (i === 1) {
            return _this.queryAlarms(scope, 1, 8, 'divine', scope.eventRecords);
          } else {
            return _this.queryAlarms(scope, 1, 8, 'intellect', scope.intellect);
          }
        };
      })(this);
      scope.showBox = false;
      scope.switchClick = (function(_this) {
        return function() {
          if (scope.showBox) {
            return scope.showBox = false;
          } else {
            return scope.showBox = true;
          }
        };
      })(this);
      scope.deviceClick = (function(_this) {
        return function(i, data) {
          scope.equipment = data;
          return scope.clickNum = i;
        };
      })(this);
      scope.getReportData = (function(_this) {
        return function() {
          if (scope.focus === 1) {
            return _this.queryAlarms(scope, 1, 8, 'divine', scope.eventRecords);
          } else {
            return _this.queryAlarms(scope, 1, 8, 'intellect', scope.intellect);
          }
        };
      })(this);
      return scope.queryPage = (function(_this) {
        return function(page) {
          var paging;
          paging = scope.pagination;
          if (!paging) {
            return;
          }
          if (page === 'next') {
            page = paging.page + 1;
          } else if (page === 'previous') {
            page = paging.page - 1;
          }
          if (page > paging.pageCount || page < 1) {
            return;
          }
          scope.eventRecords = [];
          scope.intellect = [];
          if (scope.focus === 1) {
            return _this.queryAlarms(scope, page, paging.pageItems, 'divine', scope.eventRecords);
          } else {
            return _this.queryAlarms(scope, page, paging.pageItems, 'intellect', scope.intellect);
          }
        };
      })(this);
    };

    WisdomPredictDirective.prototype.getDevice = function(scope) {
      scope.motor = [];
      scope.inverter = [];
      scope.allMotorNumber = 0;
      scope.allInverterNumber = 0;
      return scope.station.loadEquipments(null, null, (function(_this) {
        return function(err, equipments) {
          var eq, _i, _len;
          for (_i = 0, _len = equipments.length; _i < _len; _i++) {
            eq = equipments[_i];
            if (eq.model.template === 'motor') {
              scope.motor.push(eq);
            }
            if (eq.model.template === 'inverter') {
              scope.inverter.push(eq);
            }
          }
          scope.allMotorNumber = _this.addZero(scope.motor.length);
          return scope.allInverterNumber = _this.addZero(scope.inverter.length);
        };
      })(this));
    };

    WisdomPredictDirective.prototype.setTime = function(scope, element) {
      var setGlDatePicker;
      scope.query = {
        startTime: moment().format("YYYY-MM-DD"),
        endTime: moment().format("YYYY-MM-DD")
      };
      setGlDatePicker = function(element, value) {
        if (!value) {
          return;
        }
        return setTimeout(function() {
          var gl;
          return gl = $(element).glDatePicker({
            dowNames: ["日", "一", "二", "三", "四", "五", "六"],
            monthNames: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"],
            selectedDate: moment(value).toDate(),
            onClick: function(target, cell, date, data) {
              var day, month;
              month = date.getMonth() + 1;
              if (month < 10) {
                month = "0" + month;
              }
              day = date.getDate();
              if (day < 10) {
                day = "0" + day;
              }
              return target.val(date.getFullYear() + "-" + month + "-" + day).trigger("change");
            }
          });
        }, 500);
      };
      setGlDatePicker($('#start-time-input')[0], scope.query.startTime);
      return setGlDatePicker($('#end-time-input')[0], scope.query.startTime);
    };

    WisdomPredictDirective.prototype.queryAlarms = function(scope, page, pageItems, eventType, arrData) {
      var data, filter, paging;
      if (page == null) {
        page = 1;
      }
      if (pageItems == null) {
        pageItems = 8;
      }
      scope.showBox = false;
      filter = scope.project.getIds();
      filter.station = scope.station.model.station;
      if (scope.equipment !== null) {
        filter.equipment = scope.equipment.model.equipment;
      }
      filter.eventType = eventType;
      filter.startTime = moment(scope.query.startTime).startOf('day');
      filter.endTime = moment(scope.query.endTime).endOf('day');
      paging = {
        page: page,
        pageItems: pageItems
      };
      data = {
        filter: filter,
        fields: null,
        paging: paging,
        sorting: {
          station: 1,
          equipment: 1,
          timestamp: -1
        }
      };
      scope.dataEventRecords = [];
      scope.dataIntellect = [];
      return this.commonService.reportingService.queryEventRecords(data, (function(_this) {
        return function(err, records, paging2) {
          var all, pCount, _i, _j, _len, _results;
          console.log(records);
          for (_i = 0, _len = records.length; _i < _len; _i++) {
            all = records[_i];
            all.date = all.createtime.split("T")[0];
            all.time = all.createtime.split("T")[1].split(".")[0];
            all.textColor = "ico-color" + all.severity;
            if (all.eventType === 'divine') {
              scope.eventRecords.push(all);
            }
            if (all.eventType === 'intellect') {
              scope.intellect.push(all);
            }
          }
          pCount = (paging2 != null ? paging2.pageCount : void 0) || 0;
          if (pCount <= 6) {
            if (paging2 != null) {
              paging2.pages = (function() {
                _results = [];
                for (var _j = 1; 1 <= pCount ? _j <= pCount : _j >= pCount; 1 <= pCount ? _j++ : _j--){ _results.push(_j); }
                return _results;
              }).apply(this);
            }
          } else if (page > 3 && page < pCount - 2) {
            if (paging2 != null) {
              paging2.pages = [1, page - 2, page - 1, page, page + 1, page + 2, pCount];
            }
          } else if (page <= 3) {
            if (paging2 != null) {
              paging2.pages = [1, 2, 3, 4, 5, 6, pCount];
            }
          } else if (page >= pCount - 2) {
            if (paging2 != null) {
              paging2.pages = [1, pCount - 5, pCount - 4, pCount - 3, pCount - 2, pCount - 1, pCount];
            }
          }
          scope.pagination = paging2;
          return console.log(paging2);
        };
      })(this));
    };

    WisdomPredictDirective.prototype.addZero = function(num) {
      if (parseInt(num) < 10 && parseInt(num) > 0) {
        num = '0' + num;
      }
      return num;
    };

    WisdomPredictDirective.prototype.resize = function(scope) {};

    WisdomPredictDirective.prototype.dispose = function(scope) {};

    return WisdomPredictDirective;

  })(base.BaseDirective);
  return exports = {
    WisdomPredictDirective: WisdomPredictDirective
  };
});
