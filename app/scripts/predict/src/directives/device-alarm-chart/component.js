// Generated by IcedCoffeeScript 108.0.13

/*
* File: device-alarm-chart-directive
* User: David
* Date: 2020/02/20
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment", "echarts"], function(base, css, view, _, moment, echarts) {
  var DeviceAlarmChartDirective, exports;
  DeviceAlarmChartDirective = (function(_super) {
    __extends(DeviceAlarmChartDirective, _super);

    function DeviceAlarmChartDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.addZero = __bind(this.addZero, this);
      this.createLineCharts = __bind(this.createLineCharts, this);
      this.setChartsData = __bind(this.setChartsData, this);
      this.groupArr = __bind(this.groupArr, this);
      this.processEvent = __bind(this.processEvent, this);
      this.subscribeValues = __bind(this.subscribeValues, this);
      this.show = __bind(this.show, this);
      this.id = "device-alarm-chart";
      DeviceAlarmChartDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    DeviceAlarmChartDirective.prototype.setScope = function() {};

    DeviceAlarmChartDirective.prototype.setCSS = function() {
      return css;
    };

    DeviceAlarmChartDirective.prototype.setTemplate = function() {
      return view;
    };

    DeviceAlarmChartDirective.prototype.show = function(scope, element, attrs) {
      return this.subscribeValues(scope, element);
    };

    DeviceAlarmChartDirective.prototype.subscribeValues = function(scope, element) {
      var eventSubscription, filter;
      scope.chartsDataArr = [];
      scope.eventTotal = 0;
      scope.events = {};
      scope.eventSubscriptionArray = [];
      scope.eventsArray = [];
      scope.eventType = scope.project.typeModels.eventtypes.items;
      this.createLineCharts(scope, element);
      filter = {
        user: scope.project.model.user,
        project: scope.project.model.project,
        station: scope.station.model.station,
        equipment: scope.equipment.model.equipment
      };
      eventSubscription = this.commonService.eventLiveSession.subscribeValues(filter, (function(_this) {
        return function(err, msg) {
          if (err) {
            return console.log(err);
          }
          if (msg.message.phase === 'start') {
            return _this.processEvent(scope, element, msg);
          }
        };
      })(this));
      return scope.eventSubscriptionArray.push(eventSubscription);
    };

    DeviceAlarmChartDirective.prototype.processEvent = function(scope, element, data) {
      var event, k, key, message, v, _results;
      if (!data) {
        return;
      }
      message = data.message;
      key = "" + message.user + "." + message.project + "." + message.station + "." + message.equipment + "." + message.event + "." + message.severity + "." + message.startTime;
      if (scope.events.hasOwnProperty(key)) {
        event = scope.events[key];
        _results = [];
        for (k in message) {
          v = message[k];
          _results.push(event[k] = v);
        }
        return _results;
      } else {
        event = angular.copy(message);
        scope.events[key] = event;
        if (event.equipment === scope.equipment.model.equipment) {
          scope.eventsArray.push(event);
          return this.groupArr(scope, element, "eventType");
        }
      }
    };

    DeviceAlarmChartDirective.prototype.groupArr = function(scope, element, field) {
      var att, ev, item, obj, _i, _len, _ref;
      if (scope.eventsArray.length > 0) {
        obj = {};
        _ref = scope.eventsArray;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          ev = _ref[_i];
          for (item in ev) {
            if (item === field) {
              obj[ev[item]] = {
                list: obj[ev[field]] ? obj[ev[field]].list : [],
                type: ev[field]
              };
            }
          }
          obj[ev[field]].list.push(ev);
        }
        att = [];
        for (item in obj) {
          att.push({
            list: obj[item].list,
            type: obj[item].type
          });
        }
        return this.setChartsData(scope, element, att);
      }
    };

    DeviceAlarmChartDirective.prototype.setChartsData = function(scope, element, att) {
      var dataValue, event, type, _i, _j, _len, _len1, _ref;
      scope.chartsDataArr.splice(0, scope.chartsDataArr.length);
      _ref = scope.eventType;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        type = _ref[_i];
        for (_j = 0, _len1 = att.length; _j < _len1; _j++) {
          event = att[_j];
          if (type.model.type === event.type) {
            dataValue = {
              name: "",
              value: 0
            };
            dataValue.name = type.model.name;
            dataValue.value = this.addZero(event.list.length);
            scope.chartsDataArr.push(dataValue);
          }
        }
      }
      scope.eventTotal = this.addZero(scope.eventsArray.length);
      return this.createLineCharts(scope, element);
    };

    DeviceAlarmChartDirective.prototype.createLineCharts = function(scope, element) {
      var line, option, _ref;
      line = element.find(".echartsContent");
      if ((_ref = scope.echart) != null) {
        _ref.dispose();
      }
      option = {
        color: ['#FD855B', '#FF6D39', '#FADB00'],
        grid: {
          bottom: 150,
          left: 100,
          top: 50,
          right: '10%'
        },
        tooltip: {
          formatter: '{b}<br /> {c}条 ({d}%)'
        },
        legend: {
          orient: 'horizontal',
          top: 'top',
          right: "4%",
          data: scope.chartsDataArr,
          icon: 'pin',
          textStyle: {
            color: "#F4F7FF",
            fontSize: 14
          }
        },
        series: [
          {
            radius: '60%',
            center: ['50%', '60%'],
            type: 'pie',
            label: {
              normal: {
                show: true,
                formatter: "{b} : {c}",
                textStyle: {
                  fontSize: 14
                },
                position: 'outside'
              },
              emphasis: {
                show: true
              }
            },
            labelLine: {
              normal: {
                show: true
              }
            },
            name: "设备告警总量",
            data: scope.chartsDataArr
          }
        ]
      };
      scope.echart = echarts.init(line[0]);
      scope.echart.setOption(option);
      scope.resize = (function(_this) {
        return function() {
          return _this.$timeout(function() {
            var _ref1;
            return (_ref1 = scope.echart) != null ? _ref1.resize() : void 0;
          }, 100);
        };
      })(this);
      window.addEventListener('resize', scope.resize);
      return window.dispatchEvent(new Event('resize'));
    };

    DeviceAlarmChartDirective.prototype.addZero = function(num) {
      if (parseInt(num) < 10 && parseInt(num) > 0) {
        num = '0' + num;
      }
      return num;
    };

    DeviceAlarmChartDirective.prototype.resize = function(scope) {};

    DeviceAlarmChartDirective.prototype.dispose = function(scope) {
      return scope.eventSubscriptionArray.forEach((function(_this) {
        return function(sub) {
          return sub.dispose();
        };
      })(this));
    };

    return DeviceAlarmChartDirective;

  })(base.BaseDirective);
  return exports = {
    DeviceAlarmChartDirective: DeviceAlarmChartDirective
  };
});
