// Generated by IcedCoffeeScript 108.0.13

/*
* File: 3d/room
* User: Hardy
* Date: 2018/08/22
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

define(["underscore", "threejs", "orbit-controls"], function(_, THREE) {
  var Room, exports;
  Room = (function() {
    function Room(name, element, options) {
      this.changeMaterial = __bind(this.changeMaterial, this);
      this.onMouseDblclick = __bind(this.onMouseDblclick, this);
      var cameraOptions;
      console.log("name", name);
      this.name = name;
      this.options = options;
      this.element = element;
      this.isDisposed = false;
      this.currentHex = null;
      this.animateList = [];
      this.innerWidth = element.clientWidth;
      this.innerHeight = element.clientHeight;
      this.scene = new THREE.Scene();
      this.renderer = new THREE.WebGLRenderer(options.renderder);
      this.renderer.setSize(this.innerWidth, this.innerHeight);
      this.renderer.setClearColor(0x000000, 0);
      element.appendChild(this.renderer.domElement);
      cameraOptions = options.camera;
      cameraOptions.aspect = this.innerWidth / this.innerHeight;
      if (!cameraOptions.aspect) {
        return console.error("请检查样式，保证canvas有占用实际空间，否则无法渲染。");
      }
      this.initCamera(cameraOptions);
      element.addEventListener("click", this.onMouseDblclick.bind(this));
      if (options.orbitControl) {
        this.orbitControl = new THREE.OrbitControls(this.camera, this.renderer.domElement);
      }
      this.animate();
      this.initDb();
    }

    Room.prototype.initCamera = function(options) {
      switch (options.type) {
        case 'PerspectiveCamera':
          if (!options.aspect) {
            return console.error("透视相机应该有相位参数.");
          } else {
            this.camera = new THREE.PerspectiveCamera(options.fov, options.aspect, 0.1, 100000);
          }
          break;
        default:
          console.error('初始化摄像头错误: 不支持 ', options.type);
          break;
      }
      this.camera.position.set(options.x || 0, options.y || 0, options.z || 0);
      return this.camera.rotation.set(options.rotationX * Math.PI / 180 || 0, options.rotationY * Math.PI / 180 || 0, options.rotationz * Math.PI / 180 || 0);
    };

    Room.prototype.initScene = function(obj) {
      this.scene = obj;
      if (this.scene.userData) {
        this.setCamera(this.scene.userData);
      }
      this.scene.background = null;
      return this.renderer.render(this.scene, this.camera);
    };

    Room.prototype.setCamera = function(options) {
      if (!options) {
        return console.log("setcamera选项为空");
      }
      if (options.fov) {
        this.camera.fov = options.fov;
      }
      this.camera.position.set(options.x || 0, options.y || 0, options.z || 0);
      this.camera.rotation.set(options.rotationX * Math.PI / 180 || 0, options.rotationY * Math.PI / 180 || 0, options.rotationz * Math.PI / 180 || 0);
      this.camera.updateProjectionMatrix();
      if (this.orbitControl) {
        return this.orbitControl.update();
      }
    };

    Room.prototype.addAnimate = function(key, func) {
      var index, _ref;
      index = _.findLastIndex(this.animateList, {
        key: key
      });
      if (index === -1) {
        return this.animateList.push({
          key: key,
          func: func
        });
      } else {
        return (_ref = this.animateList[index]) != null ? _ref.func = func : void 0;
      }
    };

    Room.prototype.removeAnimate = function(key) {
      var index;
      index = _.findLastIndex(this.animateList, {
        key: key
      });
      if (index === -1) {
        return console.log('err: key is not in list', key, this.animateList);
      }
      return this.animateList.splice(index, 1);
    };

    Room.prototype.animate = function() {
      var animateFun;
      this.animateList.forEach(function(obj) {
        if (_.isFunction(obj.func)) {
          return obj.func();
        }
      });
      if (this.composer) {
        this.composer.render();
      } else {
        this.renderer.render(this.scene, this.camera);
      }
      if (!this.isDisposed) {
        animateFun = this.animate.bind(this);
        return requestAnimationFrame(animateFun);
      }
    };

    Room.prototype.loadScene = function(url, callback, preloadCallback, options) {
      var load;
      if (options != null ? options.noCache : void 0) {
        return this.loadSceneByUrl(url, callback, preloadCallback);
      }
      load = (function(_this) {
        return function() {
          return _this.getDataFromDatabase(url, function(err, json) {
            if (err) {
              return console.warn(err);
            }
            if (json) {
              return _this.loadSceneByJSON(json, callback);
            } else {
              return _this.loadSceneByUrl(url, callback, preloadCallback, true);
            }
          });
        };
      })(this);
      if (!this.db) {
        return this.dbCallback = (function(_this) {
          return function(err) {
            if (err) {
              return console.warn(err);
            }
            return load();
          };
        })(this);
      } else {
        return load();
      }
    };

    Room.prototype.loadSceneByUrl = function(url, callback, preloadCallback, cache) {
      var loader, onErrors, onLoad, onProgress;
      loader = new THREE.ObjectLoader;
      onLoad = (function(_this) {
        return function(obj) {
          if (cache) {
            _this.setDataToDataBase(url, obj);
          }
          _this.initScene(obj);
          return typeof callback === "function" ? callback(null, obj) : void 0;
        };
      })(this);
      onProgress = function(xhr) {
        return typeof preloadCallback === "function" ? preloadCallback((xhr.loaded / xhr.total * 100).toFixed(0)) : void 0;
      };
      onErrors = function(xhr) {
        return console.error('加载3D文件失败：', xhr);
      };
      return loader.load(url, onLoad, onProgress, onErrors);
    };

    Room.prototype.loadSceneByJSON = function(json, callback) {
      var loader, object;
      loader = new THREE.ObjectLoader;
      object = JSON.parse(json);
      return loader.parse(object, (function(_this) {
        return function(obj) {
          _this.initScene(obj);
          return typeof callback === "function" ? callback(null, obj) : void 0;
        };
      })(this));
    };

    Room.prototype.autoRotate = function(flag, autoRotateSpeed) {
      var _ref, _ref1, _ref2;
      if ((_ref = this.orbitControl) != null) {
        _ref.autoRotateSpeed = autoRotateSpeed || 2;
      }
      if (flag) {
        if ((_ref1 = this.orbitControl) != null) {
          _ref1.autoRotate = true;
        }
        return this.addAnimate('autoRotate', (function(_this) {
          return function() {
            var _ref2;
            return (_ref2 = _this.orbitControl) != null ? _ref2.update() : void 0;
          };
        })(this));
      } else {
        if ((_ref2 = this.orbitControl) != null) {
          _ref2.autoRotate = false;
        }
        return this.removeAnimate('autoRotate');
      }
    };

    Room.prototype.onMouseDblclick = function(event) {};

    Room.prototype.changeMaterial = function(object) {
      console.log("材质", object);
      return this.scene.traverse((function(_this) {
        return function(object3D) {
          if (object3D.name.indexOf("$") === 0) {
            if (object3D.type === 'Mesh') {
              if (object) {
                return object3D.material.wireframe = true;
              } else {
                return object3D.material.wireframe = false;
              }
            }
          }
        };
      })(this));
    };

    Room.prototype.generatorThings = function(equipment, value) {
      return this.scene.traverse((function(_this) {
        return function(object3D) {
          var children, _i, _len, _ref, _results;
          if (object3D.name.indexOf(equipment) === 0) {
            if (object3D.type === 'Group') {
              if (object3D.children.length > 0) {
                _ref = object3D.children;
                _results = [];
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  children = _ref[_i];
                  if (children.type === 'Mesh') {
                    if (_this.currentHex === null) {
                      _this.currentHex = children.material.color.getHex();
                    }
                    if (value === 1) {
                      children.material.color.set(0xff0045);
                    }
                    if (value !== 1) {
                      _results.push(children.material.color.set(_this.currentHex));
                    } else {
                      _results.push(void 0);
                    }
                  } else {
                    _results.push(void 0);
                  }
                }
                return _results;
              }
            }
          }
        };
      })(this));
    };

    Room.prototype.initDb = function() {
      var request;
      if (!this.db) {
        request = indexedDB.open("3d-files-db");
        request.onerror = (function(_this) {
          return function(event) {
            console.log("Database error: " + event.target.errorCode);
            return typeof _this.dbCallback === "function" ? _this.dbCallback("Database error: " + event.target.errorCode) : void 0;
          };
        })(this);
        request.onupgradeneeded = (function(_this) {
          return function(event) {
            _this.db = event.target.result;
            if (!_this.db.objectStoreNames.contains('3d-files-table')) {
              return _this.db.createObjectStore('3d-files-table', {
                keyPath: 'id'
              });
            }
          };
        })(this);
        return request.onsuccess = (function(_this) {
          return function(event) {
            _this.db = event.target.result;
            return typeof _this.dbCallback === "function" ? _this.dbCallback() : void 0;
          };
        })(this);
      } else {
        return typeof this.dbCallback === "function" ? this.dbCallback() : void 0;
      }
    };

    Room.prototype.getDataFromDatabase = function(path, cb) {
      var objectStore, objectStoreRequest, transaction;
      if (!this.db) {
        return console.warn("db is null");
      }
      transaction = this.db.transaction(["3d-files-table"], "readonly");
      objectStore = transaction.objectStore('3d-files-table');
      objectStoreRequest = objectStore.get(path);
      transaction.onerror = (function(_this) {
        return function(event) {
          return console.warn("transaction error:", event);
        };
      })(this);
      objectStoreRequest.onsuccess = (function(_this) {
        return function() {
          var _ref;
          return typeof cb === "function" ? cb(null, (_ref = objectStoreRequest.result) != null ? _ref.data : void 0) : void 0;
        };
      })(this);
      return objectStoreRequest.onerror = (function(_this) {
        return function(event) {
          return typeof cb === "function" ? cb(event) : void 0;
        };
      })(this);
    };

    Room.prototype.setDataToDataBase = function(key, data) {
      var objectStore, transaction;
      if (!this.db) {
        return console.warn("db is null");
      }
      transaction = this.db.transaction(["3d-files-table"], "readwrite");
      transaction.onerror = (function(_this) {
        return function(event) {
          return console.warn("transaction error:", event);
        };
      })(this);
      objectStore = transaction.objectStore('3d-files-table');
      return objectStore.put({
        id: key,
        data: JSON.stringify(data)
      });
    };

    Room.prototype.dispose = function() {
      this.isDisposed = true;
      this.animateList = [];
      return this.renderer.dispose();
    };

    return Room;

  })();
  return exports = Room;
});
