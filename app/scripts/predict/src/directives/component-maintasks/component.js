// Generated by IcedCoffeeScript 108.0.13

/*
* File: component-maintasks-directive
* User: James
* Date: 2019/06/25
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment", 'clc.foundation.angular/models/structure-model', "text!./taskmodal/moudle.html"], function(base, css, view, _, moment, sm, tableMoudle) {
  var ComponentMaintasksDirective, exports;
  ComponentMaintasksDirective = (function(_super) {
    __extends(ComponentMaintasksDirective, _super);

    function ComponentMaintasksDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.subscribeStationSignlVal = __bind(this.subscribeStationSignlVal, this);
      this.acceptNode = __bind(this.acceptNode, this);
      this.show = __bind(this.show, this);
      this.id = "component-maintasks";
      ComponentMaintasksDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
      this.maintasksSubscri = null;
      this.equipSubscription = {};
      this.timeSubcrib = null;
      if (this.processes == null) {
        this.processes = new sm.StructureModel('process');
      }
      if (this.types == null) {
        this.types = new sm.StructureModel('type');
      }
      this.allTasksModels = [];
      this.taskService = commonService.modelEngine.modelManager.getService("tasks");
      this.taskRecordService = commonService.modelEngine.modelManager.getService("reporting.records.task");
      this.TASK_TYPE = "unmanned-work";
      this.TASK_PROCESS = "unmanned-process";
      this.managers = new sm.StructureModel('id');
    }

    ComponentMaintasksDirective.prototype.setScope = function() {};

    ComponentMaintasksDirective.prototype.setCSS = function() {
      return css;
    };

    ComponentMaintasksDirective.prototype.setTemplate = function() {
      return view;
    };

    ComponentMaintasksDirective.prototype.show = function(scope, element, attrs) {
      var _ref;
      scope.selectNode = null;
      scope.selectedTask = null;
      this.checkAllValues = {};
      this.current = {};
      this.newTaskModel = {
        user: this.$routeParams.user,
        project: this.$routeParams.project,
        type: this.TASK_TYPE,
        process: this.TASK_PROCESS
      };
      scope.detailGreenImg = this.getComponentPath('image/detail-green.svg');
      scope.editGreenImg = this.getComponentPath('image/edit-green.svg');
      scope.deleteGreenImg = this.getComponentPath('image/delete-green.svg');
      scope.copyGreenImg = this.getComponentPath('image/copy-green.svg');
      scope.workFlag = true;
      scope.workBtnFlag = true;
      scope.detailFlag = false;
      scope.receiveFlag = false;
      scope.currTask = {
        memo: "",
        name: ""
      };
      scope.checkContent = [];
      this.resetContent(scope);
      scope.tasks = [];
      if ((_ref = this.timeSubcrib) != null) {
        _ref.dispose();
      }
      this.timeSubcrib = this.commonService.subscribeEventBus('time', (function(_this) {
        return function(d) {
          scope.query.startTime = moment(d.message.startTime).startOf('day');
          return scope.query.endTime = moment(d.message.endTime).endOf('day');
        };
      })(this));
      scope.query = {
        startTime: moment().subtract(7, "days").startOf('day'),
        endTime: moment().endOf('day')
      };
      this.subscribeStationSignlVal(scope);
      scope.showTaskInfo = (function(_this) {
        return function(operFlag) {
          if (operFlag === 1) {
            scope.workFlag = true;
            return scope.detailFlag = false;
          } else {
            scope.workFlag = false;
            return scope.detailFlag = true;
          }
        };
      })(this);
      scope.handleTask = (function(_this) {
        return function(taskItem) {
          var noddedataResult, taskResult, _ref1, _ref2;
          _this.resetContent(scope);
          scope.currTask.name = taskItem.name;
          taskResult = _.filter(_this.allTasksModels, function(model) {
            return model._id === taskItem._id;
          });
          if (taskResult.length > 0) {
            scope.selectedTask = taskResult[0];
            scope.current = _this.current = taskResult[0];
            scope.nodedatas = taskResult[0].nodes;
            noddedataResult = _.filter(scope.nodedatas, function(nodedata) {
              return nodedata.node === scope.selectedTask.phase.nextNode;
            });
            scope.selectNode = noddedataResult[0];
            if ((_.isEmpty(scope.current.phase.nextManager)) && !(scope.current.phase.progress >= 0)) {
              scope.receiveFlag = true;
            } else {
              scope.receiveFlag = false;
            }
            if (scope.$root.user.user === ((_ref1 = scope.selectNode) != null ? (_ref2 = _ref1.manager) != null ? _ref2.id : void 0 : void 0) && scope.selectedTask.phase.progress !== 1) {
              scope.workFlag = true;
              scope.workBtnFlag = true;
              return scope.detailFlag = false;
            } else {
              scope.workFlag = false;
              scope.workBtnFlag = false;
              return scope.detailFlag = true;
            }
          }
        };
      })(this);
      scope.deleteTask = (function(_this) {
        return function(taskItem) {
          var taskResult;
          taskResult = _.filter(_this.allTasksModels, function(model) {
            return model._id === taskItem._id;
          });
          if (taskResult.length > 0) {
            _this.current = taskResult[0];
            return _this.taskService.remove(taskResult[0], function(err, taskdata) {
              if (err) {
                return _this.display(err, taskdata);
              } else {
                _this.getTaskDatas(scope);
                scope.$applyAsync();
                return _this.display("温馨提示：操作成功！");
              }
            });
          }
        };
      })(this);
      scope.selectTaskData = (function(_this) {
        return function(taskItem) {
          var taskResult;
          scope.currTask.name = taskItem.name;
          taskResult = _.filter(_this.allTasksModels, function(model) {
            return model._id === taskItem._id;
          });
          if (taskResult.length > 0) {
            return scope.nodedatas = taskResult[0].nodes;
          }
        };
      })(this);
      scope.queryReport = (function(_this) {
        return function() {
          _this.getTaskDatas(scope);
          return scope.$applyAsync();
        };
      })(this);
      scope.addTask = (function(_this) {
        return function() {
          _this.newTaskModel = {
            user: _this.$routeParams.user,
            project: _this.$routeParams.project,
            type: _this.TASK_TYPE,
            process: _this.TASK_PROCESS,
            creator: {
              id: scope.$root.user.user,
              name: scope.$root.user.name
            }
          };
          return scope.$applyAsync();
        };
      })(this);
      scope.saveTask = (function(_this) {
        return function() {
          var taskResult;
          taskResult = _.filter(scope.tasks, function(taskitem) {
            return taskitem.name === scope.currTask.name;
          });
          if (taskResult.length > 0) {
            _this.display("该工单号已存在，请查证！");
            return;
          }
          return _this.taskService.save(_this.newTaskModel, function(err, taskdata) {
            taskdata.nodes[0].contents = [];
            taskdata.nodes[0].contents[0] = scope.checkContent;
            taskdata.nodes[0].contents[1] = scope.currTask.memo;
            _this.current = taskdata;
            _this.getTaskDatas(scope);
            _this.display("温馨提示：操作成功！");
            return scope.$applyAsync();
          });
        };
      })(this);
      scope.handleTaskOper = (function(_this) {
        return function(action) {
          var item, tmpAllVals, _i, _len;
          tmpAllVals = _.values(_this.checkAllValues);
          for (_i = 0, _len = tmpAllVals.length; _i < _len; _i++) {
            item = tmpAllVals[_i];
            if (!item) {
              _this.display("温馨提示：有部分漏巡检，请查证！");
              return;
            }
          }
          if (_.isEmpty(scope.selectNode.contents)) {
            scope.selectNode.contents = [];
            scope.selectNode.contents[0] = scope.checkContent;
            scope.selectNode.contents[1] = scope.currTask.memo;
          } else {
            scope.checkContent.push(scope.currTask.memo);
            scope.selectNode.contents.push({
              content: scope.checkContent
            });
          }
          return _this.updateNode(scope, scope.selectNode, action, function(err, result) {
            _this.getTaskDatas(scope);
            _this.display("温馨提示：操作成功！");
            return scope.$applyAsync();
          });
        };
      })(this);
      scope.checkedChange = (function(_this) {
        return function(objId, data) {
          return _this.checkAllValues[objId] = data;
        };
      })(this);
      scope.acceptWorkSheet = (function(_this) {
        return function() {
          return _this.acceptNode(scope, scope.selectNode, function(err, result) {
            _this.getTaskDatas(scope);
            _this.display("温馨提示：操作成功！");
            return scope.$applyAsync();
          });
        };
      })(this);
      return this.loadTypes((function(_this) {
        return function(err, typedatas) {
          _this.getTaskDatas(scope);
          return scope.$applyAsync();
        };
      })(this), true);
    };

    ComponentMaintasksDirective.prototype.loadTypes = function(callback, refresh) {
      return this.commonService.loadProjectModelByService('processtypes', {}, 'type name', (function(_this) {
        return function(err, model) {
          _this.types.setItems(model);
          return typeof callback === "function" ? callback(err, model) : void 0;
        };
      })(this), refresh);
    };

    ComponentMaintasksDirective.prototype.loadManagers = function(callback, refresh) {
      return this.commonService.loadProjectModelByService('groups', {}, 'group engineers name', (function(_this) {
        return function(err, model) {
          var e, engineers, m, _i, _j, _len, _len1, _ref;
          if (model) {
            engineers = [];
            for (_i = 0, _len = model.length; _i < _len; _i++) {
              m = model[_i];
              _ref = m.engineers;
              for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                e = _ref[_j];
                engineers.push(e);
              }
            }
          }
          _this.managers.setItems(engineers);
          return typeof callback === "function" ? callback(err, model) : void 0;
        };
      })(this), refresh);
    };

    ComponentMaintasksDirective.prototype.loadProcesses = function(callback, refresh) {
      return this.commonService.loadProjectModelByService('processes', {}, 'type process name', (function(_this) {
        return function(err, model) {
          _this.processes.setItems(model);
          _this.processes.groupBy('type');
          return typeof callback === "function" ? callback(err, model) : void 0;
        };
      })(this), refresh);
    };

    ComponentMaintasksDirective.prototype.subscribeMyTasks = function(scope) {
      var topic, user, _ref;
      user = scope.$root.user.user;
      topic = "tasks/" + user + "/#";
      if ((_ref = this.maintasksSubscri) != null) {
        _ref.dispose();
      }
      return this.maintasksSubscri = this.commonService.configurationLiveSession.subscribe(topic, (function(_this) {
        return function(err, d) {
          var id, itemIndex, taskmodel, tmpExcuteTime, tmpTaskModel, tmpTaskResult, typeModel, _ref1, _ref2, _ref3, _ref4;
          if (!d) {
            return;
          }
          if (d.topic.indexOf("configuration/task/create/") === 0 || d.topic.indexOf("configuration/task/update/") === 0) {
            taskmodel = d.message;
            tmpTaskModel = _.where(_this.allTasksModels, {
              _id: taskmodel._id
            });
            if (_.isEmpty(tmpTaskModel)) {
              _this.allTasksModels.push(d.message);
            } else {
              tmpTaskModel.name = taskmodel.name;
              tmpTaskModel.trigger = taskmodel.trigger;
              tmpTaskModel.nodes = taskmodel.nodes;
              tmpTaskModel.enable = taskmodel.enable;
              tmpTaskModel.visible = taskmodel.visible;
              tmpTaskModel.phase = taskmodel.phase;
              tmpTaskModel.updatetime = taskmodel.updatetime;
            }
            tmpTaskResult = _.where(scope.tasks, {
              _id: taskmodel._id
            });
            typeModel = _.filter(_this.types.model, function(modelItem) {
              return modelItem.type === taskmodel.type;
            });
            if (_.isEmpty(tmpTaskResult)) {
              tmpExcuteTime = null;
              if (_.isEmpty(taskmodel != null ? taskmodel.phase.timestamp : void 0)) {
                tmpExcuteTime = null;
              } else {
                tmpExcuteTime = moment(taskmodel != null ? (_ref1 = taskmodel.phase) != null ? _ref1.timestamp : void 0 : void 0).format("YYYY-MM-DD HH:mm:ss");
              }
              scope.tasks.push({
                _id: taskmodel._id,
                name: taskmodel.name,
                typeName: typeModel[0].name,
                statusName: _this.getStatusName(taskmodel.phase.progress, taskmodel.phase.state, taskmodel.phase.nextManager),
                currexcutetime: tmpExcuteTime,
                excutor: (_ref2 = taskmodel.phase) != null ? (_ref3 = _ref2.manager) != null ? _ref3.name : void 0 : void 0,
                creator: taskmodel.creator.name,
                createtime: moment(taskmodel.createtime).format("YYYY-MM-DD HH:mm:ss")
              });
            } else {
              tmpTaskResult.name = taskmodel.name;
              tmpTaskResult.typeName = typeModel[0].name;
              tmpTaskResult.statusName = _this.getStatusName(taskmodel.phase.progress, taskmodel.phase.state, taskmodel.phase.nextManager);
              tmpTaskResult.currexcutetime = moment(taskmodel.phase.timestamp).format("YYYY-MM-DD HH:mm:ss");
              tmpTaskResult.excutor = (_ref4 = taskmodel.phase.manager) != null ? _ref4.name : void 0;
              tmpTaskResult.creator = taskmodel.creator.name;
              tmpTaskResult.createtime = moment(taskmodel.createtime).format("YYYY-MM-DD HH:mm:ss");
            }
            return scope.$applyAsync();
          } else if (d.topic.indexOf("configuration/task/delete/") === 0) {
            id = d.message._id;
            itemIndex = _.findIndex(scope.tasks, function(taskItem) {
              return taskItem._id = id;
            });
            if (itemIndex >= 0) {
              scope.tasks.slice(itemIndex + 1);
              return scope.$applyAsync();
            }
          }
        };
      })(this), false, null);
    };

    ComponentMaintasksDirective.prototype.resetContent = function(scope) {
      var content, counts, datas, html;
      if ($("#detail-table").children.length > 0) {
        $("#detail-table").empty();
      }
      html = _.clone(tableMoudle);
      content = _.has(this.current, "nodes") ? this.current.nodes[0].contents[0].content : {
        severities: ["--", "--", "--"],
        ups1: {
          alarms: "--",
          loadRate: "--"
        },
        ups2: {
          alarms: "--",
          loadRate: "--"
        },
        distributor: {
          alarms: "--",
          voltage: "--",
          temperature: "--",
          humidity: "--"
        },
        battery: {
          alarms: "--",
          temperature: "--",
          humidity: "--"
        },
        ac1: {
          alarms: "--",
          status: "--"
        },
        ac2: {
          alarms: "--",
          status: "--"
        },
        ac3: {
          alarms: "--",
          status: "--"
        },
        dme1: {
          alarms: "--",
          status: "--"
        },
        dme2: {
          alarms: "--",
          status: "--"
        },
        th1: {
          alarms: "--",
          temperature: "--",
          humidity: "--"
        },
        th1: {
          alarms: "--",
          temperature: "--",
          humidity: "--"
        },
        th2: {
          alarms: "--",
          temperature: "--",
          humidity: "--"
        },
        th3: {
          alarms: "--",
          temperature: "--",
          humidity: "--"
        },
        th4: {
          alarms: "--",
          temperature: "--",
          humidity: "--"
        },
        th5: {
          alarms: "--",
          temperature: "--",
          humidity: "--"
        },
        th6: {
          alarms: "--",
          temperature: "--",
          humidity: "--"
        },
        th7: {
          alarms: "--",
          temperature: "--",
          humidity: "--"
        },
        water1: "--",
        water2: "--",
        water3: "--",
        water4: "--",
        water5: "--",
        comment: ""
      };
      counts = {
        ups: 2,
        ac: 3,
        dme: 2,
        th: 7,
        water: 5
      };
      datas = ["ups-alarms", "ups-loadRate", "distributor-alarms", "distributor-voltage", "battery-alarms", "battery-temperature", "battery-humidity", "ac-status", "dme-status", "th-alarms", "th-temperature", "th-humidity", "water-alarms", "distributor-temperature", "distributor-humidity"];
      _.map(datas, (function(_this) {
        return function(item) {
          var count, items, replaceVal, x, y, _i, _index, _j, _len, _ref, _ref1, _ref2, _results, _val, _val2;
          items = item.split("-");
          count = _.has(counts, items[0]) ? counts[items[0]] : 1;
          for (x = _i = 1; 1 <= count ? _i <= count : _i >= count; x = 1 <= count ? ++_i : --_i) {
            _index = items[0] === "distributor" || items[0] === "battery" ? items[0] : items[0] + x;
            _val = (_ref = content[_index]) != null ? _ref[items[1]] : void 0;
            replaceVal = "";
            if (typeof _val === "object" && (items[1] === "loadRate" || items[1] === "voltage")) {
              replaceVal = _.max(_.values(_val));
            } else if (typeof _val === "boolean" && items[1] === "alarms") {
              replaceVal = _val ? "告警" : "正常";
            } else if (typeof _val === "string" || typeof _val === "number") {
              replaceVal = _val;
            } else {
              replaceVal = "--";
            }
            html = html.replace("{{" + _index + "-" + items[1] + "}}", replaceVal);
          }
          if (_.has(content, "severities")) {
            _ref1 = [1, 2, 3];
            _results = [];
            for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
              y = _ref1[_j];
              _val2 = (content != null ? (_ref2 = content.severities[y - 1]) != null ? _ref2.value : void 0 : void 0) ? content.severities[y - 1].value : "--";
              _results.push(html = html.replace("{{severities" + y + "-value}}", _val2));
            }
            return _results;
          }
        };
      })(this));
      return $("#detail-table").append(html);
    };

    ComponentMaintasksDirective.prototype.groupBy = function(items) {
      var item, type, typeItems, _i, _j, _len, _len1, _name, _ref;
      if (items == null) {
        items = this.items;
      }
      this.groupByType(this.allType, items);
      typeItems = {};
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        if (typeItems[_name = item.type] == null) {
          typeItems[_name] = [];
        }
        typeItems[item.type].push(item);
      }
      _ref = this.types.items;
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        type = _ref[_j];
        this.groupByType(type, typeItems[type.type]);
      }
    };

    ComponentMaintasksDirective.prototype.groupByType = function(type, items) {
      var groups, item, phase, _i, _len, _ref, _ref1, _ref2, _ref3;
      if (items == null) {
        items = [];
      }
      groups = {
        myStart: [],
        myProcess: [],
        all: [],
        approval: [],
        reject: [],
        progress: [],
        cancel: []
      };
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        phase = item.phase;
        if (phase) {
          if (phase.done) {
            if ((_ref = groups[phase.state]) != null) {
              _ref.push(item);
            }
          } else {
            groups.progress.push(item);
          }
        } else {
          groups.progress.push(item);
        }
        groups.all.push(item);
        if (((_ref1 = item.owner) != null ? _ref1.id : void 0) === this.loginUser) {
          groups.myStart.push(item);
        }
        if (((_ref2 = item.phase) != null ? (_ref3 = _ref2.nextManager) != null ? _ref3.id : void 0 : void 0) === this.loginUser) {
          groups.myProcess.push(item);
        }
      }
      type.items = items;
      return type.groups = groups;
    };

    ComponentMaintasksDirective.prototype.getTaskDatas = function(scope) {
      var filter;
      scope.tasks = [];
      this.allTasksModels = [];
      filter = {};
      filter.user = this.$routeParams.user;
      filter.project = this.$routeParams.project;
      filter.createtime = {
        "$gte": scope.query.startTime,
        "$lte": scope.query.endTime
      };
      filter["$or"] = [
        {
          "creator.id": scope.$root.user.user
        }, {
          "nodes.manager.id": scope.$root.user.user
        }, {
          "$and": [
            {
              "phase.nextManager": null
            }, {
              "phase.progress": null
            }
          ]
        }
      ];
      this.subscribeMyTasks(scope);
      return this.taskRecordService.query(filter, null, (function(_this) {
        return function(err, taskDatas) {
          var excutor, taskmodel, taskmodels, typeModel, _i, _len, _ref;
          if (taskDatas) {
            taskmodels = taskDatas.data;
            if (taskmodels) {
              for (_i = 0, _len = taskmodels.length; _i < _len; _i++) {
                taskmodel = taskmodels[_i];
                _this.allTasksModels.push(taskmodel);
                typeModel = _.filter(_this.types.model, function(modelItem) {
                  return modelItem.type === taskmodel.type;
                });
                excutor = "";
                if ((_.isEmpty(taskmodel.phase.nextManager)) && (taskmodel.phase.progress === 1)) {
                  excutor = taskmodel.phase.manager.name;
                } else if (_.isEmpty(taskmodel.phase.nextManager)) {
                  excutor = null;
                } else if (!_.isEmpty(taskmodel.phase.manager)) {
                  excutor = taskmodel.phase.manager.name;
                } else if (!_.isEmpty(taskmodel.phase.nextManager)) {
                  excutor = taskmodel.phase.nextManager.name;
                }
                scope.tasks.push({
                  _id: taskmodel._id,
                  name: taskmodel.name,
                  typeName: typeModel[0].name,
                  statusName: _this.getStatusName(taskmodel.phase.progress, taskmodel.phase.state, taskmodel.phase.nextManager),
                  currexcutetime: (_.isEmpty(taskmodel.phase.timestamp) ? null : moment(taskmodel.phase.timestamp).format("YYYY-MM-DD HH:mm:ss")),
                  excutor: excutor,
                  creator: (_ref = taskmodel.creator) != null ? _ref.name : void 0,
                  createtime: moment(taskmodel.createtime).format("YYYY-MM-DD HH:mm:ss")
                });
              }
              return scope.tasks = scope.tasks.reverse();
            }
          }
        };
      })(this), true);
    };

    ComponentMaintasksDirective.prototype.getTaskDatas2 = function(scope) {
      var filter;
      scope.tasks = [];
      this.allTasksModels = [];
      filter = {};
      filter.user = this.$routeParams.user;
      filter.project = this.$routeParams.project;
      filter.createtime = {
        "$gte": scope.query.startTime,
        "$lte": scope.query.endTime
      };
      this.subscribeMyTasks(scope);
      return this.commonService.loadProjectModelByService('tasks', filter, '_id user project type process name creator task phase nodes createtime', (function(_this) {
        return function(err, taskmodels) {
          var excutor, taskmodel, typeModel, _i, _len, _ref;
          if (taskmodels) {
            for (_i = 0, _len = taskmodels.length; _i < _len; _i++) {
              taskmodel = taskmodels[_i];
              _this.allTasksModels.push(taskmodel);
              typeModel = _.filter(_this.types.model, function(modelItem) {
                return modelItem.type === taskmodel.type;
              });
              excutor = "";
              if ((_.isEmpty(taskmodel.phase.nextManager)) && (taskmodel.phase.progress === 1)) {
                excutor = taskmodel.phase.manager.name;
              } else if (_.isEmpty(taskmodel.phase.nextManager)) {
                excutor = null;
              } else if (!_.isEmpty(taskmodel.phase.manager)) {
                excutor = taskmodel.phase.manager.name;
              } else if (!_.isEmpty(taskmodel.phase.nextManager)) {
                excutor = taskmodel.phase.nextManager.name;
              }
              scope.tasks.push({
                _id: taskmodel._id,
                name: taskmodel.name,
                typeName: typeModel[0].name,
                statusName: _this.getStatusName(taskmodel.phase.progress, taskmodel.phase.state, taskmodel.phase.nextManager),
                currexcutetime: (_.isEmpty(taskmodel.phase.timestamp) ? null : moment(taskmodel.phase.timestamp).format("YYYY-MM-DD HH:mm:ss")),
                excutor: excutor,
                creator: (_ref = taskmodel.creator) != null ? _ref.name : void 0,
                createtime: moment(taskmodel.createtime).format("YYYY-MM-DD HH:mm:ss")
              });
            }
            return scope.tasks = scope.tasks.reverse();
          }
        };
      })(this), true);
    };

    ComponentMaintasksDirective.prototype.acceptNode = function(scope, node, callback) {
      var data, schema, url, user;
      schema = this.taskService.url;
      url = this.taskService.replaceUrlParam(schema, this.current, true);
      url += "/" + node.node + "/accept";
      user = scope.$root.user;
      data = {
        _id: scope.current._id,
        data: {
          node: node.node,
          manager: {
            id: user.user,
            name: user.name
          }
        }
      };
      return this.taskService.postData(url, data, (function(_this) {
        return function(err, result) {
          return typeof callback === "function" ? callback(err, result) : void 0;
        };
      })(this));
    };

    ComponentMaintasksDirective.prototype.updateNode = function(scope, node, action, callback) {
      var data, phase, schema, url, user;
      schema = this.taskService.url;
      url = this.taskService.replaceUrlParam(schema, this.current, true);
      url += "/" + node.node;
      user = scope.$root.user;
      phase = {
        _id: node._id,
        node: node.node,
        parameters: node.parameters,
        contents: node.contents,
        state: action,
        timestamp: new Date,
        manager: {
          id: user.user,
          name: user.name
        }
      };
      if (action === 'forward') {
        phase.forwarder = node.forwarder;
      }
      data = {
        _id: this.current._id,
        data: phase
      };
      return this.taskService.postData(url, data, (function(_this) {
        return function(err, result) {
          return typeof callback === "function" ? callback(err, result) : void 0;
        };
      })(this));
    };

    ComponentMaintasksDirective.prototype.getTaskMaxNo = function(callback) {
      var aggregateCons, filter, groupObj, matchObj;
      aggregateCons = [];
      matchObj = {};
      groupObj = {};
      filter = this.$routeParams;
      matchObj.$match = filter;
      groupObj.$group = {
        _id: {
          user: "$user",
          project: "$project"
        },
        maxtaskno: {
          $max: "$name"
        }
      };
      aggregateCons.push(matchObj);
      aggregateCons.push(groupObj);
      return this.commonService.reportingService.aggregateTasks({
        filter: this.$routeParams,
        pipeline: aggregateCons,
        options: {
          allowDiskUse: true
        }
      }, (function(_this) {
        return function(err, records) {
          var currDate, maxNO, orderid, tmporder;
          currDate = moment().format("YYYYMMDD");
          if (records && records.length > 0) {
            maxNO = records[0].maxtaskno.substring(0, 8);
            orderid = records[0].maxtaskno.substring(8, 10);
            if (maxNO === currDate) {
              tmporder = (parseInt(orderid) + 1).toString();
              if (tmporder.length < 2) {
                tmporder = "0" + tmporder;
              }
              currDate = currDate + tmporder;
              return typeof callback === "function" ? callback(currDate) : void 0;
            } else {
              currDate = currDate + "01";
              return typeof callback === "function" ? callback(currDate) : void 0;
            }
          } else {
            currDate = currDate + "01";
            return typeof callback === "function" ? callback(currDate) : void 0;
          }
        };
      })(this));
    };

    ComponentMaintasksDirective.prototype.subscribeStationSignlVal = function(scope) {
      var filter, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
      filter = {
        user: scope.project.model.user,
        project: scope.project.model.project,
        station: "center-qianjiang",
        equipment: "ups1",
        signal: "a-phase--output-load-percentage"
      };
      if ((_ref = this.equipSubscription["center-qianjiang" + "ups1" + "a-phase--output-load-percentage"]) != null) {
        _ref.dispose();
      }
      this.equipSubscription["center-qianjiang" + "ups1" + "a-phase--output-load-percentage"] = this.commonService.signalLiveSession.subscribeValues(filter, (function(_this) {
        return function(err, d) {
          if (err) {
            return;
          }
          if (scope.checkContent[0].equips[0].value[0].value < d.message.value) {
            return scope.checkContent[0].equips[0].value[0].value = d.message.value.toFixed(2);
          }
        };
      })(this), true);
      filter = {
        user: scope.project.model.user,
        project: scope.project.model.project,
        station: "center-qianjiang",
        equipment: "ups1",
        signal: "b-phase--output-load-percentage"
      };
      if ((_ref1 = this.equipSubscription["center-qianjiang" + "ups1" + "b-phase--output-load-percentage"]) != null) {
        _ref1.dispose();
      }
      this.equipSubscription["center-qianjiang" + "ups1" + "b-phase--output-load-percentage"] = this.commonService.signalLiveSession.subscribeValues(filter, (function(_this) {
        return function(err, d) {
          if (err) {
            return;
          }
          if (scope.checkContent[0].equips[0].value[0].value < d.message.value) {
            return scope.checkContent[0].equips[0].value[0].value = d.message.value.toFixed(2);
          }
        };
      })(this), true);
      filter = {
        user: scope.project.model.user,
        project: scope.project.model.project,
        station: "center-qianjiang",
        equipment: "ups1",
        signal: "c-phase--output-load-percentage"
      };
      if ((_ref2 = this.equipSubscription["center-qianjiang" + "ups1" + "c-phase--output-load-percentage"]) != null) {
        _ref2.dispose();
      }
      this.equipSubscription["center-qianjiang" + "ups1" + "c-phase--output-load-percentage"] = this.commonService.signalLiveSession.subscribeValues(filter, (function(_this) {
        return function(err, d) {
          if (err) {
            return;
          }
          if (scope.checkContent[0].equips[0].value[0].value < d.message.value) {
            return scope.checkContent[0].equips[0].value[0].value = d.message.value.toFixed(2);
          }
        };
      })(this), true);
      filter = {
        user: scope.project.model.user,
        project: scope.project.model.project,
        station: "center-qianjiang",
        equipment: "ups2",
        signal: "a-phase--output-load-percentage"
      };
      if ((_ref3 = this.equipSubscription["center-qianjiang" + "ups2" + "a-phase--output-load-percentage"]) != null) {
        _ref3.dispose();
      }
      this.equipSubscription["center-qianjiang" + "ups2" + "a-phase--output-load-percentage"] = this.commonService.signalLiveSession.subscribeValues(filter, (function(_this) {
        return function(err, d) {
          if (err) {
            return;
          }
          if (scope.checkContent[0].equips[1].value[0].value < d.message.value) {
            return scope.checkContent[0].equips[1].value[0].value = d.message.value.toFixed(2);
          }
        };
      })(this), true);
      filter = {
        user: scope.project.model.user,
        project: scope.project.model.project,
        station: "center-qianjiang",
        equipment: "ups2",
        signal: "b-phase--output-load-percentage"
      };
      if ((_ref4 = this.equipSubscription["center-qianjiang" + "ups2" + "b-phase--output-load-percentage"]) != null) {
        _ref4.dispose();
      }
      this.equipSubscription["center-qianjiang" + "ups2" + "b-phase--output-load-percentage"] = this.commonService.signalLiveSession.subscribeValues(filter, (function(_this) {
        return function(err, d) {
          if (err) {
            return;
          }
          if (scope.checkContent[0].equips[1].value[0].value < d.message.value) {
            return scope.checkContent[0].equips[1].value[0].value = d.message.value.toFixed(2);
          }
        };
      })(this), true);
      filter = {
        user: scope.project.model.user,
        project: scope.project.model.project,
        station: "center-qianjiang",
        equipment: "ups2",
        signal: "c-phase--output-load-percentage"
      };
      if ((_ref5 = this.equipSubscription["center-qianjiang" + "ups2" + "c-phase--output-load-percentage"]) != null) {
        _ref5.dispose();
      }
      this.equipSubscription["center-qianjiang" + "ups2" + "c-phase--output-load-percentage"] = this.commonService.signalLiveSession.subscribeValues(filter, (function(_this) {
        return function(err, d) {
          if (err) {
            return;
          }
          if (scope.checkContent[0].equips[1].value[0].value < d.message.value) {
            return scope.checkContent[0].equips[1].value[0].value = d.message.value.toFixed(2);
          }
        };
      })(this), true);
      filter = {
        user: scope.project.model.user,
        project: scope.project.model.project,
        station: "center-qianjiang",
        equipment: "ups1",
        signal: "communication-status"
      };
      if ((_ref6 = this.equipSubscription["center-qianjiang" + "ups1" + "communication-status"]) != null) {
        _ref6.dispose();
      }
      this.equipSubscription["center-qianjiang" + "ups1" + "communication-status"] = this.commonService.signalLiveSession.subscribeValues(filter, (function(_this) {
        return function(err, d) {
          if (err) {
            return;
          }
          return scope.checkContent[0].equips[0].value[1].value = _this.getCommounicationName(d.message.value);
        };
      })(this), true);
      filter = {
        user: scope.project.model.user,
        project: scope.project.model.project,
        station: "center-qianjiang",
        equipment: "ups2",
        signal: "communication-status"
      };
      if ((_ref7 = this.equipSubscription["center-qianjiang" + "ups2" + "communication-status"]) != null) {
        _ref7.dispose();
      }
      this.equipSubscription["center-qianjiang" + "ups2" + "communication-status"] = this.commonService.signalLiveSession.subscribeValues(filter, (function(_this) {
        return function(err, d) {
          if (err) {
            return;
          }
          return scope.checkContent[0].equips[1].value[1].value = _this.getCommounicationName(d.message.value);
        };
      })(this), true);
      filter = {
        user: scope.project.model.user,
        project: scope.project.model.project,
        station: "center-qianjiang",
        equipment: "th1",
        signal: "temperature"
      };
      if ((_ref8 = this.equipSubscription["center-qianjiang" + "th1" + "temperature"]) != null) {
        _ref8.dispose();
      }
      this.equipSubscription["center-qianjiang" + "th1" + "temperature"] = this.commonService.signalLiveSession.subscribeValues(filter, (function(_this) {
        return function(err, d) {
          if (err) {
            return;
          }
          return scope.checkContent[1].equips[0].value[0].value = d.message.value.toFixed(2);
        };
      })(this), true);
      filter = {
        user: scope.project.model.user,
        project: scope.project.model.project,
        station: "center-qianjiang",
        equipment: "th1",
        signal: "humidity"
      };
      if ((_ref9 = this.equipSubscription["center-qianjiang" + "th1" + "humidity"]) != null) {
        _ref9.dispose();
      }
      this.equipSubscription["center-qianjiang" + "th1" + "humidity"] = this.commonService.signalLiveSession.subscribeValues(filter, (function(_this) {
        return function(err, d) {
          if (err) {
            return;
          }
          return scope.checkContent[1].equips[0].value[1].value = d.message.value.toFixed(2);
        };
      })(this), true);
      filter = {
        user: scope.project.model.user,
        project: scope.project.model.project,
        station: "battery-room",
        equipment: "th16",
        signal: "temperature"
      };
      if ((_ref10 = this.equipSubscription["battery-room" + "th16" + "temperature"]) != null) {
        _ref10.dispose();
      }
      this.equipSubscription["battery-room" + "th16" + "temperature"] = this.commonService.signalLiveSession.subscribeValues(filter, (function(_this) {
        return function(err, d) {
          if (err) {
            return;
          }
          return scope.checkContent[1].equips[1].value[0].value = d.message.value.toFixed(2);
        };
      })(this), true);
      filter = {
        user: scope.project.model.user,
        project: scope.project.model.project,
        station: "battery-room",
        equipment: "th16",
        signal: "humidity"
      };
      if ((_ref11 = this.equipSubscription["battery-room" + "th16" + "humidity"]) != null) {
        _ref11.dispose();
      }
      this.equipSubscription["battery-room" + "th16" + "humidity"] = this.commonService.signalLiveSession.subscribeValues(filter, (function(_this) {
        return function(err, d) {
          if (err) {
            return;
          }
          return scope.checkContent[1].equips[1].value[1].value = d.message.value.toFixed(2);
        };
      })(this), true);
      filter = {
        user: scope.project.model.user,
        project: scope.project.model.project,
        station: "center-qianjiang",
        equipment: "meter4",
        signal: "phase-a-voltage"
      };
      if ((_ref12 = this.equipSubscription["center-qianjiang" + "meter4" + "phase-a-voltage"]) != null) {
        _ref12.dispose();
      }
      this.equipSubscription["center-qianjiang" + "meter4" + "phase-a-voltage"] = this.commonService.signalLiveSession.subscribeValues(filter, (function(_this) {
        return function(err, d) {
          if (err) {
            return;
          }
          if (scope.checkContent[2].equips[0].value < d.message.value) {
            return scope.checkContent[2].equips[0].value = d.message.value.toFixed(2);
          }
        };
      })(this), true);
      filter = {
        user: scope.project.model.user,
        project: scope.project.model.project,
        station: "center-qianjiang",
        equipment: "meter4",
        signal: "phase-b-voltage"
      };
      if ((_ref13 = this.equipSubscription["center-qianjiang" + "meter4" + "phase-b-voltage"]) != null) {
        _ref13.dispose();
      }
      this.equipSubscription["center-qianjiang" + "meter4" + "phase-b-voltage"] = this.commonService.signalLiveSession.subscribeValues(filter, (function(_this) {
        return function(err, d) {
          if (err) {
            return;
          }
          if (scope.checkContent[2].equips[0].value < d.message.value) {
            return scope.checkContent[2].equips[0].value = d.message.value.toFixed(2);
          }
        };
      })(this), true);
      filter = {
        user: scope.project.model.user,
        project: scope.project.model.project,
        station: "center-qianjiang",
        equipment: "meter4",
        signal: "phase-c-voltage"
      };
      if ((_ref14 = this.equipSubscription["center-qianjiang" + "meter4" + "phase-c-voltage"]) != null) {
        _ref14.dispose();
      }
      return this.equipSubscription["center-qianjiang" + "meter4" + "phase-c-voltage"] = this.commonService.signalLiveSession.subscribeValues(filter, (function(_this) {
        return function(err, d) {
          if (err) {
            return;
          }
          if (scope.checkContent[2].equips[0].value < d.message.value) {
            return scope.checkContent[2].equips[0].value = d.message.value.toFixed(2);
          }
        };
      })(this), true);
    };

    ComponentMaintasksDirective.prototype.getStatusName = function(progress, state, manager) {
      if ((_.isEmpty(manager)) && !(progress >= 0)) {
        return "等待处理";
      } else if (state === "reject") {
        return "拒绝";
      } else if (state === "cancel") {
        return "取消";
      } else if ((progress < 1) || (!_.isEmpty(manager))) {
        return "进行中";
      } else {
        return "已结束";
      }
    };

    ComponentMaintasksDirective.prototype.getCommounicationName = function(status) {
      if (status === 0) {
        return "正常";
      } else {
        return "异常";
      }
    };

    ComponentMaintasksDirective.prototype.resize = function(scope) {};

    ComponentMaintasksDirective.prototype.dispose = function(scope) {
      var _ref;
      if ((_ref = this.timeSubcrib) != null) {
        _ref.dispose();
      }
      _.mapObject(this.equipSubscription, function(item) {});
      return typeof item !== "undefined" && item !== null ? item.dispose() : void 0;
    };

    return ComponentMaintasksDirective;

  })(base.BaseDirective);
  return exports = {
    ComponentMaintasksDirective: ComponentMaintasksDirective
  };
});
