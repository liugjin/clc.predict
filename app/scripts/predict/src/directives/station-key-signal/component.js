// Generated by IcedCoffeeScript 108.0.13

/*
* File: station-key-signal-directive
* User: David
* Date: 2020/02/12
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var StationKeySignalDirective, exports;
  StationKeySignalDirective = (function(_super) {
    __extends(StationKeySignalDirective, _super);

    function StationKeySignalDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.getSeverityLabelColor = __bind(this.getSeverityLabelColor, this);
      this.getSeverityColor = __bind(this.getSeverityColor, this);
      this.getDeviceSpecialSignal = __bind(this.getDeviceSpecialSignal, this);
      this.getDeviceOrSignals = __bind(this.getDeviceOrSignals, this);
      this.show = __bind(this.show, this);
      this.id = "station-key-signal";
      StationKeySignalDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    StationKeySignalDirective.prototype.setScope = function() {};

    StationKeySignalDirective.prototype.setCSS = function() {
      return css;
    };

    StationKeySignalDirective.prototype.setTemplate = function() {
      return view;
    };

    StationKeySignalDirective.prototype.show = function(scope, element, attrs) {
      var _ref;
      this.getDeviceOrSignals(scope);
      if ((_ref = scope.stationEventBus) != null) {
        _ref.dispose();
      }
      return scope.stationEventBus = this.commonService.subscribeEventBus('stationID', (function(_this) {
        return function(msg) {
          var stationID;
          stationID = msg.message.data;
          return _this.commonService.loadStation(stationID, function(err, station) {
            scope.station = station;
            return _this.getDeviceOrSignals(scope);
          });
        };
      })(this));
    };

    StationKeySignalDirective.prototype.getDeviceOrSignals = function(scope) {
      scope.signalDataArr = [];
      scope.equipSubscription = {};
      return this.commonService.loadEquipmentById(scope.station, '_station_management', (function(_this) {
        return function(err, equipment) {
          if (equipment) {
            return equipment.loadSignals(null, function(err, signals) {
              var sig, signalData, _i, _len, _results;
              _results = [];
              for (_i = 0, _len = signals.length; _i < _len; _i++) {
                sig = signals[_i];
                if (sig.model.template === "_station_management_template") {
                  signalData = {
                    equipName: '',
                    signalName: '',
                    setValue: 0,
                    unit: '',
                    signalID: '',
                    severity: '',
                    severityColor: '',
                    severityLabelColor: ''
                  };
                  signalData.equipName = equipment.model.name;
                  signalData.signalName = sig.model.name;
                  signalData.unit = sig.model.desc;
                  signalData.signalID = sig.model.signal;
                  scope.signalDataArr.push(signalData);
                  _results.push(_this.getDeviceSpecialSignal(scope, sig));
                } else {
                  _results.push(void 0);
                }
              }
              return _results;
            });
          }
        };
      })(this));
    };

    StationKeySignalDirective.prototype.getDeviceSpecialSignal = function(scope, sig) {
      var filter, _ref;
      filter = {
        user: scope.project.model.user,
        project: scope.project.model.project,
        station: scope.station.model.station,
        equipment: sig.equipment.model.equipment,
        signal: sig.model.signal
      };
      if ((_ref = scope.equipSubscription[sig.model.signal]) != null) {
        _ref.dispose();
      }
      return scope.equipSubscription[sig.model.signal] = this.commonService.signalLiveSession.subscribeValues(filter, (function(_this) {
        return function(err, signal) {
          var data, _i, _len, _ref1, _results;
          if (signal && signal.message) {
            if (sig != null) {
              sig.setValue(signal.message);
            }
            _ref1 = scope.signalDataArr;
            _results = [];
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              data = _ref1[_i];
              if (data.signalID === signal.message.signal) {
                data.setValue = sig.data.formatValue;
                data.serverity = sig.data.severity;
                data.severityColor = _this.getSeverityColor(scope, sig.data.severity);
                _results.push(data.severityLabelColor = _this.getSeverityLabelColor(scope, sig.data.severity));
              } else {
                _results.push(void 0);
              }
            }
            return _results;
          }
        };
      })(this));
    };

    StationKeySignalDirective.prototype.getSeverityColor = function(scope, severity) {
      var color;
      if (severity < 1) {
        return scope.defaultColor;
      }
      color = '#FADB00';
      return color;
    };

    StationKeySignalDirective.prototype.getSeverityLabelColor = function(scope, severity) {
      var color;
      if (severity < 1) {
        return scope.defaultColor;
      }
      color = '#F4D601';
      return color;
    };

    StationKeySignalDirective.prototype.resize = function(scope) {};

    StationKeySignalDirective.prototype.dispose = function(scope) {
      return _.map(scope.equipSubscription, (function(_this) {
        return function(value, key) {
          return value != null ? value.dispose() : void 0;
        };
      })(this));
    };

    return StationKeySignalDirective;

  })(base.BaseDirective);
  return exports = {
    StationKeySignalDirective: StationKeySignalDirective
  };
});
