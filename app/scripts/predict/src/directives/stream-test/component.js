// Generated by IcedCoffeeScript 108.0.13

/*
* File: stream-test-directive
* User: David
* Date: 2020/04/13
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment", "echarts"], function(base, css, view, _, moment, echarts) {
  var StreamTestDirective, exports;
  StreamTestDirective = (function(_super) {
    __extends(StreamTestDirective, _super);

    function StreamTestDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "stream-test";
      StreamTestDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    StreamTestDirective.prototype.setScope = function() {};

    StreamTestDirective.prototype.setCSS = function() {
      return css;
    };

    StreamTestDirective.prototype.setTemplate = function() {
      return view;
    };

    StreamTestDirective.prototype.show = function(scope, element, attrs) {
      var chartelement, createOption, jsonToStringData, rABS;
      rABS = false;
      chartelement = element.find('#stream-chart');
      scope.mychart = echarts.init(chartelement[0]);
      scope.streamDataAnalysis = (function(_this) {
        return function(obj) {
          var f, newArr, reads;
          newArr = '';
          reads = new FileReader();
          f = document.getElementById(obj.id).files[0];
          reads.onload = function(e) {
            var data, testStr, wb;
            data = e.target.result;
            if (rABS) {
              wb = XLSX.read(btoa(fixdata(data)), {
                type: 'base64'
              });
            } else {
              wb = XLSX.read(data, {
                type: 'binary'
              });
            }
            testStr = XLSX.utils.sheet_to_json(wb.Sheets[wb.SheetNames[0]]);
            newArr = jsonToStringData(testStr);
            return createOption(newArr);
          };
          if (rABS) {
            return reads.readAsArrayBuffer(f);
          } else {
            return reads.readAsBinaryString(f);
          }
        };
      })(this);
      jsonToStringData = (function(_this) {
        return function(obj) {
          var arr, data, index, item, k, num, v, _i, _j, _len, _len1;
          arr = [];
          data = {
            xData: [],
            yData: []
          };
          for (index = _i = 0, _len = obj.length; _i < _len; index = ++_i) {
            item = obj[index];
            if (index < 2000) {
              arr.push(item);
              data.xData.push(index + 1);
            }
          }
          console.log(arr);
          for (_j = 0, _len1 = arr.length; _j < _len1; _j++) {
            item = arr[_j];
            for (k in item) {
              v = item[k];
              num = Number(k);
              if (!isNaN(num)) {
                data.yData.push(Number(v));
              }
            }
          }
          return data;
        };
      })(this);
      return createOption = (function(_this) {
        return function(opts) {
          var colors, legends, option, series, _legendData;
          opts.start = 0;
          opts.end = 2;
          colors = [['#1A45A2', '#00E7EE'], ['#90D78A', '#1CAA9E'], ['#F9722C', '#FF085C']];
          series = [];
          legends = ['测试数据'];
          series.push({
            name: legends[0],
            type: 'line',
            symbol: "none",
            smooth: true,
            data: opts.yData,
            lineStyle: {
              width: 2,
              color: {
                type: 'linear',
                x: 0,
                y: 0,
                x2: 0,
                y2: 1,
                colorStops: [
                  {
                    offset: 0,
                    color: colors[0][0]
                  }, {
                    offset: 1,
                    color: colors[0][1]
                  }
                ]
              }
            }
          });
          _legendData = _.map(legends, function(d, i) {
            return {
              name: d,
              icon: "image://" + _this.getComponentPath('image/color' + (i + 1) + '.svg')
            };
          });
          option = {
            title: {
              text: '流数据原始数据',
              textStyle: {
                color: '#fff'
              },
              left: 'center',
              top: 0
            },
            tooltip: {
              show: true,
              trigger: "axis",
              axisPointer: {
                type: 'cross'
              }
            },
            legend: {
              show: true,
              right: '2%',
              orient: "horizontal",
              textStyle: {
                fontSize: 14,
                color: "#FFFFFF"
              },
              data: _legendData
            },
            grid: {
              right: 20
            },
            toolbox: {
              show: true,
              right: 20,
              feature: {
                dataZoom: {
                  show: false
                },
                dataView: {
                  show: false
                },
                magicType: {
                  show: false
                },
                restore: {
                  show: false
                },
                saveAsImage: {
                  show: false
                }
              }
            },
            dataZoom: [
              {
                type: 'inside',
                realtime: true,
                xAxisIndex: 0,
                start: opts.start,
                end: opts.end
              }, {
                type: 'inside',
                realtime: true,
                yAxisIndex: 0
              }, {
                show: true,
                realtime: true,
                xAxisIndex: 0,
                type: 'slider',
                height: 20,
                borderColor: 'rgba(2,62,116,1)',
                dataBackground: {
                  lineStyle: {
                    width: 3,
                    color: {
                      type: 'linear',
                      x: 0,
                      y: 0,
                      x2: 0,
                      y2: 1,
                      colorStops: [
                        {
                          offset: 0,
                          color: '#1A45A2'
                        }, {
                          offset: 1,
                          color: '#00E7EE'
                        }
                      ]
                    }
                  },
                  areaStyle: {
                    color: {
                      type: 'linear',
                      x: 0,
                      y: 0,
                      x2: 0,
                      y2: 1,
                      colorStops: [
                        {
                          offset: 0,
                          color: '#1A45A2'
                        }, {
                          offset: 1,
                          color: '#00E7EE'
                        }
                      ]
                    }
                  }
                },
                handleStyle: {
                  color: 'rgba(0,167,255,1)'
                },
                textStyle: {
                  fontSize: 14,
                  color: "#FFFFFF"
                },
                fillerColor: "rgba(2,62,116,0.8)",
                bottom: 10
              }, {
                show: true,
                realtime: true,
                yAxisIndex: 0,
                type: 'slider',
                left: 20,
                borderColor: 'rgba(2,62,116,1)',
                dataBackground: {
                  lineStyle: {
                    width: 3,
                    color: {
                      type: 'linear',
                      x: 0,
                      y: 0,
                      x2: 0,
                      y2: 1,
                      colorStops: [
                        {
                          offset: 0,
                          color: '#1A45A2'
                        }, {
                          offset: 1,
                          color: '#00E7EE'
                        }
                      ]
                    }
                  },
                  areaStyle: {
                    color: {
                      type: 'linear',
                      x: 0,
                      y: 0,
                      x2: 0,
                      y2: 1,
                      colorStops: [
                        {
                          offset: 0,
                          color: '#1A45A2'
                        }, {
                          offset: 1,
                          color: '#00E7EE'
                        }
                      ]
                    }
                  }
                },
                handleStyle: {
                  color: 'rgba(0,167,255,1)'
                },
                textStyle: {
                  fontSize: 14,
                  color: "#FFFFFF"
                },
                fillerColor: "rgba(2,62,116,0.8)"
              }
            ],
            xAxis: {
              show: false,
              nameTextStyle: {
                color: '#fff'
              },
              data: opts.xData,
              type: 'category',
              boundaryGap: false,
              nameLocation: "middle",
              axisLine: {
                onZero: false,
                lineStyle: {
                  color: "#204BAD"
                }
              },
              axisLabel: {
                show: false,
                textStyle: {
                  color: "#fff"
                }
              }
            },
            yAxis: {
              type: 'value',
              axisLine: {
                lineStyle: {
                  color: "#204BAD"
                }
              },
              axisLabel: {
                textStyle: {
                  color: "rgba(156,165,193,1)"
                }
              },
              splitLine: {
                lineStyle: {
                  color: ["#204BAD"]
                }
              }
            },
            series: series
          };
          return scope.mychart.setOption(option);
        };
      })(this);
    };

    StreamTestDirective.prototype.resize = function(scope) {
      return this.$timeout((function(_this) {
        return function() {
          var _ref;
          return (_ref = scope.mychart) != null ? _ref.resize() : void 0;
        };
      })(this), 0);
    };

    StreamTestDirective.prototype.dispose = function(scope) {};

    return StreamTestDirective;

  })(base.BaseDirective);
  return exports = {
    StreamTestDirective: StreamTestDirective
  };
});
