// Generated by IcedCoffeeScript 108.0.13
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var Graphic3BoxDirective, exports;
  Graphic3BoxDirective = (function(_super) {
    __extends(Graphic3BoxDirective, _super);

    function Graphic3BoxDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "graphic3-box";
      Graphic3BoxDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    Graphic3BoxDirective.prototype.setScope = function() {
      return {
        templateId: "@"
      };
    };

    Graphic3BoxDirective.prototype.setCSS = function() {
      return css;
    };

    Graphic3BoxDirective.prototype.applyChange = function() {
      return (function(_this) {
        return function() {
          return scope.$applyAsync();
        };
      })(this);
    };

    Graphic3BoxDirective.prototype.setTemplate = function() {
      return view;
    };

    Graphic3BoxDirective.prototype.show = function(scope, element, attrs) {
      var ele, html, initializeGraphicOptions, initializeView;
      scope.templateId = {
        user: this.$routeParams.user,
        project: this.$routeParams.project,
        template: scope.parameters.templateId
      };
      initializeView = (function(_this) {
        return function() {
          scope.placeholder = $('#element-placeholder');
          scope.placeholder.draggable();
          scope.placeholderSize = {
            width: scope.placeholder.width(),
            height: scope.placeholder.height(),
            width2: scope.placeholder.width() / 2,
            height2: scope.placeholder.height() / 2
          };
          scope.popover = $('#element-placeholder-popover');
          return scope.viewerPosition = $('#player').offset();
        };
      })(this);
      initializeGraphicOptions = (function(_this) {
        return function() {
          var _ref, _ref1, _ref2, _ref3, _ref4;
          return scope.graphicOptions = {
            engineOptions: {
              parameters: _this.$routeParams
            },
            renderOptions: {
              editable: false,
              type: (_ref = (_ref1 = _this.$routeParams.renderer) != null ? _ref1 : (_ref2 = _this.$rootScope) != null ? _ref2.renderType : void 0) != null ? _ref : 'snapsvg',
              uploadUrl: typeof window !== "undefined" && window !== null ? (_ref3 = window.setting) != null ? (_ref4 = _ref3.urls) != null ? _ref4.uploadUrl : void 0 : void 0 : void 0
            }
          };
        };
      })(this);
      initializeGraphicOptions();
      initializeView();
      scope.movePlaceholderToElement = function(element) {
        var box, x, y;
        if (!element) {
          return;
        }
        box = element._geometry.node.getBoundingClientRect();
        x = box.left + box.width / 2 - scope.placeholderSize.width / 2;
        y = box.top + box.height / 2 - scope.placeholderSize.height / 2;
        scope.placeholder.offset({
          left: x,
          top: y
        });
      };
      scope.applyChange = function() {
        if (!scope.$$phase) {
          return scope.$apply();
        }
      };
      scope.initializePlaceholder = function() {
        var template, updatePlaceholder;
        template = scope.template;
        updatePlaceholder = (function(_this) {
          return function() {
            var height, image, mode, width, x, y;
            image = template.getPropertyValue('placeholder-image');
            x = template.getPropertyValue('placeholder-x', 50);
            y = template.getPropertyValue('placeholder-y', 50);
            width = template.getPropertyValue('placeholder-width', 20);
            height = template.getPropertyValue('placeholder-height', 20);
            scope.placeholderMode = mode = template.getPropertyValue('placeholder-mode', 'dynamic');
            scope.timelineEnable = template.getPropertyValue('timeline-enable', false);
            css = {
              left: x,
              top: y,
              width: width,
              height: height
            };
            css['background-image'] = image ? "url(" + scope.controller.setting.urls.uploadUrl + "/" + image + ")" : "url(/visualization/res/img/popover.gif)";
            scope.placeholder.css(css);
            if (mode === 'none') {
              scope.placeholder.hide();
            } else if (mode === 'dynamic' || mode === 'element') {
              scope.placeholder.draggable('enable');
              scope.placeholder.show();
            } else {
              scope.placeholder.draggable('disable');
              scope.placeholder.show();
            }
            return scope.placeholderSize = {
              x: x,
              y: y,
              width: width,
              height: height,
              width2: width / 2,
              height2: height / 2
            };
          };
        })(this);
        template.subscribePropertiesValue(['placeholder-image', 'placeholder-x', 'placeholder-y', 'placeholder-width', 'placeholder-height', 'placeholder-mode'], function(d) {
          return updatePlaceholder();
        }, 100);
        return updatePlaceholder();
      };
      scope.onElementChanged = function() {
        return function(err, d) {
          if (err) {
            return console.log(err);
          }
        };
      };
      scope.onTemplateLoad = (function(_this) {
        return function() {
          return function(err, template) {
            if (err) {
              console.log(err);
            }
            if (!template) {
              return;
            }
            scope.element = scope.template = template;
            console.log("" + (new Date().toISOString()) + " load template " + template.id);
            scope.templateParameters = null;
            scope.initializePlaceholder();
            return template.subscribe(function(d) {
              var mode;
              element = d.element;
              mode = template.getPropertyValue('placeholder-mode');
              if (mode === 'element' && (element != null ? element.getPropertyValue('tooltip') : void 0)) {
                console.log("订阅得到元素的tooltop");
                scope.movePlaceholderToElement(element);
              }
              scope.element = element != null ? element : template;
              return scope.applyChange();
            }, 'select', 100);
          };
        };
      })(this);
      html = '<div class=\'box-hexagon\'>\n  <!-- <div class=\'big-box-border-top\' style="background-image:url({{getComponentPath(\'images/bigcc.png\')}})"></div> -->\n  <div class=\'box-content\' style="height:{{parameters.height}}">\n    <div id="player" ng-dblclick="controller.showPopover($event)">\n        <div graphic-player="graphic-player" options="graphicOptions" template-id="templateId"\n             controller="controller" on-template-load="onTemplateLoad()"\n             on-element-changed="onElementChanged()" parameters="parameters"\n             class="graphic-viewer"></div>\n        <div id="element-placeholder" ng-show=\'scope.placeholderMode != "none"\'\n           data-activates="placeholder-menu" md-dropdown="md-dropdown" data-hover="false" data-beloworigin="true"\n           title2="信息窗口">\n          <div id="element-placeholder-popover" style="width:100%; height:100%;" ng-click2="togglePopover($event)"\n               element-popover="element-popover" data-style="inverse"\n               data-title="{{element.propertyValues.name || controller.element.id}}"\n               element="element" controller="controller" data-trigger="manual" data-placement="auto"\n               data-closeable="true" data-dismissible="false" data-animation="fade"\n               title2="信息展示：在选中项前双击即可弹出信息窗口"></div>\n      </div>\n    </div>\n  </div>\n  <!-- <div class=\'big-box-border-bottom\' style="background-image:url({{getComponentPath(\'images/bigcc.png\')}})"></div> -->\n</div>';
      ele = this.$compile(html)(scope);
      element.find("#graphic").empty();
      element.find("#graphic").append(ele);
      scope.$watch("parameters.templateId", (function(_this) {
        return function(templateId) {
          if (!templateId) {
            return;
          }
          scope.templateId = {
            user: _this.$routeParams.user,
            project: _this.$routeParams.project,
            template: scope.parameters.templateId
          };
          initializeGraphicOptions();
          return initializeView();
        };
      })(this));
      scope.resize = (function(_this) {
        return function() {
          return _this.$timeout(function() {
            var _ref, _ref1;
            if (scope.controller.player.renderer.transformControl) {
              return (_ref = scope.controller.player.renderer) != null ? (_ref1 = _ref.transformControl) != null ? _ref1.stretch() : void 0 : void 0;
            }
          }, 100);
        };
      })(this);
      return window.addEventListener('resize', scope.resize);
    };

    Graphic3BoxDirective.prototype.resize = function(scope) {};

    Graphic3BoxDirective.prototype.dispose = function(scope) {
      var _ref;
      return (_ref = scope.menuSubscription) != null ? _ref.dispose() : void 0;
    };

    return Graphic3BoxDirective;

  })(base.BaseDirective);
  return exports = {
    Graphic3BoxDirective: Graphic3BoxDirective
  };
});
