// Generated by IcedCoffeeScript 108.0.13

/*
* File: failure-rank-chart-directive
* User: David
* Date: 2019/11/11
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment", "echarts"], function(base, css, view, _, moment, echarts) {
  var FailureRankChartDirective, exports;
  FailureRankChartDirective = (function(_super) {
    __extends(FailureRankChartDirective, _super);

    function FailureRankChartDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "failure-rank-chart";
      FailureRankChartDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    FailureRankChartDirective.prototype.setScope = function() {};

    FailureRankChartDirective.prototype.setCSS = function() {
      return css;
    };

    FailureRankChartDirective.prototype.setTemplate = function() {
      return view;
    };

    FailureRankChartDirective.prototype.show = function(scope, element, attrs) {
      var drawChart, init, processFailureData, statisticalEquipmentFailure;
      drawChart = (function(_this) {
        return function() {
          var decorateData, equipmentAllName, equipmentAllValue, option;
          equipmentAllName = [];
          equipmentAllValue = [];
          decorateData = [];
          _.each(scope.tenFailureDevice, function(item) {
            equipmentAllName.push(item._id.stationName + "." + item._id.equipmentName);
            equipmentAllValue.push(item.failureRate);
            return decorateData.push(100);
          });
          option = {
            animation: false,
            grid: {
              left: "5%",
              right: "4%",
              bottom: "18%",
              top: "10%"
            },
            xAxis: {
              data: equipmentAllName,
              axisLabel: {
                color: "#fff",
                rotate: 15
              },
              axisLine: {
                lineStyle: {
                  color: "#004DA0"
                }
              }
            },
            yAxis: {
              axisLabel: {
                color: "#A2CAF8",
                formatter: "{value}%"
              },
              axisLine: {
                lineStyle: {
                  color: "transparent"
                }
              },
              splitLine: {
                lineStyle: {
                  color: "#004DA0"
                }
              }
            },
            series: [
              {
                type: 'bar',
                barWidth: 34,
                barGap: '-100%',
                data: decorateData,
                color: "rgba(170, 201, 244, 0.3)",
                label: {
                  normal: {
                    show: true,
                    position: "top",
                    distance: 10,
                    color: "#fff",
                    formatter: function(params) {
                      return (equipmentAllValue[params.dataIndex] - 0.5).toFixed(2) + "%";
                    }
                  }
                }
              }, {
                type: 'bar',
                data: equipmentAllValue,
                barWidth: 34,
                itemStyle: {
                  color: {
                    type: 'linear',
                    x: 0,
                    y: 0,
                    x2: 0,
                    y2: 1,
                    colorStops: [
                      {
                        offset: 0,
                        color: "#7EDFD7"
                      }, {
                        offset: 1,
                        color: '#5597FC'
                      }
                    ]
                  }
                }
              }
            ]
          };
          return scope.myChart.setOption(option);
        };
      })(this);
      processFailureData = (function(_this) {
        return function() {
          var addDeviceCount, addNoAlarmDevice, tenFailureDevice, whenStop;
          addNoAlarmDevice = function() {
            return _.each(scope.equipments, function(equipment) {
              if (whenStop !== addDeviceCount) {
                if (equipment.state === 0) {
                  whenStop++;
                  return tenFailureDevice.push({
                    failureRate: 0.5,
                    total_events: 0,
                    _id: {
                      equipment: equipment.model.equipment,
                      equipmentName: equipment.model.name,
                      stationName: equipment.model.stationName,
                      equipmentType: equipment.model.type
                    }
                  });
                }
              }
            });
          };
          tenFailureDevice = _.sortBy(scope.eventAlarmInfo, function(item) {
            return -item.failureRate;
          });
          tenFailureDevice = tenFailureDevice.slice(0, 10);
          addDeviceCount = 0;
          whenStop = 0;
          if (tenFailureDevice.length < 10) {
            if (scope.allDeviceCount >= 10) {
              addDeviceCount = 10 - tenFailureDevice.length;
              addNoAlarmDevice();
            } else if (scope.allDeviceCount < 10) {
              addDeviceCount = scope.allDeviceCount - tenFailureDevice.length;
              addNoAlarmDevice();
            }
          }
          scope.tenFailureDevice = tenFailureDevice;
          return drawChart();
        };
      })(this);
      statisticalEquipmentFailure = (function(_this) {
        return function() {
          var aggregateCons, filter, groupObj, matchObj;
          aggregateCons = [];
          matchObj = {};
          groupObj = {};
          filter = scope.project.getIds();
          matchObj.$match = filter;
          groupObj.$group = {
            _id: {
              equipmentType: "$equipmentType",
              station: "$station",
              equipment: "$equipment",
              stationName: "$stationName",
              equipmentName: "$equipmentName"
            },
            total_events: {
              $sum: 1
            }
          };
          aggregateCons.push(matchObj);
          aggregateCons.push(groupObj);
          return _this.commonService.reportingService.aggregateEventValues({
            filter: _this.project.getIds(),
            pipeline: aggregateCons,
            options: {
              allowDiskUse: true
            }
          }, function(err, records) {
            if (records) {
              scope.eventAlarmInfo = [];
              scope.eventAlarmCount = 0;
              _.each(records, function(record) {
                scope.eventAlarmCount = scope.eventAlarmCount + record.total_events;
                return scope.eventAlarmInfo.push(record);
              });
              _.each(scope.eventAlarmInfo, function(record) {
                return record.failureRate = Number(((record.total_events / scope.eventAlarmCount) * 100 + 0.5).toFixed(2));
              });
            }
            return processFailureData();
          });
        };
      })(this);
      init = (function(_this) {
        return function() {
          var stationsCount;
          scope.tenFailureDevice = [];
          scope.allDeviceCount = 0;
          scope.equipments = [];
          scope.eventAlarmInfo = [];
          scope.myChart = echarts.init($(".failure-rank-chart")[0]);
          scope.eventAlarmCount = 0;
          stationsCount = scope.project.stations.items.length;
          return _.each(scope.project.stations.items, function(station) {
            return station.loadEquipments({}, null, function(err, equips) {
              stationsCount--;
              _.each(equips, function(equip) {
                if (equip.model.equipment.indexOf("_") === -1) {
                  equip.model.stationName = equip.station.model.name;
                  return scope.equipments.push(equip);
                }
              });
              if (stationsCount === 0) {
                scope.allDeviceCount = scope.equipments.length;
                return statisticalEquipmentFailure();
              }
            });
          });
        };
      })(this);
      return init();
    };

    FailureRankChartDirective.prototype.resize = function(scope) {
      return scope.myChart.resize();
    };

    FailureRankChartDirective.prototype.dispose = function(scope) {};

    return FailureRankChartDirective;

  })(base.BaseDirective);
  return exports = {
    FailureRankChartDirective: FailureRankChartDirective
  };
});
