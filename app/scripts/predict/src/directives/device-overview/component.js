// Generated by IcedCoffeeScript 108.0.13

/*
* File: device-overview-directive
* User: David
* Date: 2019/12/23
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var DeviceOverviewDirective, exports;
  DeviceOverviewDirective = (function(_super) {
    __extends(DeviceOverviewDirective, _super);

    function DeviceOverviewDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.addZero = __bind(this.addZero, this);
      this.settypeNum = __bind(this.settypeNum, this);
      this.getequips = __bind(this.getequips, this);
      this.getDeviceType = __bind(this.getDeviceType, this);
      this.show = __bind(this.show, this);
      this.id = "device-overview";
      DeviceOverviewDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    DeviceOverviewDirective.prototype.setScope = function() {};

    DeviceOverviewDirective.prototype.setCSS = function() {
      return css;
    };

    DeviceOverviewDirective.prototype.setTemplate = function() {
      return view;
    };

    DeviceOverviewDirective.prototype.show = function(scope, element, attrs) {
      scope.allDeviceNumber = 0;
      scope.seriesData = [];
      return this.getDeviceType(scope);
    };

    DeviceOverviewDirective.prototype.getDeviceType = function(scope) {
      var cate, dev, typeModel, _i, _j, _len, _len1, _ref, _ref1;
      scope.project.loadStations(null, (function(_this) {
        return function(err, stations) {
          return scope.stations = stations;
        };
      })(this));
      scope.deviceType = scope.project.typeModels.equipmenttypes.items;
      _ref = scope.deviceType;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dev = _ref[_i];
        if (dev.model.type === "forecast") {
          scope.categories = dev.categories;
        }
      }
      _ref1 = scope.categories;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        cate = _ref1[_j];
        typeModel = {
          name: "",
          type: "",
          model: [],
          imgUrl: ""
        };
        typeModel.name = cate.model.name;
        typeModel.type = cate.model.type;
        typeModel.imgUrl = "" + (this.getComponentPath('images/' + cate.model.type + ".svg"));
        scope.seriesData.push(typeModel);
      }
      return this.getequips(scope, scope.stations);
    };

    DeviceOverviewDirective.prototype.getequips = function(scope, stations) {
      var cate, sta, _i, _len, _ref, _results;
      _ref = scope.stations;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        sta = _ref[_i];
        _results.push((function() {
          var _j, _len1, _ref1, _results1;
          _ref1 = scope.categories;
          _results1 = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            cate = _ref1[_j];
            _results1.push(this.commonService.loadEquipmentsByType(sta, cate.model.type, (function(_this) {
              return function(err, equips) {
                return _this.settypeNum(scope, equips);
              };
            })(this)));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    DeviceOverviewDirective.prototype.settypeNum = function(scope, equips) {
      var eq, i, ser, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
      i = 0;
      for (_i = 0, _len = equips.length; _i < _len; _i++) {
        eq = equips[_i];
        _ref = scope.seriesData;
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          ser = _ref[_j];
          if (eq.model.type === ser.type) {
            ser.model.push(eq);
          }
        }
      }
      _ref1 = scope.seriesData;
      for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
        ser = _ref1[_k];
        i += ser.model.length;
      }
      return scope.allDeviceNumber = i;
    };

    DeviceOverviewDirective.prototype.addZero = function(num) {
      if (parseInt(num) < 10 && parseInt(num) > 0) {
        num = '0' + num;
      }
      return num;
    };

    DeviceOverviewDirective.prototype.resize = function(scope) {};

    DeviceOverviewDirective.prototype.dispose = function(scope) {
      return _.map(scope.equipSubscription, (function(_this) {
        return function(value, key) {
          return value != null ? value.dispose() : void 0;
        };
      })(this));
    };

    return DeviceOverviewDirective;

  })(base.BaseDirective);
  return exports = {
    DeviceOverviewDirective: DeviceOverviewDirective
  };
});
