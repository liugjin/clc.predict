// Generated by IcedCoffeeScript 108.0.13

/*
* File: station-map-directive
* User: bingo
* Date: 2019/06/19
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment", 'echarts'], function(base, css, view, _, moment, echarts) {
  var StationMapDirective, exports;
  StationMapDirective = (function(_super) {
    __extends(StationMapDirective, _super);

    function StationMapDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "station-map";
      StationMapDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    StationMapDirective.prototype.setScope = function() {};

    StationMapDirective.prototype.setCSS = function() {
      return css;
    };

    StationMapDirective.prototype.setTemplate = function() {
      return view;
    };

    StationMapDirective.prototype.show = function($scope, element, attrs) {
      var calculateEquipCount, e, equipTypes, geoMap, initMapData, initStationData, mapData, processSignal, _ref;
      initMapData = function(mapData, geoCordMap) {
        var anhui, aomen, beijing, chongqing, fujian, gansu, guangdong, guangxi, guizhou, hainan, hebei, heilongjiang, henan, hubei, hunan, jiangsu, jiangxi, jilin, liaoning, neimenggu, ningxia, qinghai, shangdong, shanghai, shangxi, shanxi, sichuan, taiwan, tianjin, xianggang, xinjiang, xizang, yunnan, zhejiang, zhongguo;
        zhongguo = "/lib/echarts/map/json/china.json";
        anhui = "/lib/echarts/map/json/province/anhui.json";
        aomen = "/lib/echarts/map/json/province/aomen.json";
        beijing = "/lib/echarts/map/json/province/beijing.json";
        chongqing = "/lib/echarts/map/json/province/chongqing.json";
        fujian = "/lib/echarts/map/json/province/fujian.json";
        gansu = "/lib/echarts/map/json/province/gansu.json";
        guangdong = "/lib/echarts/map/json/province/guangdong.json";
        guangxi = "/lib/echarts/map/json/province/guangxi.json";
        guizhou = "/lib/echarts/map/json/province/guizhou.json";
        hainan = "/lib/echarts/map/json/province/hainan.json";
        heilongjiang = "/lib/echarts/map/json/province/heilongjiang.json";
        henan = "/lib/echarts/map/json/province/henan.json";
        hebei = "/lib/echarts/map/json/province/hebei.json";
        hubei = "/lib/echarts/map/json/province/hubei.json";
        hunan = "/lib/echarts/map/json/province/hunan.json";
        jiangsu = "/lib/echarts/map/json/province/jiangsu.json";
        jiangxi = "/lib/echarts/map/json/province/jiangxi.json";
        jilin = "/lib/echarts/map/json/province/jilin.json";
        liaoning = "/lib/echarts/map/json/province/liaoning.json";
        neimenggu = "/lib/echarts/map/json/province/neimenggu.json";
        ningxia = "/lib/echarts/map/json/province/ningxia.json";
        qinghai = "/lib/echarts/map/json/province/qinghai.json";
        shangdong = "/lib/echarts/map/json/province/shandong.json";
        shanghai = "/lib/echarts/map/json/province/shanghai.json";
        shangxi = "/lib/echarts/map/json/province/shanxi.json";
        shanxi = "/lib/echarts/map/json/province/shanxi1.json";
        sichuan = "/lib/echarts/map/json/province/sichuan.json";
        taiwan = "/lib/echarts/map/json/province/taiwan.json";
        tianjin = "/lib/echarts/map/json/province/tianjin.json";
        xianggang = "/lib/echarts/map/json/province/xianggang.json";
        xinjiang = "/lib/echarts/map/json/province/xinjiang.json";
        xizang = "/lib/echarts/map/json/province/xizang.json";
        yunnan = "/lib/echarts/map/json/province/yunnan.json";
        zhejiang = "/lib/echarts/map/json/province/zhejiang.json";
        echarts.extendsMap = (function(_this) {
          return function(id, opt) {
            var cityMap, curGeoJson, defaultOpt, handleEvents, idx, line, name, option, pos, style;
            curGeoJson = {};
            cityMap = {
              '中国': zhongguo,
              '上海': shanghai,
              '河北': hebei,
              '山西': shangxi,
              '内蒙古': neimenggu,
              '辽宁': liaoning,
              '吉林': jilin,
              '黑龙江': heilongjiang,
              '江苏': jiangsu,
              '浙江': zhejiang,
              '安徽': anhui,
              '福建': fujian,
              '江西': jiangxi,
              '山东': shangdong,
              '河南': henan,
              '湖北': hubei,
              '湖南': hunan,
              '广东': guangdong,
              '广西': guangxi,
              '海南': hainan,
              '四川': sichuan,
              '贵州': guizhou,
              '云南': yunnan,
              '西藏': xizang,
              '陕西': shanxi,
              '甘肃': gansu,
              '青海': qinghai,
              '宁夏': ningxia,
              '新疆': xinjiang,
              '北京': beijing,
              '天津': tianjin,
              '重庆': chongqing,
              '香港': xianggang,
              '澳门': aomen,
              '台湾': taiwan
            };
            defaultOpt = {
              mapName: 'china',
              goDown: false,
              bgColor: 'transparent',
              activeArea: [],
              data: [],
              callback: function(name, option, instance) {}
            };
            if (opt) {
              opt = echarts.util.extend(defaultOpt, opt);
            }
            name = [opt.mapName];
            idx = 0;
            pos = {
              leftPlus: 115,
              leftCur: 150,
              left: '8%',
              top: 50
            };
            style = {
              font: '18px "Microsoft YaHei", sans-serif',
              textColor: '#eee',
              lineColor: 'rgba(147, 235, 248, .8)'
            };
            line = [[0, 0], [8, 11], [0, 22]];
            handleEvents = {
              resetOption: function(chart, option, mapName) {
                var breadcrumb, cityData, i, j, l, _i, _ref;
                breadcrumb = handleEvents.createBreadcrumb(mapName);
                j = name.indexOf(mapName);
                l = option.graphic.length;
                if (j < 0) {
                  option.graphic.push(breadcrumb);
                  option.graphic[0].children[0].shape.x2 = 145;
                  option.graphic[0].children[1].shape.x2 = 145;
                  if (option.graphic.length > 2) {
                    cityData = [];
                    for (i = _i = 0, _ref = opt.data.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
                      if (mapName === opt.data[i].name) {
                        $([opt.data[i]]).each(function(index, data) {
                          var cityJson;
                          cityJson = {
                            name: data.name,
                            stationName: data.stationName,
                            station: data.station,
                            value: data.value,
                            selected: true
                          };
                          return cityData.push(cityJson);
                        });
                      }
                    }
                    if (cityData) {
                      option.series[0].data = handleEvents.initSeriesData(cityData);
                    } else {
                      option.series[0].data = [];
                    }
                  }
                  name.push(mapName);
                  idx++;
                } else {
                  option.graphic.splice(j + 2, l);
                  if (option.graphic.length <= 2) {
                    option.graphic[0].children[0].shape.x2 = 60;
                    option.graphic[0].children[1].shape.x2 = 60;
                    option.series[0].data = handleEvents.initSeriesData(opt.data);
                  }
                  name.splice(j + 1, l);
                  idx = j;
                  pos.leftCur -= pos.leftPlus * (l - j - 1);
                }
                option.geo.map = mapName;
                option.geo.zoom = 0.4;
                chart.clear();
                chart.setOption(option);
                handleEvents.zoomAnimation();
                return opt.callback(mapName, option, chart);
              },
              createBreadcrumb: function(name) {
                var breadcrumb, cityToPinyin;
                cityToPinyin = {
                  '中国': 'zhongguo',
                  '上海': 'shanghai',
                  '河北': 'hebei',
                  '山西': 'shangxi',
                  '内蒙古': 'neimenggu',
                  '辽宁': 'liaoning',
                  '吉林': 'jilin',
                  '黑龙江': 'heilongjiang',
                  '江苏': 'jiangsu',
                  '浙江': 'zhejiang',
                  '安徽': 'anhui',
                  '福建': 'fujian',
                  '江西': 'jiangxi',
                  '山东': 'shangdong',
                  '河南': 'henan',
                  '湖北': 'hubei',
                  '湖南': 'hunan',
                  '广东': 'guangdong',
                  '广西': 'guangxi',
                  '海南': 'hainan',
                  '四川': 'sichuan',
                  '贵州': 'guizhou',
                  '云南': 'yunnan',
                  '西藏': 'xizang',
                  '陕西': 'shanxi',
                  '甘肃': 'gansu',
                  '青海': 'qinghai',
                  '宁夏': 'ningxia',
                  '新疆': 'xinjiang',
                  '北京': 'beijing',
                  '天津': 'tianjin',
                  '重庆': 'chongqing',
                  '香港': 'xianggang',
                  '澳门': 'aomen'
                };
                breadcrumb = {
                  type: 'group',
                  id: name,
                  left: pos.leftCur + pos.leftPlus,
                  top: pos.top + 3,
                  children: [
                    {
                      type: 'polyline',
                      left: -90,
                      top: -5,
                      shape: {
                        points: line
                      },
                      style: {
                        stroke: '#fff',
                        key: name
                      },
                      onclick: function() {
                        name = _this.style.key;
                        return handleEvents.resetOption($scope.myChart, option, name);
                      }
                    }, {
                      type: 'text',
                      left: -68,
                      top: 'middle',
                      style: {
                        text: name,
                        textAlign: 'center',
                        fill: style.textColor,
                        font: style.font
                      },
                      onclick: function() {
                        name = _this.style.text;
                        return handleEvents.resetOption($scope.myChart, option, name);
                      }
                    }, {
                      type: 'text',
                      left: -68,
                      top: 10,
                      style: {
                        name: name,
                        text: cityToPinyin[name] ? cityToPinyin[name].toUpperCase() : '',
                        textAlign: 'center',
                        fill: style.textColor,
                        font: '12px "Microsoft YaHei", sans-serif'
                      },
                      onclick: function() {
                        name = _this.style.name;
                        return handleEvents.resetOption($scope.myChart, option, name);
                      }
                    }
                  ]
                };
                pos.leftCur += pos.leftPlus;
                return breadcrumb;
              },
              initSeriesData: function(data) {
                var geoCord, i, temp, _i, _ref;
                temp = [];
                for (i = _i = 0, _ref = data.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
                  geoCord = geoCordMap[data[i].station];
                  if (geoCord) {
                    temp.push({
                      city: data[i].name,
                      name: data[i].stationName,
                      station: data[i].station,
                      value: geoCord.concat(data[i].value)
                    });
                  }
                }
                return temp;
              },
              zoomAnimation: function() {
                var count, zoom;
                count = null;
                zoom = function(per) {
                  if (!count) {
                    count = per;
                  }
                  count = count + per;
                  $scope.myChart.setOption({
                    geo: {
                      zoom: count
                    }
                  });
                  if (count < 1) {
                    return window.requestAnimationFrame(function() {
                      return zoom(0.2);
                    });
                  }
                };
                return window.requestAnimationFrame(function() {
                  return zoom(0.2);
                });
              }
            };
            option = {
              backgroundColor: opt.bgColor,
              graphic: [
                {
                  type: 'group',
                  left: pos.left,
                  top: pos.top - 4,
                  children: [
                    {
                      type: 'line',
                      left: 0,
                      top: -20,
                      shape: {
                        x1: 0,
                        y1: 0,
                        x2: 60,
                        y2: 0
                      },
                      style: {
                        stroke: style.lineColor
                      }
                    }, {
                      type: 'line',
                      left: 0,
                      top: 20,
                      shape: {
                        x1: 0,
                        y1: 0,
                        x2: 60,
                        y2: 0
                      },
                      style: {
                        stroke: style.lineColor
                      }
                    }
                  ]
                }, {
                  id: name[idx],
                  type: 'group',
                  left: pos.left,
                  top: pos.top,
                  children: [
                    {
                      type: 'polyline',
                      left: 90,
                      top: -12,
                      shape: {
                        points: line
                      },
                      style: {
                        stroke: 'transparent',
                        key: name[0]
                      },
                      onclick: function() {
                        name = _this.style.key;
                        return handleEvents.resetOption($scope.myChart, option, name);
                      }
                    }, {
                      type: 'text',
                      left: 0,
                      top: 'middle',
                      style: {
                        text: '中国',
                        textAlign: 'center',
                        fill: style.textColor,
                        font: style.font
                      },
                      onclick: function() {
                        return handleEvents.resetOption($scope.myChart, option, '中国');
                      }
                    }, {
                      type: 'text',
                      left: 0,
                      top: 10,
                      style: {
                        text: 'China',
                        textAlign: 'center',
                        fill: style.textColor,
                        font: '12px "Microsoft YaHei", sans-serif'
                      },
                      onclick: function() {
                        return handleEvents.resetOption($scope.myChart, option, '中国');
                      }
                    }
                  ]
                }
              ],
              tooltip: {
                formatter: function(params) {
                  name = params.name.split("-")[0];
                  if (params.value[2] !== null && params.value[2] !== void 0 && params.value[2] !== 'NaN') {
                    return name + "：" + params.value[2];
                  } else {
                    return name;
                  }
                }
              },
              geo: {
                map: opt.mapName,
                roam: true,
                zoom: 1,
                left: "10%",
                label: {
                  normal: {
                    show: false,
                    textStyle: {
                      color: '#fff'
                    }
                  },
                  emphasis: {
                    show: false,
                    textStyle: {
                      color: '#fff'
                    }
                  }
                },
                itemStyle: {
                  normal: {
                    borderColor: 'rgba(0, 192, 255, 0.2)',
                    borderWidth: 3,
                    areaColor: 'rgba(13, 190, 255, 0.35)'
                  },
                  emphasis: {
                    borderColor: 'rgba(0, 192, 255, 1)',
                    borderWidth: 3,
                    areaColor: {
                      type: 'radial',
                      x: 0.5,
                      y: 0.5,
                      r: 0.8,
                      colorStops: [
                        {
                          offset: 0,
                          color: 'rgba(13, 190, 255, 0.5)'
                        }, {
                          offset: 1,
                          color: 'rgba(13, 190, 255, 0.9)'
                        }
                      ],
                      globalCoord: false
                    }
                  }
                },
                regions: mapData
              },
              series: [
                {
                  type: 'effectScatter',
                  coordinateSystem: 'geo',
                  zlevel: 2,
                  rippleEffect: {
                    period: '4',
                    scale: '4',
                    brushType: 'stroke'
                  },
                  label: {
                    normal: {
                      show: false,
                      position: 'right',
                      formatter: function(params) {
                        var str;
                        str = params.data.name;
                        return str;
                      },
                      textStyle: {
                        color: '#fff',
                        fontStyle: 'normal',
                        fontFamily: 'arial',
                        fontSize: 12
                      }
                    }
                  },
                  tooltip: {
                    show: true,
                    formatter: function(params) {
                      var item;
                      item = params.name.split("-")[0];
                      if (params.value[2] !== null && params.value[2] !== void 0 && params.value[2] !== 'NaN') {
                        return "" + params.data.name + "<br/>告警数量：" + params.value[2];
                      } else {
                        return item;
                      }
                    }
                  },
                  symbolSize: 8,
                  itemStyle: {
                    normal: {
                      color: function(params) {
                        if (params.value[2] > 0) {
                          return 'rgba(244, 67, 54, 1)';
                        } else {
                          return 'rgba(1, 225, 233, 1)';
                        }
                      }
                    }
                  },
                  data: handleEvents.initSeriesData(_.filter(opt.data, function(item) {
                    return item.value === 0;
                  }))
                }, {
                  type: 'effectScatter',
                  coordinateSystem: 'geo',
                  zlevel: 2,
                  rippleEffect: {
                    period: '4',
                    scale: '4',
                    brushType: 'stroke'
                  },
                  label: {
                    normal: {
                      show: true,
                      position: 'right',
                      formatter: function(params) {
                        var str;
                        str = params.data.name;
                        return str;
                      },
                      textStyle: {
                        color: '#fff',
                        fontStyle: 'normal',
                        fontFamily: 'arial',
                        fontSize: 12
                      }
                    }
                  },
                  tooltip: {
                    show: true,
                    formatter: function(params) {
                      var item;
                      item = params.name.split("-")[0];
                      if (params.value[2] !== null && params.value[2] !== void 0 && params.value[2] !== 'NaN') {
                        return "告警数量：" + params.value[2];
                      } else {
                        return item;
                      }
                    }
                  },
                  symbolSize: 8,
                  itemStyle: {
                    normal: {
                      color: {
                        type: 'radial',
                        x: 0.5,
                        y: 0.5,
                        r: 0.5,
                        colorStops: [
                          {
                            offset: 0,
                            color: 'rgba(244, 67, 54, 1)'
                          }, {
                            offset: 1,
                            color: 'rgba(220, 121, 120, 1)'
                          }
                        ],
                        globalCoord: false
                      }
                    }
                  },
                  data: handleEvents.initSeriesData(_.filter(opt.data, function(item) {
                    return item.value > 0;
                  }))
                }, {
                  type: 'scatter',
                  coordinateSystem: 'geo',
                  symbol: 'pin',
                  zlevel: 6,
                  label: {
                    normal: {
                      show: true,
                      formatter: function(params) {
                        var str;
                        str = params.data.name;
                        return params.data.value[2];
                      },
                      textStyle: {
                        color: '#fff',
                        fontStyle: 'normal',
                        fontFamily: 'arial',
                        fontSize: 9
                      }
                    }
                  },
                  itemStyle: {
                    normal: {
                      color: '#F62157'
                    }
                  },
                  tooltip: {
                    show: false
                  },
                  symbolSize: 40,
                  data: handleEvents.initSeriesData(_.filter(opt.data, function(item) {
                    var _ref;
                    return item.station === ((_ref = $scope.current) != null ? _ref.station : void 0);
                  }))
                }
              ]
            };
            $scope.myChart.setOption(option);
            return $scope.myChart.on('click', function(params) {
              var url;
              if (params.componentType === "series") {
                $scope.jumpPage(params.data);
              }
              if (opt.goDown && params.name !== name[idx]) {
                if (cityMap[params.name]) {
                  url = cityMap[params.name];
                  return $.get(url, function(response) {
                    curGeoJson = response;
                    echarts.registerMap(params.name, response);
                    return handleEvents.resetOption($scope.myChart, option, params.name);
                  });
                }
              }
            });
          };
        })(this);
        return $.getJSON(zhongguo, (function(_this) {
          return function(geoJson) {
            var myChart;
            echarts.registerMap('china', geoJson);
            return myChart = echarts.extendsMap('map', {
              bgColor: 'transparent',
              mapName: 'china',
              text: '',
              goDown: false,
              callback: function(name, option, instance) {},
              data: mapData
            });
          };
        })(this));
      };
      calculateEquipCount = (function(_this) {
        return function() {
          $scope.statisticEquips = {
            equips: 0,
            online: 0,
            alarm: 0,
            standby: 0,
            offline: 0
          };
          return _.mapObject($scope.stationData, function(item, key) {
            $scope.statisticEquips.equips += item.equips;
            $scope.statisticEquips.online += item.online;
            $scope.statisticEquips.alarm += item.alarm;
            $scope.statisticEquips.standby += item.standby;
            return $scope.statisticEquips.offline += item.offline;
          });
        };
      })(this);
      processSignal = (function(_this) {
        return function(signal) {
          if (signal.model.signal === "alarms") {
            _.map($scope.stationData, function(item) {
              if (item.station === signal.station.model.station) {
                return item.alarms = signal.data.value;
              }
            });
            _.map(mapData, function(item) {
              if (item.station === signal.station.model.station) {
                return item.value = signal.data.value;
              }
            });
            initMapData(mapData, geoMap);
          }
          if (signal.model.signal === "onlines") {
            _.map($scope.stationData, function(item) {
              if (item.station === signal.station.model.station) {
                return item.online = signal.data.value;
              }
            });
            calculateEquipCount();
          }
          if (signal.model.signal === "alarm-equipments") {
            _.map($scope.stationData, function(item) {
              if (item.station === signal.station.model.station) {
                return item.alarm = signal.data.value;
              }
            });
            calculateEquipCount();
          }
          if (signal.model.signal === "standby-equipments") {
            _.map($scope.stationData, function(item) {
              if (item.station === signal.station.model.station) {
                return item.standby = signal.data.value;
              }
            });
            calculateEquipCount();
          }
          if (signal.model.signal === "stops") {
            _.map($scope.stationData, function(item) {
              if (item.station === signal.station.model.station) {
                return item.offline = signal.data.value;
              }
            });
            return calculateEquipCount();
          }
        };
      })(this);
      initStationData = (function(_this) {
        return function() {
          var stations;
          _.each($scope.project.dictionary.equipmenttypes.items, function(type) {
            if (type.model.visible != null) {
              if (type.model.type.charAt(0) !== "_" && type.model.visible) {
                return equipTypes.push(type.model.type);
              }
            } else {
              if (type.model.type.charAt(0) !== "_") {
                return equipTypes.push(type.model.type);
              }
            }
          });
          stations = _.filter($scope.project.stations.items, function(item) {
            return item.model.station.charAt(0) !== "_";
          });
          return _.each(stations, function(station) {
            var filter, temp;
            $scope.stationData.push({
              name: station.model.name,
              station: station.model.station,
              alarms: 0,
              equips: 0,
              online: 0,
              alarm: 0,
              standby: 0,
              offline: 0
            });
            mapData.push({
              name: station.model.city || '广东',
              station: station.model.station,
              stationName: station.model.name,
              value: 0,
              selected: true
            });
            temp = [];
            temp[0] = station.model.longitude || 114.26664636;
            temp[1] = station.model.latitude || 22.5639158872;
            geoMap[station.model.station] = temp;
            filter = {
              user: station.model.user,
              project: station.model.project,
              station: station.model.station,
              type: {
                $in: equipTypes
              },
              template: {
                $nin: ['card-sender', 'card_template', 'people_template']
              }
            };
            station.loadEquipments(filter, null, function(err, equips) {
              if (err || equips.length < 1) {
                return;
              }
              _.map($scope.stationData, (function(_this) {
                return function(item) {
                  if (item.station === equips[0].model.station) {
                    return item.equips = equips.length;
                  }
                };
              })(this));
              return calculateEquipCount();
            });
            return station.loadEquipment('_station_management', null, function(err, equip) {
              var _ref;
              if (!equip || !equip.model.equipment) {
                return;
              }
              if ((_ref = $scope.subscribeStation[station.key]) != null) {
                _ref.dispose();
              }
              return $scope.subscribeStation[station.key] = _this.commonService.subscribeEquipmentSignalValues(equip, function(signal) {
                console.log(signal);
                if (!signal || !signal.data.value) {
                  return;
                }
                processSignal(signal);
                return;
                if (signal.model.signal === "alarms") {
                  _.map($scope.stationData, function(item) {
                    if (item.station === signal.station.model.station) {
                      return item.alarms = signal.data.value;
                    }
                  });
                  _.map(mapData, function(item) {
                    if (item.station === signal.station.model.station) {
                      return item.value = signal.data.value;
                    }
                  });
                  initMapData(mapData, geoMap);
                }
                if (signal.model.signal === "onlines") {
                  return _.mapObject($scope.stationData, function(item, key) {
                    if (item.station === signal.station.model.station) {
                      return item.online = signal.data.value;
                    }
                  });
                }
              });
            });
          });
        };
      })(this);
      $scope.subscribeStation = {};
      $scope.stationData = [];
      $scope.statisticEquips = {
        equips: 0,
        online: 0,
        alarm: 0,
        standby: 0,
        offline: 0
      };
      $scope.current = null;
      equipTypes = [];
      mapData = [];
      geoMap = {};
      e = element.find('.station-map');
      if ((_ref = $scope.myChart) != null) {
        _ref.dispose();
      }
      $scope.myChart = null;
      $scope.myChart = echarts.init(e[0]);
      initStationData();
      initMapData(mapData, geoMap);
      $scope.selectStation = (function(_this) {
        return function(station) {
          $scope.current = station;
          return initMapData(mapData, geoMap);
        };
      })(this);
      $scope.jumpPage = (function(_this) {
        return function(station) {
          return window.location.hash = "#/dashboard/" + $scope.project.model.user + "/" + $scope.project.model.project + "?station=" + station.station;
        };
      })(this);
      return $scope.filterStation = (function(_this) {
        return function() {
          return function(station) {
            var text, _ref1, _ref2, _ref3;
            text = (_ref1 = $scope.searchLists) != null ? _ref1.toLowerCase() : void 0;
            if (!text) {
              return true;
            }
            if (((_ref2 = station.station) != null ? _ref2.toLowerCase().indexOf(text) : void 0) >= 0) {
              return true;
            }
            if (((_ref3 = station.name) != null ? _ref3.toLowerCase().indexOf(text) : void 0) >= 0) {
              return true;
            }
            return false;
          };
        };
      })(this);
    };

    StationMapDirective.prototype.resize = function($scope) {
      var _ref;
      return (_ref = $scope.myChart) != null ? _ref.resize() : void 0;
    };

    StationMapDirective.prototype.dispose = function($scope) {
      var _ref;
      if ((_ref = $scope.myChart) != null) {
        _ref.dispose();
      }
      $scope.myChart = null;
      return _.mapObject($scope.subscribeStation, (function(_this) {
        return function(value, key) {
          return value.dispose();
        };
      })(this));
    };

    return StationMapDirective;

  })(base.BaseDirective);
  return exports = {
    StationMapDirective: StationMapDirective
  };
});
