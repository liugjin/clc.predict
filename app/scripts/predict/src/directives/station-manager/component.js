// Generated by IcedCoffeeScript 108.0.13

/*
* File: station-manager-directive
* User: David
* Date: 2018/11/26
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var StationManagerDirective, exports;
  StationManagerDirective = (function(_super) {
    __extends(StationManagerDirective, _super);

    function StationManagerDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      StationManagerDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
      this.id = "station-manager";
    }

    StationManagerDirective.prototype.setScope = function() {};

    StationManagerDirective.prototype.setCSS = function() {
      return css;
    };

    StationManagerDirective.prototype.setTemplate = function() {
      return view;
    };

    StationManagerDirective.prototype.show = function(scope, element, attrs) {
      var loadStations;
      loadStations = (function(_this) {
        return function() {
          var _ref;
          if ((_ref = scope.project) != null) {
            _ref.loadStations(null, function(err, stations) {
              return scope.allStations = _.filter(stations, function(data) {
                return data.model.station !== "_elesys_manager_station";
              });
            }, true);
          }
          return scope.$applyAsync();
        };
      })(this);
      loadStations();
      scope.prompt = function(title, message, callback) {
        scope.modal = {
          title: title,
          message: message,
          confirm: function(ok) {
            return typeof callback === "function" ? callback(ok, this.comment, this.password) : void 0;
          },
          preConfirm: function() {
            return typeof callback === "function" ? callback("preCommand", this.comment, this.password) : void 0;
          }
        };
        $('#station-manager-prompt-modal').modal('open');
      };
      scope.saveStation = (function(_this) {
        return function(callback) {
          if (!scope.station.model.name || !scope.station.model.station) {
            _this.display('请填写相关数据！');
            return false;
          }
          if (scope.station.model.name.indexOf(" ") >= 0 || scope.station.model.station.indexOf(" ") >= 0) {
            _this.display('请勿输入空格！');
            return false;
          }
          scope.station.save(callback);
          $('#station-edit-modal').modal('close');
          $('#station-new-modal').modal('close');
          return loadStations();
        };
      })(this);
      scope.selectStation = function(station) {
        return scope.station = station;
      };
      scope.removeStation = (function(_this) {
        return function(station) {
          var msg, title;
          title = station.model.name;
          msg = "";
          $('#station-manager-prompt-modal').modal('open');
          return scope.prompt(title, msg, function(ok) {
            if (!ok) {
              return;
            }
            if (ok) {
              if (station != null) {
                station.remove();
              }
              $('#station-manager-prompt-modal').modal('close');
              return loadStations();
            }
          });
        };
      })(this);
      scope.createStation = function(parentStation) {
        $("#station-new-modal").modal('open');
        scope.station = scope.project.createStation(parentStation);
        return console.info(scope.controller);
      };
      scope.filterStation = (function(_this) {
        return function() {
          return function(station) {
            if (station.model.station.charAt(0) !== "_" && station.model.station !== scope.station.model.station) {
              return true;
            }
            return false;
          };
        };
      })(this);
      return scope.getStationParentName = (function(_this) {
        return function(stationId) {
          var stationName;
          stationName = _.find(_this.project.stations.items, function(station) {
            return station.model.station === stationId;
          });
          if (stationName) {
            return stationName.model.name;
          }
        };
      })(this);
    };

    StationManagerDirective.prototype.resize = function(scope) {};

    StationManagerDirective.prototype.dispose = function(scope) {};

    return StationManagerDirective;

  })(base.BaseDirective);
  return exports = {
    StationManagerDirective: StationManagerDirective
  };
});
