// Generated by IcedCoffeeScript 108.0.13

/*
* File: menu-directive
* User: David
* Date: 2018/10/25
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['jquery', '../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment", "json!../../../setting.json", 'jquery.ui'], function($, base, css, view, _, moment, setting) {
  var MenuDirective, exports;
  MenuDirective = (function(_super) {
    __extends(MenuDirective, _super);

    function MenuDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.id = "menu";
      MenuDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
      this.projectService = commonService.modelEngine.modelManager.getService("project");
    }

    MenuDirective.prototype.setScope = function() {};

    MenuDirective.prototype.setCSS = function() {
      return css;
    };

    MenuDirective.prototype.setTemplate = function() {
      return view;
    };

    MenuDirective.prototype.link = function($scope, element, attrs) {
      var _ref;
      $scope.controller.flag = true;
      $('menu').hide();
      if ((_ref = this.menuSub) != null) {
        _ref.dispose();
      }
      this.menuSub = this.subscribeEventBus('menuState', (function(_this) {
        return function(d) {
          if (d.message.menu === "menu") {
            $('menu').toggle();
            $('menu').toggleClass('menu-hide');
            $('menu').toggleClass('menu-show');
            $scope.controller.flag = !$scope.controller.flag;
            $scope.isadmin = false;
            _this.publishEventBus("menu-collapsed", {
              value: $scope.controller.flag
            });
            window.dispatchEvent(new Event('resize'));
            if ($(".menu").hasClass("menu-lock")) {
              $scope.menuExpanded = _this.getComponentPath("/images/menu-expanded.svg");
              $(".menu").removeClass("menu-lock");
              $(".menu").addClass("menu-close");
              $(".menu").addClass("menu-collapsed");
              return $scope.noExpanded = 2;
            } else {
              $scope.menuExpanded = _this.getComponentPath("/images/menu-collapsed.svg");
              $(".menu").removeClass("menu-close");
              $(".menu").removeClass("menu-collapsed");
              $(".menu").addClass("menu-expanded");
              $(".menu").addClass("menu-lock");
              return $scope.noExpanded = 1;
            }
          }
        };
      })(this));
      setTimeout((function(_this) {
        return function() {
          return _this.getProject($scope, function() {
            var _ref1;
            $scope.menus = (_ref1 = $scope.project.model.setting.menus) != null ? _ref1 : setting.menus;
            return $scope.$applyAsync();
          });
        };
      })(this), 50);
      $scope.menus = setting.menus;
      $scope.menuExpanded = this.getComponentPath("/images/menu-collapsed.svg");
      $scope.noExpanded = 1;
      $scope.enterMenu = function() {
        if (!$('.menu').hasClass("menu-lock")) {
          return $('.menu').addClass("menu-expanded").removeClass("menu-collapsed");
        }
      };
      $scope.leaveMenu = function() {
        if (!$('.menu').hasClass("menu-lock")) {
          return $('.menu').addClass("menu-collapsed").removeClass("menu-expanded");
        }
      };
      $scope.selectSubmenu = (function(_this) {
        return function(menu) {
          $scope.noExpanded = 1;
          return _this.commonService.$rootScope.submenu = menu;
        };
      })(this);
      return $scope.$watch('controller.$location.$$path', (function(_this) {
        return function(url) {
          var i, id, ids, searchUrl, urls, _i, _ref1;
          urls = url.split("/");
          if (urls.length > 3) {
            $scope.myproject = {
              user: urls[2],
              project: urls[3]
            };
          }
          searchUrl = function(menus, type) {
            var dex, ind, index, menu, ret, _i, _len, _ref1;
            ret = "";
            dex = -1;
            for (index = _i = 0, _len = menus.length; _i < _len; index = ++_i) {
              menu = menus[index];
              if (type === 1) {
                dex = index;
              }
              if (type === 2 && menu.submenus) {
                dex++;
              }
              if ($scope.controller.$location.$$absUrl.indexOf(menu.url + "/") > 0 || (menu.suburl && (_.find(menu.suburl, function(value) {
                return $scope.controller.$location.$$absUrl.indexOf(value) > 0;
              })) !== void 0)) {
                ret = dex;
                break;
              } else if (((_ref1 = menu.submenus) != null ? _ref1.length : void 0) > 0) {
                ind = searchUrl(menu.submenus, type);
                if (ind !== "") {
                  ret = dex + "-" + ind;
                }
              }
            }
            return ret + "";
          };
          id = searchUrl($scope.menus, 1);
          if (id !== '') {
            ids = id.split('-');
            ids.pop();
            if (ids.length > 1) {
              for (i = _i = 1, _ref1 = ids.length - 1; 1 <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = 1 <= _ref1 ? ++_i : --_i) {
                ids[i] = ids[i - 1] + "-" + ids[i];
              }
            }
            return _this.$timeout(function() {
              var aid, cid, ind, sid, _j, _len;
              $('.item').removeClass('active');
              for (ind = _j = 0, _len = ids.length; _j < _len; ind = ++_j) {
                sid = ids[ind];
                if (!$("#collapsible-" + sid).hasClass("active")) {
                  aid = sid.split('-');
                  aid.pop();
                  cid = "#collaps";
                  if (sid.indexOf('-') >= 0) {
                    cid = "#collaps" + aid.join('-');
                  }
                  $(cid).collapsible('open', parseInt(id.split('-')[ind]));
                }
              }
              return $("#collapsible-" + id).addClass('active');
            }, $scope.controller.project ? 10 : 800);
          }
        };
      })(this));
    };

    MenuDirective.prototype.dispose = function(scope) {
      var _ref;
      return (_ref = this.menuSub) != null ? _ref.dispose() : void 0;
    };

    return MenuDirective;

  })(base.BaseDirective);
  return exports = {
    MenuDirective: MenuDirective
  };
});
