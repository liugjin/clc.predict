// Generated by IcedCoffeeScript 108.0.13

/*
* File: device-state-directive
* User: David
* Date: 2019/12/23
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var DeviceStateDirective, exports;
  DeviceStateDirective = (function(_super) {
    __extends(DeviceStateDirective, _super);

    function DeviceStateDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.getDeviceSpecialSignal = __bind(this.getDeviceSpecialSignal, this);
      this.show = __bind(this.show, this);
      this.id = "device-state";
      DeviceStateDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    DeviceStateDirective.prototype.setScope = function() {};

    DeviceStateDirective.prototype.setCSS = function() {
      return css;
    };

    DeviceStateDirective.prototype.setTemplate = function() {
      return view;
    };

    DeviceStateDirective.prototype.show = function(scope, element, attrs) {
      scope.equipSubscription = {};
      scope.signalDataArr = [];
      scope.showDevice = false;
      scope.focus = null;
      scope.equipment.loadSignals(null, (function(_this) {
        return function(err, signals) {
          var sig, signalValue, _i, _len, _ref, _results;
          if (signals) {
            _results = [];
            for (_i = 0, _len = signals.length; _i < _len; _i++) {
              sig = signals[_i];
              if (sig.model.type === scope.equipment.model.type) {
                if (sig.model.template === "base-" + scope.equipment.model.type && ((_ref = sig.model.signal) !== "device-flag" && _ref !== "device-health")) {
                  signalValue = {
                    stateName: "",
                    stateValue: '优秀',
                    setValue: 0,
                    imgUrl: "",
                    signalID: ''
                  };
                  signalValue.stateName = sig.model.name;
                  if (sig.model.type === 'motor') {
                    signalValue.imgUrl = "" + (_this.getComponentPath('images/' + sig.model.signal + "-1.svg"));
                  } else {
                    signalValue.imgUrl = "" + (_this.getComponentPath('images/' + sig.model.type + ".svg"));
                  }
                  signalValue.signalID = sig.model.signal;
                  scope.signalDataArr.push(signalValue);
                  _results.push(_this.getDeviceSpecialSignal(scope, scope.equipment, sig.model.signal));
                } else {
                  _results.push(void 0);
                }
              } else {
                _results.push(void 0);
              }
            }
            return _results;
          }
        };
      })(this));
      return scope.singleSeenter = (function(_this) {
        return function(i, data) {
          return _this.commonService.publishEventBus("select", {
            data: data
          });
        };
      })(this);
    };

    DeviceStateDirective.prototype.getDeviceSpecialSignal = function(scope, equipment, signalID) {
      var filter, str, _ref;
      filter = {
        user: scope.project.model.user,
        project: scope.project.model.project,
        station: equipment.model.station,
        equipment: equipment.model.equipment,
        signal: signalID
      };
      str = equipment.key + "-" + signalID;
      if ((_ref = scope.equipSubscription[str]) != null) {
        _ref.dispose();
      }
      return scope.equipSubscription[str] = this.commonService.signalLiveSession.subscribeValues(filter, (function(_this) {
        return function(err, signal) {
          var data, _i, _len, _ref1, _results;
          if (signal && signal.message) {
            _ref1 = scope.signalDataArr;
            _results = [];
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              data = _ref1[_i];
              if (signalID === data.signalID) {
                data.setValue = signal.message.value;
                if (signal.message.value < 25) {
                  data.stateValue = "优秀";
                }
                if (signal.message.value >= 25 && signal.message.value < 50) {
                  data.stateValue = '良好';
                }
                if (signal.message.value >= 50 && signal.message.value < 75) {
                  data.stateValue = '一般1';
                }
                if (signal.message.value >= 75) {
                  _results.push(data.stateValue = '极差');
                } else {
                  _results.push(void 0);
                }
              } else {
                _results.push(void 0);
              }
            }
            return _results;
          }
        };
      })(this));
    };

    DeviceStateDirective.prototype.resize = function(scope) {};

    DeviceStateDirective.prototype.dispose = function(scope) {
      return _.map(scope.equipSubscription, (function(_this) {
        return function(value, key) {
          return value != null ? value.dispose() : void 0;
        };
      })(this));
    };

    return DeviceStateDirective;

  })(base.BaseDirective);
  return exports = {
    DeviceStateDirective: DeviceStateDirective
  };
});
