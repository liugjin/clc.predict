// Generated by IcedCoffeeScript 108.0.13

/*
* File: new-station-device-list-directive
* User: David
* Date: 2019/12/24
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var NewStationDeviceListDirective, exports;
  NewStationDeviceListDirective = (function(_super) {
    __extends(NewStationDeviceListDirective, _super);

    function NewStationDeviceListDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.addZero = __bind(this.addZero, this);
      this.getOneDevice = __bind(this.getOneDevice, this);
      this.clickDevice = __bind(this.clickDevice, this);
      this.countDays = __bind(this.countDays, this);
      this.getDeviceSpecialSignal = __bind(this.getDeviceSpecialSignal, this);
      this.getOcpaSignals = __bind(this.getOcpaSignals, this);
      this.getDeviceSignal = __bind(this.getDeviceSignal, this);
      this.getDevice = __bind(this.getDevice, this);
      this.show = __bind(this.show, this);
      this.id = "new-station-device-list";
      NewStationDeviceListDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    NewStationDeviceListDirective.prototype.setScope = function() {};

    NewStationDeviceListDirective.prototype.setCSS = function() {
      return css;
    };

    NewStationDeviceListDirective.prototype.setTemplate = function() {
      return view;
    };

    NewStationDeviceListDirective.prototype.show = function(scope, element, attrs) {
      var _ref;
      scope.motor = [];
      scope.inverter = [];
      scope.transformer = [];
      scope.switchBox = [];
      scope.allMotorNumber = 0;
      scope.allInverterNumber = 0;
      scope.allConverterNumber = 0;
      scope.allSwitchBoxNumber = 0;
      scope.equipSubscription = {};
      scope.motorState = {
        runningNumber: '00',
        offlineNumber: '00',
        alarmNumber: '00',
        forecastNumber: '00'
      };
      scope.inverterState = {
        runningNumber: '00',
        offlineNumber: '00',
        alarmNumber: '00',
        forecastNumber: '00'
      };
      scope.transformerState = {
        runningNumber: '00',
        offlineNumber: '00',
        alarmNumber: '00',
        forecastNumber: '00'
      };
      scope.switchBoxState = {
        runningNumber: '00',
        offlineNumber: '00',
        alarmNumber: '00',
        forecastNumber: '00'
      };
      scope.motorArr = {
        runningNumber: [],
        offlineNumber: [],
        alarmNumber: [],
        forecastNumber: []
      };
      scope.inverterArr = {
        runningNumber: [],
        offlineNumber: [],
        alarmNumber: [],
        forecastNumber: []
      };
      scope.transformerArr = {
        runningNumber: [],
        offlineNumber: [],
        alarmNumber: [],
        forecastNumber: []
      };
      scope.switchBoxArr = {
        runningNumber: [],
        offlineNumber: [],
        alarmNumber: [],
        forecastNumber: []
      };
      scope.equipTypeLists = {};
      scope.equipNumData = {
        runningNumber: '00',
        offlineNumber: '00',
        alarmNumber: '00',
        forecastNumber: '00'
      };
      if (scope.showDeviceData) {
        scope.equipDetailUrl = '#/device-details/' + scope.project.model.user + '/' + scope.project.model.project + '?station=' + scope.station.model.station + '&equipment=' + scope.showDeviceData.model.equipment;
      }
      scope.focus = 1;
      scope.clickTime = (function(_this) {
        return function(i) {
          scope.focus = i;
          return _this.getOneDevice(scope);
        };
      })(this);
      scope.clickDevice = (function(_this) {
        return function(data) {
          return _this.clickDevice(scope, data);
        };
      })(this);
      if (scope.station && scope.station.model.group === 'datacenter') {
        scope.station = scope.project.stations.items[1];
      }
      this.getDevice(scope);
      if ((_ref = scope.stationSubscription) != null) {
        _ref.dispose();
      }
      return scope.stationSubscription = this.commonService.subscribeEventBus("selectStation", (function(_this) {
        return function(msg) {
          var station;
          scope.equipments = [];
          station = _.find(scope.project.stations.items, function(sta) {
            return sta.model.station === msg.message.id;
          });
          return _this.selectStation(scope, station);
        };
      })(this));
    };

    NewStationDeviceListDirective.prototype.selectStation = function(scope, station) {
      scope.station = station;
      scope.equipTypeLists = _.map(scope.categories[station.model.station], function(value, key) {
        var item;
        item = _.find(scope.project.dictionary.equipmenttypes.items, function(it) {
          return it.model.type === key;
        });
        if (item) {
          value.image = item.model.image;
          value.index = item.model.index;
        }
        return value;
      });
      scope.equipTypeLists = _.sortBy(scope.equipTypeLists, function(item) {
        return 0 - item.index;
      });
      return this.getDevice(scope);
    };

    NewStationDeviceListDirective.prototype.getDevice = function(scope) {
      return scope.station.loadEquipments(null, null, (function(_this) {
        return function(err, equipments) {
          var eq, item, _i, _j, _len, _len1, _ref;
          if (equipments) {
            for (_i = 0, _len = equipments.length; _i < _len; _i++) {
              eq = equipments[_i];
              eq.model.newCreatetime = eq.model.createtime.split("T")[0];
              if (eq.model.properties.length > 0) {
                _ref = eq.model.properties;
                for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                  item = _ref[_j];
                  if (item.id === 'production-time') {
                    eq.model.productionTime = item.value;
                    eq.model.productionTime = eq.model.productionTime.split("T")[0];
                  }
                }
              }
              if (eq.model.type === 'motor') {
                scope.motor.push(eq);
              } else if (eq.model.type === 'inverter') {
                scope.inverter.push(eq);
              } else if (eq.model.type === 'transformer') {
                scope.transformer.push(eq);
              } else if (eq.model.type === 'switch-box') {
                scope.switchBox.push(eq);
              }
            }
            if (scope.switchBox.length > 0) {
              scope.switchBox.reverse();
            }
            scope.allMotorNumber = _this.addZero(scope.motor.length);
            scope.allInverterNumber = _this.addZero(scope.inverter.length);
            scope.allConverterNumber = _this.addZero(scope.transformer.length);
            scope.allSwitchBoxNumber = _this.addZero(scope.switchBox.length);
            _this.getOneDevice(scope);
            _this.getDeviceSignal(scope, scope.station, scope.motor, 'communication-status', 'runState', 'motor', scope.motorArr, scope.motorState, 'runningNumber', 'offlineNumber');
            _this.getDeviceSignal(scope, scope.station, scope.motor, 'alarm-status', "alarmState", 'motor', scope.motorArr, scope.motorState, 'forecastNumber', 'alarmNumber');
            _this.getDeviceSignal(scope, scope.station, scope.inverter, 'communication-status', 'runState', 'inverter', scope.inverterArr, scope.inverterState, 'runningNumber', 'offlineNumber');
            _this.getDeviceSignal(scope, scope.station, scope.inverter, 'alarm-status', 'alarmState', 'inverter', scope.inverterArr, scope.inverterState, 'forecastNumber', 'alarmNumber');
            _this.getDeviceSignal(scope, scope.station, scope.transformer, 'communication-status', 'runState', 'transformer', scope.transformerArr, scope.transformerState, 'runningNumber', 'offlineNumber');
            _this.getDeviceSignal(scope, scope.station, scope.transformer, 'alarm-status', 'alarmState', 'transformer', scope.transformerArr, scope.transformerState, 'forecastNumber', 'alarmNumber');
            _this.getDeviceSignal(scope, scope.station, scope.switchBox, 'communication-status', 'runState', 'switch-box', scope.switchBoxArr, scope.switchBoxState, 'runningNumber', 'offlineNumber');
            _this.getDeviceSignal(scope, scope.station, scope.switchBox, 'alarm-status', 'alarmState', 'switch-box', scope.switchBoxArr, scope.switchBoxState, 'forecastNumber', 'alarmNumber');
            _this.getDeviceSignal(scope, scope.station, equipments, 'device-power', 'devicePower');
            _this.getDeviceSignal(scope, scope.station, equipments, 'abroad', 'abroad');
            _this.getDeviceSignal(scope, scope.station, equipments, 'within', 'within');
            return _this.getDeviceSignal(scope, scope.station, equipments, 'electric-current', 'current');
          }
        };
      })(this));
    };

    NewStationDeviceListDirective.prototype.getDeviceSignal = function(scope, site, equipments, signalID, setValue, template, deviceArr0, deviceState, siteValue0, siteValue1) {
      var filter, str, _ref;
      filter = {
        user: scope.project.model.user,
        project: scope.project.model.project,
        station: site.model.station,
        equipment: '+',
        signal: signalID
      };
      str = site.key + "-" + signalID + "-" + template;
      if ((_ref = scope.equipSubscription[str]) != null) {
        _ref.dispose();
      }
      return scope.equipSubscription[str] = this.commonService.signalLiveSession.subscribeValues(filter, (function(_this) {
        return function(err, d) {
          var equipment, _i, _j, _len, _len1;
          if (d && d.message) {
            for (_i = 0, _len = equipments.length; _i < _len; _i++) {
              equipment = equipments[_i];
              if (equipment.model.equipment === d.message.equipment) {
                equipment.model[setValue] = d.message.value;
              }
            }
            if (!template) {
              return;
            }
            deviceArr0[siteValue0].splice(0, deviceArr0[siteValue0].length);
            deviceArr0[siteValue1].splice(0, deviceArr0[siteValue1].length);
            for (_j = 0, _len1 = equipments.length; _j < _len1; _j++) {
              equipment = equipments[_j];
              if (signalID === 'communication-status') {
                if (equipment.model[setValue] === 0) {
                  deviceArr0[siteValue0].push(equipment);
                }
                if (equipment.model[setValue] === -1) {
                  deviceArr0[siteValue1].push(equipment);
                }
              } else if (signalID === 'alarm-status') {
                if (equipment.model[setValue] === 0) {
                  deviceArr0[siteValue0].push(equipment);
                }
                if (equipment.model[setValue] === 1) {
                  deviceArr0[siteValue1].push(equipment);
                }
              }
            }
            deviceState[siteValue0] = _this.addZero(deviceArr0[siteValue0].length);
            deviceState[siteValue1] = _this.addZero(deviceArr0[siteValue1].length);
            if (scope.focus === 1) {
              return scope.equipNumData = scope.motorState;
            }
          }
        };
      })(this));
    };

    NewStationDeviceListDirective.prototype.getOcpaSignals = function(scope) {
      scope.daysRunning = 0;
      scope.signalDataArr = [];
      scope.switchBoxSignals = [];
      this.countDays(scope);
      scope.signalDataArr = [
        {
          stateName: '当前状态',
          setValue: '--',
          unit: '',
          signalID: 'communication-status'
        }, {
          stateName: '运行天数',
          setValue: scope.daysRunning,
          unit: '天',
          signalID: ''
        }
      ];
      this.getDeviceSpecialSignal(scope, scope.equipment, 'communication-status');
      scope.equipTypesId = ["transformer", "inverter", "switch-box", "motor"];
      scope.equipTemplatesId = ["base-motor", "base-cabinet", "base-converter", "base-transformer"];
      return scope.equipment.loadSignals(null, (function(_this) {
        return function(err, signals) {
          var j, sig, _i, _j, _len, _len1, _ref, _ref1, _ref2, _results;
          if (err) {

          } else {
            for (_i = 0, _len = signals.length; _i < _len; _i++) {
              sig = signals[_i];
              if (_ref = sig.model.type, __indexOf.call(scope.equipTypesId, _ref) >= 0) {
                if (_ref1 = sig.model.template, __indexOf.call(scope.equipTemplatesId, _ref1) < 0) {
                  scope.switchBoxSignals.push(sig);
                }
              }
            }
            _ref2 = scope.switchBoxSignals;
            _results = [];
            for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
              j = _ref2[_j];
              console.log(j);
              scope.signalDataArr.push({
                stateName: j.model.name,
                setValue: 0,
                unit: j.model.desc,
                signalID: j.model.signal
              });
              _results.push(_this.getDeviceSpecialSignal(scope, scope.equipment, j.model.signal));
            }
            return _results;
          }
        };
      })(this));
    };

    NewStationDeviceListDirective.prototype.getDeviceSpecialSignal = function(scope, equipment, signalID) {
      var filter, str, _ref;
      filter = {
        user: scope.project.model.user,
        project: scope.project.model.project,
        station: equipment.model.station,
        equipment: equipment.model.equipment,
        signal: signalID
      };
      str = equipment.key + "-" + signalID;
      if ((_ref = scope.equipSubscription[str]) != null) {
        _ref.dispose();
      }
      return scope.equipSubscription[str] = this.commonService.signalLiveSession.subscribeValues(filter, (function(_this) {
        return function(err, signal) {
          var data, _i, _len, _ref1, _results;
          console.log(signal);
          if (signal && signal.message) {
            _ref1 = scope.signalDataArr;
            _results = [];
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              data = _ref1[_i];
              if (signalID === data.signalID) {
                if (signalID === "communication-status") {
                  console.log(signal);
                  if (signal.message.value === 0) {
                    _results.push(data.setValue = '运行');
                  } else {
                    _results.push(data.setValue = '停机');
                  }
                } else {
                  _results.push(data.setValue = signal.message.value.toFixed(2));
                }
              } else {
                _results.push(void 0);
              }
            }
            return _results;
          }
        };
      })(this));
    };

    NewStationDeviceListDirective.prototype.countDays = function(scope) {
      var item, lasttime, time, _i, _len, _ref;
      time = Date.parse(new Date());
      lasttime = Date.parse(scope.equipment.model.createtime);
      if (scope.equipment.model.properties.length > 0) {
        _ref = scope.equipment.model.properties;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          if (item.id === 'production-time') {
            lasttime = Date.parse(item.value);
          }
        }
      }
      return scope.daysRunning = parseInt((time - lasttime) / (1000 * 60 * 60 * 24));
    };

    NewStationDeviceListDirective.prototype.clickDevice = function(scope, data) {
      scope.showDeviceData = data;
      scope.equipment = data;
      if (scope.showDeviceData) {
        scope.equipDetailUrl = '#/device-details/' + scope.project.model.user + '/' + scope.project.model.project + '?station=' + scope.station.model.station + '&equipment=' + scope.showDeviceData.model.equipment;
        return this.getOcpaSignals(scope);
      }
    };

    NewStationDeviceListDirective.prototype.getOneDevice = function(scope) {
      if (scope.focus === 1) {
        scope.showDeviceData = scope.motor[0];
        scope.equipment = scope.motor[0];
        scope.equipNumData = scope.motorState;
      }
      if (scope.focus === 2) {
        scope.showDeviceData = scope.inverter[0];
        scope.equipment = scope.inverter[0];
        scope.equipNumData = scope.inverterState;
      }
      if (scope.focus === 3) {
        scope.showDeviceData = scope.switchBox[0];
        scope.equipment = scope.switchBox[0];
        scope.equipNumData = scope.switchBoxState;
      }
      if (scope.focus === 4) {
        scope.showDeviceData = scope.transformer[0];
        scope.equipment = scope.transformer[0];
        scope.equipNumData = scope.transformerState;
      }
      if (scope.showDeviceData) {
        scope.equipDetailUrl = '#/device-details/' + scope.project.model.user + '/' + scope.project.model.project + '?station=' + scope.station.model.station + '&equipment=' + scope.showDeviceData.model.equipment;
        return this.getOcpaSignals(scope);
      }
    };

    NewStationDeviceListDirective.prototype.addZero = function(num) {
      if (parseInt(num) < 10 && parseInt(num) > 0) {
        num = '0' + num;
      }
      return num;
    };

    NewStationDeviceListDirective.prototype.resize = function(scope) {};

    NewStationDeviceListDirective.prototype.dispose = function(scope) {
      return _.mapObject(scope.equipSubscription, (function(_this) {
        return function(item) {
          return item.dispose();
        };
      })(this));
    };

    return NewStationDeviceListDirective;

  })(base.BaseDirective);
  return exports = {
    NewStationDeviceListDirective: NewStationDeviceListDirective
  };
});
