// Generated by IcedCoffeeScript 108.0.13

/*
* File: comp-defectsetting-directive
* User: James
* Date: 2019/11/21
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var CompDefectsettingDirective, exports;
  CompDefectsettingDirective = (function(_super) {
    __extends(CompDefectsettingDirective, _super);

    function CompDefectsettingDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.recurStation = __bind(this.recurStation, this);
      this.createProcessTemplate = __bind(this.createProcessTemplate, this);
      this.loadProcess = __bind(this.loadProcess, this);
      this.loadGroup = __bind(this.loadGroup, this);
      this.deleteProcess = __bind(this.deleteProcess, this);
      this.saveProcess = __bind(this.saveProcess, this);
      this.show = __bind(this.show, this);
      this.id = "comp-defectsetting";
      CompDefectsettingDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
      this.groupService = commonService.modelEngine.modelManager.getService("groups");
      this.processService = commonService.modelEngine.modelManager.getService("processes");
      this.notificationrulesService = commonService.modelEngine.modelManager.getService("notificationrules");
    }

    CompDefectsettingDirective.prototype.setScope = function() {};

    CompDefectsettingDirective.prototype.setCSS = function() {
      return css;
    };

    CompDefectsettingDirective.prototype.setTemplate = function() {
      return view;
    };

    CompDefectsettingDirective.prototype.show = function(scope, element, attrs) {
      var defaultVal, elem, rootItem, roots, tmpEquipTypes, _i, _len;
      scope.processType = "defect";
      scope.allStationFlag = false;
      scope.allEquipTypeFlag = false;
      scope.allEventTypeFlag = false;
      scope.allStationCheckFlags = {};
      scope.allEquipTypeCheckFlags = {};
      scope.allEventTypeCheckFlags = {};
      scope.current = defaultVal = {
        visible: true,
        enable: true
      };
      scope.textinfo = {
        btns: [
          {
            title: "删除",
            show: true
          }, {
            title: "取消",
            show: false
          }, {
            title: "保存",
            show: true
          }, {
            title: "新增",
            show: true
          }
        ]
      };
      scope.notificationRule = {
        allEquipmentTypes: true,
        allEquipments: true,
        eventPhases: ["start"],
        allEventSeverities: true,
        allEventTypes: true,
        allStations: true
      };
      scope.groupInfo = {
        process: "",
        name: "",
        desc: "",
        engineers: [],
        addUser: ""
      };
      scope.editState = true;
      scope.selectNodeId = null;
      scope.memberList = [];
      scope.notificationObjs = {
        notification: "",
        name: "工作流-故障工单",
        title: scope.processType,
        content: "故障工单消息",
        contentType: "template",
        type: "workflow",
        delay: 0,
        enable: true,
        events: [],
        index: 0,
        phase: "start",
        priority: 0,
        repeatPeriod: 0,
        repeatTimes: 0,
        ruleType: "complex",
        timeout: 10,
        users: ["_all"],
        visible: true,
        rule: scope.notificationRule
      };
      tmpEquipTypes = _.filter(scope.project.dictionary.equipmenttypes.items, function(item) {
        return item.model.type.charAt(0) !== "_";
      });
      scope.equipmentTypes = _.sortBy(tmpEquipTypes, function(item) {
        scope.allEquipTypeCheckFlags[item.model.type] = false;
        return item.model.index;
      });
      scope.eventTypeList = _.sortBy(scope.project.dictionary.eventtypes.items, function(item) {
        scope.allEventTypeCheckFlags[item.model.type] = false;
        return item.model.index;
      });
      _.each(scope.project.stations.items, function(item) {
        if (item.model.station.charAt(0) !== "_") {
          return scope.allStationCheckFlags[item.model.station] = false;
        }
      });
      roots = _.filter(scope.project.stations.items, (function(_this) {
        return function(val, key) {
          return (val.model.parent === "") && (val.model.station.charAt(0) !== "_");
        };
      })(this));
      this.htmlstr = "";
      for (_i = 0, _len = roots.length; _i < _len; _i++) {
        rootItem = roots[_i];
        this.htmlstr += '<div class="repeat-label"><md-checkbox ng-model="allStationCheckFlags[\'' + rootItem.model.station + '\']"  id="station-' + rootItem.model.station + '"  ng-disabled="allStationFlag" with-gap=false filled-in=true label="' + rootItem.model.name + '"></md-checkbox>';
        this.recurStation(rootItem, this.htmlstr);
      }
      this.htmlstr += "</div>";
      elem = this.$compile(this.htmlstr)(scope);
      $('#recurestationid').append(elem);
      scope.btnClick = (function(_this) {
        return function(type) {
          var tmpProcess;
          if (type === 2) {
            if (scope.groupInfo.process === "" || scope.groupInfo.name === "") {
              M.toast({
                html: '温馨提示：流程ID/流程名称不可为空！！'
              });
              return;
            }
            if (scope.editState) {
              tmpProcess = _.find(_this.allProcesses, function(d) {
                return d.process === scope.groupInfo.process;
              });
              if (tmpProcess) {
                _this.display("温馨提示：该ID已被占用！！");
                return;
              }
            }
            if (scope.memberList.length < 1) {
              _this.display("温馨提示：请选择班组成员！");
              return;
            }
            return _this.saveProcess(scope);
          } else if (type === 3) {
            scope.selectNodeId = null;
            scope.memberList = [];
            scope.editState = true;
            _this.resetSelectModelDatas(scope);
            _this.getUniqueName(scope.processList, "defect", 'process', 1);
            return scope.groupInfo = {
              process: _this.getUniqueName(scope.processList, "defect", 'process', 1),
              name: _this.getUniqueName(scope.processList, "故障工单", 'name', 1),
              desc: "",
              engineers: [],
              addUser: ""
            };
          } else if (type === 0) {
            if (scope.groupInfo.process !== "") {
              _this.current = {
                process: scope.groupInfo.process,
                name: scope.groupInfo.name,
                desc: scope.groupInfo.desc
              };
              _this.current = _.extend(_this.current, scope.project.getIds());
              return _this.deleteProcess(scope);
            } else {
              return M.toast({
                html: "不可删除空id的表单！！"
              });
            }
          }
        };
      })(this);
      scope.updateMember = (function(_this) {
        return function(index) {
          var addUserObj, hasUser;
          if (typeof index === "number") {
            scope.memberList = _.filter(scope.memberList, function(d) {
              return d.id !== scope.memberList[index].id;
            });
            scope.showAddSelect = false;
            return scope.$applyAsync();
          } else {
            hasUser = _.find(scope.memberList, function(d) {
              return d.id === index;
            });
            addUserObj = _.find(scope.userList, function(d) {
              return d.value === index;
            });
            if (!hasUser && addUserObj) {
              scope.memberList.push({
                name: addUserObj.name,
                title: "employee",
                id: addUserObj.value
              });
              scope.groupInfo.addUser = "";
              return scope.$applyAsync();
            } else {
              return M.toast({
                html: index === "" ? "不可选择空用户！！" : '请选择一个不在班组内的用户！！'
              });
            }
          }
        };
      })(this);
      scope.selectProcess = (function(_this) {
        return function(index, item) {
          var filter;
          scope.editState = false;
          if (scope.selectNodeId !== index) {
            scope.selectNodeId = index;
            _this.current = _.find(_this.allProcesses, function(processItem) {
              return processItem._id === item._id;
            });
            scope.selectNodeId = index;
            scope.groupInfo = _this.current;
            scope.memberList = item.engineers ? item.engineers : [];
            filter = scope.project.getIds();
            filter.notification = _this.current.process;
            _this.notificationrulesService.query(filter, null, function(err, notifDatas) {
              var equipTypeItem, eventTypeItem, stationItem, _j, _k, _l, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _results;
              _this.resetSelectModelDatas(scope);
              if (!_.isEmpty(notifDatas)) {
                if (notifDatas.rule.allStations) {
                  scope.allStationFlag = true;
                  scope.allStationCheckFlags = _.mapObject(scope.allStationCheckFlags, function(val, key) {
                    return val = true;
                  });
                } else {
                  if (((_ref = notifDatas.rule.stations) != null ? _ref.length : void 0) > 0) {
                    _ref1 = notifDatas.rule.stations;
                    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                      stationItem = _ref1[_j];
                      scope.allStationCheckFlags[stationItem] = true;
                    }
                  }
                }
                if (notifDatas.rule.allEquipmentTypes) {
                  scope.allEquipTypeFlag = true;
                  scope.allEquipTypeCheckFlags = _.mapObject(scope.allEquipTypeCheckFlags, function(val, key) {
                    return val = true;
                  });
                } else {
                  if (((_ref2 = notifDatas.rule.equipmentTypes) != null ? _ref2.length : void 0) > 0) {
                    _ref3 = notifDatas.rule.equipmentTypes;
                    for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
                      equipTypeItem = _ref3[_k];
                      scope.allEquipTypeCheckFlags[equipTypeItem] = true;
                    }
                  }
                }
                if (notifDatas.rule.allEventTypes) {
                  scope.allEventTypeFlag = true;
                  return scope.allEventTypeCheckFlags = _.mapObject(scope.allEventTypeCheckFlags, function(val, key) {
                    return val = true;
                  });
                } else {
                  if (((_ref4 = notifDatas.rule.eventTypes) != null ? _ref4.length : void 0) > 0) {
                    _ref5 = notifDatas.rule.eventTypes;
                    _results = [];
                    for (_l = 0, _len3 = _ref5.length; _l < _len3; _l++) {
                      eventTypeItem = _ref5[_l];
                      _results.push(scope.allEventTypeCheckFlags[eventTypeItem] = true);
                    }
                    return _results;
                  }
                }
              }
            }, true);
            return scope.$applyAsync();
          }
        };
      })(this);
      scope.selectAllstations = function() {
        if (scope.allStationFlag) {
          scope.allStationCheckFlags = _.mapObject(scope.allStationCheckFlags, function(val, key) {
            return val = true;
          });
        } else {
          scope.allStationCheckFlags = _.mapObject(scope.allStationCheckFlags, function(val, key) {
            return val = false;
          });
        }
        return scope.$applyAsync();
      };
      scope.selectAllequiptypes = function() {
        if (scope.allEquipTypeFlag) {
          scope.allEquipTypeCheckFlags = _.mapObject(scope.allEquipTypeCheckFlags, function(val, key) {
            return val = true;
          });
        } else {
          scope.allEquipTypeCheckFlags = _.mapObject(scope.allEquipTypeCheckFlags, function(val, key) {
            return val = false;
          });
        }
        return scope.$applyAsync();
      };
      scope.selectAlleventeypes = function() {
        if (scope.allEventTypeFlag) {
          scope.allEventTypeCheckFlags = _.mapObject(scope.allEventTypeCheckFlags, function(val, key) {
            return val = true;
          });
        } else {
          scope.allEventTypeCheckFlags = _.mapObject(scope.allEventTypeCheckFlags, function(val, key) {
            return val = false;
          });
        }
        return scope.$applyAsync();
      };
      this.loadGroup(scope, (function(_this) {
        return function(groups) {
          var groupItem, userOption, _j, _len1;
          if (groups) {
            userOption = [];
            for (_j = 0, _len1 = groups.length; _j < _len1; _j++) {
              groupItem = groups[_j];
              _.map(groupItem.engineers, function(d) {
                return userOption.push({
                  name: d.name,
                  value: d.name
                });
              });
            }
            scope.userList = userOption;
            return scope.$applyAsync();
          }
        };
      })(this));
      return this.loadProcess(scope, (function(_this) {
        return function(process) {};
      })(this));
    };

    CompDefectsettingDirective.prototype.saveProcess = function(scope) {
      if (scope.allStationFlag) {
        delete scope.notificationRule["stations"];
        scope.notificationRule["allStations"] = true;
      } else {
        delete scope.notificationRule["allStations"];
        scope.notificationRule["stations"] = [];
        _.mapObject(scope.allStationCheckFlags, (function(_this) {
          return function(val, key) {
            if (val) {
              return scope.notificationRule["stations"].push(key);
            }
          };
        })(this));
      }
      if (scope.allEquipTypeFlag) {
        delete scope.notificationRule["equipmentTypes"];
        scope.notificationRule["allEquipmentTypes"] = true;
      } else {
        delete scope.notificationRule["allEquipmentTypes"];
        scope.notificationRule["equipmentTypes"] = [];
        _.mapObject(scope.allEquipTypeCheckFlags, (function(_this) {
          return function(val, key) {
            if (val) {
              return scope.notificationRule["equipmentTypes"].push(key);
            }
          };
        })(this));
      }
      if (scope.allEventTypeFlag) {
        delete scope.notificationRule["eventTypes"];
        scope.notificationRule["allEventTypes"] = true;
      } else {
        delete scope.notificationRule["allEventTypes"];
        scope.notificationRule["eventTypes"] = [];
        _.mapObject(scope.allEventTypeCheckFlags, (function(_this) {
          return function(val, key) {
            if (val) {
              return scope.notificationRule["eventTypes"].push(key);
            }
          };
        })(this));
      }
      return this.createProcessTemplate(scope, (function(_this) {
        return function(err, processData) {
          var filter, notificationObj;
          if (err) {
            _this.display("错误提示：" + err);
            return;
          }
          notificationObj = scope.notificationObjs;
          notificationObj = _.extend(scope.project.getIds(), scope.notificationObjs);
          filter = scope.project.getIds();
          filter.notification = processData.process;
          return _this.notificationrulesService.query(filter, null, function(err, notificationDatas) {
            if (!err) {
              if (notificationDatas.length > 0) {
                notificationObj = notificationDatas[0];
              }
              notificationObj.notification = scope.groupInfo.process;
              notificationObj.title = scope.processType + "/" + scope.groupInfo.process;
              notificationObj.name = scope.groupInfo.name;
              notificationObj.rule = scope.notificationRule;
              return _this.notificationrulesService.save(notificationObj, function(err, processData) {
                if (err) {
                  _this.display("温馨提示：" + err);
                } else {
                  _this.display("温馨提示：操作成功！");
                }
                return _this.loadProcess(scope, function(process) {});
              });
            }
          }, true);
        };
      })(this));
    };

    CompDefectsettingDirective.prototype.resetSelectModelDatas = function(scope) {
      scope.allStationFlag = false;
      scope.allEquipTypeFlag = false;
      scope.allEventTypeFlag = false;
      scope.allStationCheckFlags = _.mapObject(scope.allStationCheckFlags, function(val, key) {
        return val = false;
      });
      scope.allEquipTypeCheckFlags = _.mapObject(scope.allEquipTypeCheckFlags, function(val, key) {
        return val = false;
      });
      return scope.allEventTypeCheckFlags = _.mapObject(scope.allEventTypeCheckFlags, function(val, key) {
        return val = false;
      });
    };

    CompDefectsettingDirective.prototype.deleteProcess = function(scope) {
      return this.processService.remove(this.current, (function(_this) {
        return function(err, processData) {
          if (err) {
            return _this.display(err, processData);
          } else {
            scope.selectNodeId = null;
            scope.memberList = [];
            scope.editState = true;
            scope.selectedEquipSignalList = {};
            scope.groupInfo = {
              process: "",
              name: "",
              desc: "",
              engineers: [],
              addUser: ""
            };
            scope.processList = _.filter(scope.processList, function(d) {
              return d.process !== processData[0].process;
            });
            scope.$applyAsync();
            return _this.display("温馨提示：操作成功！");
          }
        };
      })(this));
    };

    CompDefectsettingDirective.prototype.loadGroup = function(scope, callback) {
      var filter;
      filter = {};
      filter.user = this.$routeParams.user;
      filter.project = this.$routeParams.project;
      return this.groupService.query(filter, 'group name managerName parent engineers', (function(_this) {
        return function(err, groupModels) {
          if (groupModels) {
            scope.allGroups = groupModels;
          }
          return callback(groupModels);
        };
      })(this), true);
    };

    CompDefectsettingDirective.prototype.getUniqueName = function(items, prefix, property, index) {
      var item, name, _i, _len;
      if (index == null) {
        index = 1;
      }
      name = "" + prefix + "-" + index;
      if (items) {
        for (_i = 0, _len = items.length; _i < _len; _i++) {
          item = items[_i];
          if (item[property] === name) {
            return this.getUniqueName(items, prefix, property, index + 1);
          }
        }
      }
      return name;
    };

    CompDefectsettingDirective.prototype.loadProcess = function(scope, callback) {
      var filter;
      filter = scope.project.getIds();
      filter.type = scope.processType;
      return this.processService.query(filter, null, (function(_this) {
        return function(err, processModels) {
          if (processModels) {
            _this.allProcesses = processModels;
            scope.processList = processModels;
          }
          return callback(processModels);
        };
      })(this), true);
    };

    CompDefectsettingDirective.prototype.createProcessTemplate = function(scope, callback) {
      var filter;
      filter = scope.project.getIds();
      filter.process = scope.groupInfo.process;
      return this.processService.query(filter, null, (function(_this) {
        return function(err, procesDatas) {
          var nodeObj, templateObj;
          if (!(_.isEmpty(procesDatas))) {
            procesDatas.nodes[0].contents[0].content = JSON.stringify({
              content: "",
              handle_details: [],
              attachments: []
            });
            procesDatas.name = scope.groupInfo.name;
            procesDatas.desc = scope.groupInfo.desc;
            return _this.processService.save(procesDatas, function(err, processData) {
              return typeof callback === "function" ? callback(err, processData) : void 0;
            });
          } else {
            nodeObj = {
              name: "流程节点1",
              node: "node-1",
              timeout: 0,
              actions: {
                approval: true,
                reject: true,
                forward: true,
                save: true
              },
              contents: [
                {
                  type: "json",
                  content: JSON.stringify({
                    content: "",
                    handle_details: [],
                    attachments: []
                  })
                }
              ]
            };
            templateObj = {
              name: scope.groupInfo.name,
              process: scope.groupInfo.process,
              desc: scope.groupInfo.desc,
              trigger: "event",
              type: scope.processType,
              enable: true,
              visible: true,
              cancleable: true,
              priority: null,
              nodes: []
            };
            templateObj.nodes.push(nodeObj);
            templateObj = _.extend(templateObj, scope.project.getIds());
            return _this.processService.save(templateObj, function(err, processData) {
              return typeof callback === "function" ? callback(err, processData) : void 0;
            });
          }
        };
      })(this), true);
    };

    CompDefectsettingDirective.prototype.recurStation = function(restation) {
      var stationItem, _i, _len, _ref;
      if (restation.stations.length > 0) {
        this.htmlstr += '<div style="margin-left: 30px;margin-top: .5rem">';
        _ref = restation.stations;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          stationItem = _ref[_i];
          this.htmlstr += '<div>';
          this.htmlstr += '<md-checkbox ng-model="allStationCheckFlags[\'' + stationItem.model.station + '\']"  id="station-' + stationItem.model.station + '" ng-change="changeStations(\'' + stationItem.model.station + '\')" ng-disabled="allStationFlag" with-gap=false filled-in=true label="' + stationItem.model.name + '"></md-checkbox>';
          this.recurStation(stationItem);
        }
        return this.htmlstr += "</div>";
      } else {
        this.htmlstr += "</div>";
      }
    };

    CompDefectsettingDirective.prototype.getUniqueName = function(items, prefix, property, index) {
      var item, name, _i, _len;
      if (index == null) {
        index = 1;
      }
      name = "" + prefix + "-" + index;
      if (items) {
        for (_i = 0, _len = items.length; _i < _len; _i++) {
          item = items[_i];
          if (item[property] === name) {
            return this.getUniqueName(items, prefix, property, index + 1);
          }
        }
      }
      return name;
    };

    CompDefectsettingDirective.prototype.resize = function(scope) {};

    CompDefectsettingDirective.prototype.dispose = function(scope) {
      var _ref;
      $('.gldp-default').remove();
      return (_ref = scope.checkEquipsSubscription) != null ? _ref.dispose() : void 0;
    };

    return CompDefectsettingDirective;

  })(base.BaseDirective);
  return exports = {
    CompDefectsettingDirective: CompDefectsettingDirective
  };
});
