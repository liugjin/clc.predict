// Generated by IcedCoffeeScript 108.0.13

/*
* File: device-information-directive
* User: David
* Date: 2019/12/23
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var DeviceInformationDirective, exports;
  DeviceInformationDirective = (function(_super) {
    __extends(DeviceInformationDirective, _super);

    function DeviceInformationDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.queryAlarms = __bind(this.queryAlarms, this);
      this.setTime = __bind(this.setTime, this);
      this.show = __bind(this.show, this);
      this.id = "device-information";
      DeviceInformationDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    DeviceInformationDirective.prototype.setScope = function() {};

    DeviceInformationDirective.prototype.setCSS = function() {
      return css;
    };

    DeviceInformationDirective.prototype.setTemplate = function() {
      return view;
    };

    DeviceInformationDirective.prototype.show = function(scope, element, attrs) {
      var _ref, _ref1, _ref2;
      scope.eventRecords = [];
      scope.eventSeverity = (_ref = scope.project) != null ? (_ref1 = _ref.typeModels) != null ? (_ref2 = _ref1.eventseverities) != null ? _ref2.items : void 0 : void 0 : void 0;
      this.setTime(scope, element);
      this.queryAlarms(scope, 1, 7, 'divine');
      scope.getReportData = (function(_this) {
        return function() {
          return _this.queryAlarms(scope, 1, 7, 'divine');
        };
      })(this);
      return scope.queryPage = (function(_this) {
        return function(page) {
          var paging;
          paging = scope.pagination;
          if (!paging) {
            return;
          }
          if (page === 'next') {
            page = paging.page + 1;
          } else if (page === 'previous') {
            page = paging.page - 1;
          }
          if (page > paging.pageCount || page < 1) {
            return;
          }
          scope.eventRecords = [];
          return _this.queryAlarms(scope, page, paging.pageItems, 'divine');
        };
      })(this);
    };

    DeviceInformationDirective.prototype.setTime = function(scope, element) {
      var setGlDatePicker;
      scope.query = {
        startTime: moment().format("YYYY-MM-DD"),
        endTime: moment().format("YYYY-MM-DD")
      };
      setGlDatePicker = function(element, value) {
        if (!value) {
          return;
        }
        return setTimeout(function() {
          var gl;
          return gl = $(element).glDatePicker({
            dowNames: ["日", "一", "二", "三", "四", "五", "六"],
            monthNames: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"],
            selectedDate: moment(value).toDate(),
            onClick: function(target, cell, date, data) {
              var day, month;
              month = date.getMonth() + 1;
              if (month < 10) {
                month = "0" + month;
              }
              day = date.getDate();
              if (day < 10) {
                day = "0" + day;
              }
              return target.val(date.getFullYear() + "-" + month + "-" + day).trigger("change");
            }
          });
        }, 500);
      };
      setGlDatePicker($('#start-time-input')[0], scope.query.startTime);
      return setGlDatePicker($('#end-time-input')[0], scope.query.startTime);
    };

    DeviceInformationDirective.prototype.queryAlarms = function(scope, page, pageItems, eventType) {
      var data, filter, paging;
      if (page == null) {
        page = 1;
      }
      if (pageItems == null) {
        pageItems = 8;
      }
      scope.showBox = false;
      filter = scope.project.getIds();
      filter.station = scope.station.model.station;
      filter.equipment = scope.equipment.model.equipment;
      filter.eventType = eventType;
      filter.startTime = moment(scope.query.startTime).startOf('day');
      filter.endTime = moment(scope.query.endTime).endOf('day');
      paging = {
        page: page,
        pageItems: pageItems
      };
      data = {
        filter: filter,
        fields: null,
        paging: paging,
        sorting: {
          station: 1,
          equipment: 1,
          timestamp: -1
        }
      };
      scope.dataEventRecords = [];
      scope.dataIntellect = [];
      this.commonService.reportingService.queryEventRecords(data, (function(_this) {
        return function(err, records, paging2) {
          var event, pCount, _i, _j, _len, _ref, _results;
          scope.eventRecords = records;
          _ref = scope.eventRecords;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            event = _ref[_i];
            scope.eventSeverity.forEach(function(e) {
              var _ref1, _ref2;
              if ((event != null ? event.severity : void 0) === (e != null ? (_ref1 = e.model) != null ? _ref1.severity : void 0 : void 0)) {
                return event.color = e != null ? (_ref2 = e.model) != null ? _ref2.color : void 0 : void 0;
              }
            });
          }
          pCount = (paging2 != null ? paging2.pageCount : void 0) || 0;
          if (pCount <= 6) {
            if (paging2 != null) {
              paging2.pages = (function() {
                _results = [];
                for (var _j = 1; 1 <= pCount ? _j <= pCount : _j >= pCount; 1 <= pCount ? _j++ : _j--){ _results.push(_j); }
                return _results;
              }).apply(this);
            }
          } else if (page > 3 && page < pCount - 2) {
            if (paging2 != null) {
              paging2.pages = [1, page - 2, page - 1, page, page + 1, page + 2, pCount];
            }
          } else if (page <= 3) {
            if (paging2 != null) {
              paging2.pages = [1, 2, 3, 4, 5, 6, pCount];
            }
          } else if (page >= pCount - 2) {
            if (paging2 != null) {
              paging2.pages = [1, pCount - 5, pCount - 4, pCount - 3, pCount - 2, pCount - 1, pCount];
            }
          }
          return scope.pagination = paging2;
        };
      })(this));
      return scope.clickEvent = (function(_this) {
        return function(event) {
          console.log(event);
          return window.location.hash = "#/event-analysis/" + event.user + "/" + event.project + "?station=" + event.station + "&equipment=" + event.equipment;
        };
      })(this);
    };

    DeviceInformationDirective.prototype.resize = function(scope) {};

    DeviceInformationDirective.prototype.dispose = function(scope) {};

    return DeviceInformationDirective;

  })(base.BaseDirective);
  return exports = {
    DeviceInformationDirective: DeviceInformationDirective
  };
});
