// Generated by IcedCoffeeScript 108.0.11

/*
* File: device-configuration-directive
* User: David
* Date: 2020/02/24
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var DeviceConfigurationDirective, exports;
  DeviceConfigurationDirective = (function(_super) {
    __extends(DeviceConfigurationDirective, _super);

    function DeviceConfigurationDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.getTemplates = __bind(this.getTemplates, this);
      this.clickTime = __bind(this.clickTime, this);
      this.show = __bind(this.show, this);
      this.id = "device-configuration";
      DeviceConfigurationDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    DeviceConfigurationDirective.prototype.setScope = function() {};

    DeviceConfigurationDirective.prototype.setCSS = function() {
      return css;
    };

    DeviceConfigurationDirective.prototype.setTemplate = function() {
      return view;
    };

    DeviceConfigurationDirective.prototype.show = function(scope, element, attrs) {
      var _ref, _ref1;
      scope.defaultName = "组合3D";
      scope.focus = 3;
      scope.showDevice = false;
      this.getTemplates(scope);
      this.clickTime(scope);
      scope.fullscreen = (function(_this) {
        return function(element) {
          var el, exit;
          if (!element) {
            return;
          }
          if (typeof element === 'string') {
            el = angular.element(element);
            element = el[0];
          }
          exit = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement;
          if (exit) {
            if (document.exitFullscreen) {
              return document.exitFullscreen();
            } else if (document.webkitExitFullscreen) {
              return document.webkitExitFullscreen(Element.ALLOW_KEYBOARD_INPUT);
            } else if (document.mozExitFullScreen) {
              return document.mozExitFullScreen();
            } else if (document.msExitFullscreen) {
              return document.msExitFullscreen();
            }
          } else {
            if (element.requestFullscreen) {
              return element.requestFullscreen();
            } else if (element.webkitRequestFullscreen) {
              return element.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
            } else if (element.mozRequestFullScreen) {
              return element.mozRequestFullScreen();
            } else if (element.msRequestFullscreen) {
              return element.msRequestFullscreen();
            }
          }
        };
      })(this);
      if ((_ref = scope.stationEventBusSelect) != null) {
        _ref.dispose();
      }
      scope.stationEventBusSelect = this.commonService.subscribeEventBus('select', (function(_this) {
        return function(msg) {
          if (msg && msg.message) {
            scope.defaultName = "展开3D";
            return scope.showDevice = true;
          }
        };
      })(this));
      if ((_ref1 = scope.stationEventBusOpen) != null) {
        _ref1.dispose();
      }
      scope.stationEventBusOpe = this.commonService.subscribeEventBus('alarm-open', (function(_this) {
        return function(msg) {
          if (msg && msg.message) {
            scope.defaultName = "展开3D";
            return scope.showDevice = true;
          }
        };
      })(this));
      scope.clickStation = (function(_this) {
        return function() {
          return window.location.hash = "#/station-info/" + scope.project.model.user + "/" + scope.project.model.project + "/" + scope.station.model.station;
        };
      })(this);
      return scope.rotate = (function(_this) {
        return function(i) {
          return _this.commonService.publishEventBus("rotate", {
            data: i
          });
        };
      })(this);
    };

    DeviceConfigurationDirective.prototype.clickTime = function(scope) {
      var clicktag;
      clicktag = 0;
      return scope.clickTime = (function(_this) {
        return function(i) {
          if (scope.focus === 2) {
            if (clicktag === 0) {
              clicktag = 1;
              setTimeout(function() {
                return clicktag = 0;
              }, 1400);
              scope.focus = i;
              scope.showDevice = !scope.showDevice;
              _this.commonService.publishEventBus("unfoldMerger", {
                data: scope.showDevice
              });
              if (scope.showDevice) {
                scope.defaultName = "展开3D";
              } else {
                scope.defaultName = "组合3D";
              }
            } else {
              console.log("请勿频繁点击");
            }
          }
          if (scope.focus === 3) {
            scope.focus = i;
            return _this.commonService.publishEventBus("configuration", {
              data: i
            });
          }
        };
      })(this);
    };

    DeviceConfigurationDirective.prototype.getTemplates = function(scope) {
      return scope.project.loadEquipmentTemplates({
        template: ""
      }, '', (function(_this) {
        return function(err, templates) {
          var tem, _i, _len, _results;
          _results = [];
          for (_i = 0, _len = templates.length; _i < _len; _i++) {
            tem = templates[_i];
            if (tem.model.template === scope.equipment.model.template) {
              scope.templateId = tem.model.graphic;
              if (tem.model.type === "motor" || tem.model.type === "inverter") {
                _results.push(scope.scene = _this.getComponentPath("./files/" + tem.model.type + ".json"));
              } else {
                _results.push(scope.scene = '');
              }
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        };
      })(this));
    };

    DeviceConfigurationDirective.prototype.resize = function(scope) {};

    DeviceConfigurationDirective.prototype.dispose = function(scope) {
      var _ref, _ref1;
      if ((_ref = scope.stationEventBusSelect) != null) {
        _ref.dispose();
      }
      return (_ref1 = scope.stationEventBusOpen) != null ? _ref1.dispose() : void 0;
    };

    return DeviceConfigurationDirective;

  })(base.BaseDirective);
  return exports = {
    DeviceConfigurationDirective: DeviceConfigurationDirective
  };
});
