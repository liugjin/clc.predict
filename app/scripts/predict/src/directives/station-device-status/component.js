// Generated by IcedCoffeeScript 108.0.13

/*
* File: station-device-status-directive
* User: David
* Date: 2019/12/23
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var StationDeviceStatusDirective, exports;
  StationDeviceStatusDirective = (function(_super) {
    __extends(StationDeviceStatusDirective, _super);

    function StationDeviceStatusDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.addZero = __bind(this.addZero, this);
      this.getDeviceSignal = __bind(this.getDeviceSignal, this);
      this.show = __bind(this.show, this);
      this.id = "station-device-status";
      StationDeviceStatusDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    StationDeviceStatusDirective.prototype.setScope = function() {};

    StationDeviceStatusDirective.prototype.setCSS = function() {
      return css;
    };

    StationDeviceStatusDirective.prototype.setTemplate = function() {
      return view;
    };

    StationDeviceStatusDirective.prototype.show = function(scope, element, attrs) {
      scope.station.model.runNumber = '00';
      scope.station.model.offLineNumber = '00';
      scope.station.model.alarmNumber = '00';
      scope.station.model.forecastNumber = '00';
      scope.runEquipment = [];
      scope.offLineEquipment = [];
      scope.alarmEquipment = [];
      scope.forecastEquipment = [];
      scope.equipSubscription = {};
      console.log("打印当前站点", scope.station);
      return scope.station.loadEquipments(null, null, (function(_this) {
        return function(err, equipments) {
          _this.getDeviceSignal(scope, equipments, 'communication-status', scope.runEquipment, scope.offLineEquipment, 'runState', 'runNumber', 'offLineNumber');
          return _this.getDeviceSignal(scope, equipments, 'alarm-status', scope.alarmEquipment, scope.forecastEquipment, "alarmState", 'forecastNumber', 'alarmNumber');
        };
      })(this));
    };

    StationDeviceStatusDirective.prototype.getDeviceSignal = function(scope, equipments, signalID, deviceArr1, deviceArr2, setValue, siteValue1, siteValue2) {
      var filter, str, _ref;
      filter = {
        user: scope.project.model.user,
        project: scope.project.model.project,
        station: scope.station.model.station,
        equipment: '+',
        signal: signalID
      };
      str = scope.station.key + "-" + signalID;
      if ((_ref = scope.equipSubscription[str]) != null) {
        _ref.dispose();
      }
      return scope.equipSubscription[str] = this.commonService.signalLiveSession.subscribeValues(filter, (function(_this) {
        return function(err, d) {
          var equipment, _i, _j, _len, _len1;
          if (d && d.message) {
            for (_i = 0, _len = equipments.length; _i < _len; _i++) {
              equipment = equipments[_i];
              if (equipment.model.equipment === d.message.equipment) {
                equipment.model[setValue] = d.message.value;
              }
            }
            deviceArr1.splice(0, deviceArr1.length);
            deviceArr2.splice(0, deviceArr2.length);
            for (_j = 0, _len1 = equipments.length; _j < _len1; _j++) {
              equipment = equipments[_j];
              if (equipment.model[setValue] === 1) {
                deviceArr1.push(equipment);
              }
              if (equipment.model[setValue] === 0) {
                deviceArr2.push(equipment);
              }
            }
            scope.station.model[siteValue1] = _this.addZero(deviceArr1.length);
            return scope.station.model[siteValue2] = _this.addZero(deviceArr2.length);
          }
        };
      })(this));
    };

    StationDeviceStatusDirective.prototype.addZero = function(num) {
      if (parseInt(num < 10 && parseInt(num >= 0))) {
        num = '0' + num;
      }
      return num;
    };

    StationDeviceStatusDirective.prototype.resize = function(scope) {};

    StationDeviceStatusDirective.prototype.dispose = function(scope) {
      return _.map(scope.equipSubscription, (function(_this) {
        return function(value, key) {
          return value != null ? value.dispose() : void 0;
        };
      })(this));
    };

    return StationDeviceStatusDirective;

  })(base.BaseDirective);
  return exports = {
    StationDeviceStatusDirective: StationDeviceStatusDirective
  };
});
