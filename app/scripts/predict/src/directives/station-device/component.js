// Generated by IcedCoffeeScript 108.0.11

/*
* File: station-device-directive
* User: David
* Date: 2020/02/18
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var StationDeviceDirective, exports;
  StationDeviceDirective = (function(_super) {
    __extends(StationDeviceDirective, _super);

    function StationDeviceDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.equipmentSort = __bind(this.equipmentSort, this);
      this.setData = __bind(this.setData, this);
      this.getColor = __bind(this.getColor, this);
      this.getColor2 = __bind(this.getColor2, this);
      this.show = __bind(this.show, this);
      this.id = "station-device";
      StationDeviceDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    StationDeviceDirective.prototype.setScope = function() {};

    StationDeviceDirective.prototype.setCSS = function() {
      return css;
    };

    StationDeviceDirective.prototype.setTemplate = function() {
      return view;
    };

    StationDeviceDirective.prototype.show = function(scope, element, attrs) {
      scope.mySwiper = new Swiper('.swiper-container', {
        slidesPerView: 'auto',
        spaceBetween: 15,
        freeMode: true,
        loop: false,
        observer: true,
        observeParents: true,
        normalizeSlideIndex: false,
        centeredSlides: false,
        preventDefault: true
      });
      this.setData(scope);
      scope.equipAlarmSubscribe = {};
      scope.inverterImg = this.getComponentPath('images/inverter.svg');
      scope.motorImg = this.getComponentPath('images/motor.svg');
      scope.switchboxImg = this.getComponentPath('images/switch-box.svg');
      scope.transformerImg = this.getComponentPath('images/transformer.svg');
      return scope.typeImages = {};
    };

    StationDeviceDirective.prototype.getColor2 = function(scope, item) {
      var filter, _ref;
      item.severity = 0;
      filter = scope.project.getIds();
      filter.station = (_ref = scope.station) != null ? _ref.model.station : void 0;
      filter.equipment = item.model.equipment;
      filter.signal = '_alarms';
      return scope.equipAlarmSubscribe[item.key] = this.commonService.signalLiveSession.subscribeValues(filter, (function(_this) {
        return function(err, d) {
          if (d.message.value > 0) {
            return item.severityColor = '#f44336';
          }
        };
      })(this));
    };

    StationDeviceDirective.prototype.getColor = function(scope, item) {
      var filter, signal, signals, _i, _len, _ref, _results;
      signals = ["communication-status", "_alarms"];
      item.severity = 0;
      filter = scope.project.getIds();
      filter.station = (_ref = scope.station) != null ? _ref.model.station : void 0;
      filter.equipment = item.model.equipment;
      _results = [];
      for (_i = 0, _len = signals.length; _i < _len; _i++) {
        signal = signals[_i];
        filter.signal = signal;
        _results.push(this.commonService.signalLiveSession.subscribeValues(filter, (function(_this) {
          return function(err, d) {
            var _ref1, _ref2, _ref3, _ref4;
            if (d == null) {

            } else {
              if (d.message.severity > item.severity) {
                item.severity = d.message.severity;
              }
              if (signal === "_alarms") {
                if (item.severity > 0) {
                  return item.severityColor = (_ref1 = scope.project) != null ? (_ref2 = _ref1.dictionary) != null ? (_ref3 = _ref2.eventseverities) != null ? (_ref4 = _ref3.getItem(item.severity)) != null ? _ref4.model.color : void 0 : void 0 : void 0 : void 0;
                }
              }
            }
          };
        })(this)));
      }
      return _results;
    };

    StationDeviceDirective.prototype.setData = function(scope) {
      scope.station.loadEquipments(null, null, (function(_this) {
        return function(err, equipments) {
          var item, _i, _len, _ref;
          equipments.sort(_this.equipmentSort("index"));
          scope.spliceArr = _.filter(_.clone(equipments), function(item) {
            return item.model.type !== '_station_management';
          });
          _ref = scope.spliceArr;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            item = _ref[_i];
            _this.getColor2(scope, item);
            switch (item.model.type) {
              case 'inverter':
                item.model.typeImg = scope.inverterImg;
                break;
              case 'motor':
                item.model.typeImg = scope.motorImg;
                break;
              case 'switch-box':
                item.model.typeImg = scope.switchboxImg;
                break;
              case 'transformer':
                item.model.typeImg = scope.transformerImg;
            }
          }
          return setTimeout(function() {
            return $("#swiperBox").attr('style', 'visibility:visible');
          }, 1000);
        };
      })(this), true);
      return scope.clickDevicn = (function(_this) {
        return function(deviceData) {
          return window.location.hash = "#/device-details/" + scope.project.model.user + "/" + scope.project.model.project + "/" + scope.station.model.station + "/" + deviceData.model.equipment;
        };
      })(this);
    };

    StationDeviceDirective.prototype.equipmentSort = function(key) {
      return (function(_this) {
        return function(a, b) {
          var value1, value2;
          value1 = a.model[key];
          value2 = b.model[key];
          return value1 - value2;
        };
      })(this);
    };

    StationDeviceDirective.prototype.getComponentPath = function(path) {
      var script, scripts;
      scripts = document.getElementsByTagName("script");
      script = _.find(scripts, (function(_this) {
        return function(sp) {
          return sp.src.indexOf("/" + _this.id) > 0 && sp.src.indexOf("/" + _this.id + "-") < 0 && sp.src.indexOf("/component.js") > 0;
        };
      })(this));
      return (script != null ? script.src : void 0) + "/../" + path;
    };

    StationDeviceDirective.prototype.resize = function(scope) {
      var item, _i, _len, _ref, _results;
      console.log(scope.mySwiper);
      _ref = scope.mySwiper;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        _results.push(item.update());
      }
      return _results;
    };

    StationDeviceDirective.prototype.dispose = function(scope) {
      return _.mapObject(scope.equipAlarmSubscribe, (function(_this) {
        return function(item) {
          return item.dispose();
        };
      })(this));
    };

    return StationDeviceDirective;

  })(base.BaseDirective);
  return exports = {
    StationDeviceDirective: StationDeviceDirective
  };
});
