// Generated by IcedCoffeeScript 108.0.11

/*
* File: graphic-box-directive
* User: David
* Date: 2018/11/16
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment", "jquery.ui"], function(base, css, view, _, moment) {
  var Graphic2BoxDirective, exports;
  Graphic2BoxDirective = (function(_super) {
    __extends(Graphic2BoxDirective, _super);

    function Graphic2BoxDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "graphic-box";
      Graphic2BoxDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    Graphic2BoxDirective.prototype.setScope = function() {
      return {
        templateId: "=",
        noBorderStyle: "="
      };
    };

    Graphic2BoxDirective.prototype.setCSS = function() {
      return css;
    };

    Graphic2BoxDirective.prototype.applyChange = function() {
      return (function(_this) {
        return function() {
          return scope.$applyAsync();
        };
      })(this);
    };

    Graphic2BoxDirective.prototype.setTemplate = function() {
      return view;
    };

    Graphic2BoxDirective.prototype.show = function(scope, element, attrs) {
      var ele, faultObj, html, initializeGraphicOptions, initializeView, level, reg, tempSrc;
      if (!scope.firstload) {
        return;
      }
      tempSrc = '';
      level = '';
      reg = /replace">[\s\S]+</g;
      this.commonService.loadEquipmentById(scope.station, this.$routeParams.equipment, (function(_this) {
        return function(err, equip) {
          return equip != null ? equip.loadProperties(null, function(err, properties) {
            var _ref;
            scope.equipment = equip;
            return scope.knowledge_base = JSON.parse(((_ref = scope.equipment.propertyValues) != null ? _ref._knowledge_base : void 0) || '{}');
          }) : void 0;
        };
      })(this));
      faultObj = {
        "abrasion": "svg-image-6",
        "deposit": "svg-image-2",
        "fall": "svg-image-5",
        "fixture": "svg-image-1",
        "short": "svg-image-3",
        "arrester-fault": "svg-image-18",
        "breaker-fault": "svg-image-2",
        "busbar-fault": "svg-image-3",
        "cable-fault": "svg-image-5",
        "current-transformer-fault": "svg-image-6",
        "earthing-switch-fault": "svg-image-7",
        "static-contact-fault": "svg-image-8",
        "ash": "svg-image-20",
        "capacitance-aging": "svg-image-19",
        "control-board-ash": "svg-image-23",
        "fan-aging": "svg-image-22",
        "oxidation": "svg-image-1",
        "switch-tube": "svg-image-2",
        "coil-fault": "svg-image-18",
        "cool-oil-fault": "svg-image-2",
        "high-tension-fault": "svg-image-3",
        "iron-core-fault": "svg-image-4",
        "structure-fault": "svg-image-6"
      };
      if (scope.parameters.templateId) {
        scope.templateId = {
          user: this.$routeParams.user,
          project: this.$routeParams.project,
          template: scope.parameters.templateId
        };
      }
      initializeView = (function(_this) {
        return function() {
          scope.placeholder = $('#element-placeholder');
          scope.placeholder.draggable();
          scope.placeholderSize = {
            width: scope.placeholder.width(),
            height: scope.placeholder.height(),
            width2: scope.placeholder.width() / 2,
            height2: scope.placeholder.height() / 2
          };
          scope.popover = $('#element-placeholder-popover');
          return scope.viewerPosition = $('#player').offset();
        };
      })(this);
      initializeGraphicOptions = (function(_this) {
        return function() {
          var _ref, _ref1, _ref2, _ref3, _ref4;
          return scope.graphicOptions = {
            engineOptions: {
              parameters: _this.$routeParams
            },
            renderOptions: {
              editable: false,
              type: (_ref = (_ref1 = _this.$routeParams.renderer) != null ? _ref1 : (_ref2 = _this.$rootScope) != null ? _ref2.renderType : void 0) != null ? _ref : 'snapsvg',
              uploadUrl: typeof window !== "undefined" && window !== null ? (_ref3 = window.setting) != null ? (_ref4 = _ref3.urls) != null ? _ref4.uploadUrl : void 0 : void 0 : void 0
            }
          };
        };
      })(this);
      scope.movePlaceholderToElement = function(element) {
        var box, x, y;
        if (!element) {
          return;
        }
        box = element._geometry.node.getBoundingClientRect();
        x = box.left + box.width / 2 - scope.placeholderSize.width / 2;
        y = box.top + box.height / 2 - scope.placeholderSize.height / 2;
        scope.placeholder.offset({
          left: x,
          top: y
        });
      };
      scope.applyChange = function() {
        if (!scope.$$phase) {
          return scope.$apply();
        }
      };
      scope.initializePlaceholder = (function(_this) {
        return function() {
          var filter, template, topic, updatePlaceholder, _ref, _ref1;
          template = scope.template;
          if ((_ref = scope.selectSubscribe) != null) {
            _ref.dispose();
          }
          scope.selectSubscribe = _this.commonService.subscribeEventBus('select', function(d) {
            var mode;
            console.log(d);
            element = scope.template.elements[faultObj[d.message.data.signalID] || ''];

            /*if d.message.data.signalID is 'abrasion'
              element = scope.template.elements["svg-image-6"]
            else if d.message.data.signalID is 'deposit'
              element = scope.template.elements["svg-image-2"]
             */
            mode = template.getPropertyValue('placeholder-mode');
            if (mode === 'element' && (element != null ? element.getPropertyValue('tooltip') : void 0)) {
              level = 'level' + Math.floor(parseInt(element.propertyValues['channel1'] || 0) / 25 + 1);
              if (level === 'level5') {
                level = 'level4';
              }
              if (element != null) {
                element.setPropertyValue('tooltip', element != null ? element.getPropertyValue('tooltip').replace(reg, 'replace">' + scope.knowledge_base[d.message.data.signalID][level] + '<') : void 0);
              }
              scope.movePlaceholderToElement(element);
            }
            return scope.element = element != null ? element : template;
          });
          scope.predictSubscribe = {};
          topic = "" + scope.controller.$routeParams.user + "/" + scope.controller.$routeParams.project + "/" + scope.controller.$routeParams.station + "/" + scope.controller.$routeParams.equipment;
          filter = {
            user: scope.controller.$routeParams.user,
            project: scope.controller.$routeParams.project,
            station: scope.controller.$routeParams.station,
            equipment: scope.controller.$routeParams.equipment
          };
          if ((_ref1 = scope.predictSubscribe[topic]) != null) {
            _ref1.dispose();
          }
          scope.predictSubscribe[topic] = _this.commonService.signalLiveSession.subscribeValues(filter, function(err, d) {
            var _ref2;
            if ((_ref2 = d.message.signal, __indexOf.call(Object.keys(faultObj), _ref2) >= 0) && (d.message.severity > 0) && (d.message.mode === 'event')) {
              return setTimeout(function() {
                var mode;
                element = scope.template.elements[faultObj[d.message.signal]];
                mode = template.getPropertyValue('placeholder-mode');
                if (mode === 'element' && (element != null ? element.getPropertyValue('tooltip') : void 0)) {
                  level = 'level' + Math.floor(parseInt(element.propertyValues['channel1'] || 0) / 25 + 1);
                  if (level === 'level5') {
                    level = 'level4';
                  }
                  if (element != null) {
                    element.setPropertyValue('tooltip', element != null ? element.getPropertyValue('tooltip').replace(reg, 'replace">' + scope.knowledge_base[d.message.signal][level] + '<') : void 0);
                  }
                  scope.movePlaceholderToElement(element);
                }
                scope.element = element != null ? element : template;
                return scope.applyChange();
              }, 2000);
            }
          });
          updatePlaceholder = function() {
            var height, image, mode, width, x, y;
            image = template.getPropertyValue('placeholder-image');
            x = template.getPropertyValue('placeholder-x', 50);
            y = template.getPropertyValue('placeholder-y', 50);
            width = template.getPropertyValue('placeholder-width', 20);
            height = template.getPropertyValue('placeholder-height', 20);
            scope.placeholderMode = mode = template.getPropertyValue('placeholder-mode', 'dynamic');
            scope.timelineEnable = template.getPropertyValue('timeline-enable', false);
            css = {
              left: x,
              top: y,
              width: width,
              height: height
            };
            css['background-image'] = image ? "url(" + scope.controller.setting.urls.uploadUrl + "/" + image + ")" : "url(/visualization/res/img/popover.gif)";
            scope.placeholder.css(css);
            if (mode === 'none') {
              scope.placeholder.hide();
            } else if (mode === 'dynamic' || mode === 'element') {
              scope.placeholder.draggable('enable');
              scope.placeholder.show();
            } else {
              scope.placeholder.draggable('disable');
              scope.placeholder.show();
            }
            return scope.placeholderSize = {
              x: x,
              y: y,
              width: width,
              height: height,
              width2: width / 2,
              height2: height / 2
            };
          };
          template.subscribePropertiesValue(['placeholder-image', 'placeholder-x', 'placeholder-y', 'placeholder-width', 'placeholder-height', 'placeholder-mode'], function(d) {
            conosle.log("hello", d);
            return updatePlaceholder();
          }, 100);
          return updatePlaceholder();
        };
      })(this);
      scope.onElementChanged = function() {
        return function(err, d) {
          if (err) {
            return console.log(err);
          }
        };
      };
      scope.onTemplateLoad = (function(_this) {
        return function() {
          return function(err, template) {
            var item, _ref, _ref1;
            if (err) {
              console.log(err);
            }
            if (!template) {
              return;
            }
            for (item in template.elements) {
              if ((_ref = template.elements[item]._geometry.node.querySelector("image")) != null) {
                _ref.setAttribute('id', item);
              }
              if ((_ref1 = template.elements[item]._geometry.node.querySelector("image")) != null) {
                _ref1.onmouseover = function(i) {
                  var imgItem, key, _i, _len, _ref2, _ref3, _results;
                  _ref2 = template.model.parameters;
                  _results = [];
                  for (key = _i = 0, _len = _ref2.length; _i < _len; key = ++_i) {
                    imgItem = _ref2[key];
                    if (imgItem.id === i.target.id) {
                      tempSrc = template.elements[i.target.id].template.elements[item];
                      template.elements[i.target.id].setPropertyValue("src", template.model.parameters[key].value);
                      _results.push((_ref3 = template.elements[i.target.id]._geometry.node.querySelector("image")) != null ? _ref3.onmouseout = function(e) {
                        return template.elements[e.target.id].setPropertyValue("src", tempSrc);
                      } : void 0);
                    } else {
                      _results.push(void 0);
                    }
                  }
                  return _results;
                };
              }
            }
            scope.element = scope.template = template;
            console.log("" + (new Date().toISOString()) + " load template " + template.id);
            scope.templateParameters = null;
            scope.initializePlaceholder();
            return template.subscribe(function(d) {
              var mode;
              element = d.element;
              mode = template.getPropertyValue('placeholder-mode');
              if (mode === 'element' && (element != null ? element.getPropertyValue('tooltip') : void 0)) {
                level = 'level' + Math.floor(parseInt(element.propertyValues['channel1'] || 0) / 25 + 1);
                if (level === 'level5') {
                  level = 'level4';
                }
                if (element != null) {
                  element.setPropertyValue('tooltip', element != null ? element.getPropertyValue('tooltip').replace(reg, 'replace">' + scope.knowledge_base[element.propertyValues['channel4']][level] + '<') : void 0);
                }
                scope.movePlaceholderToElement(element);
              }
              scope.element = element != null ? element : template;
              return scope.applyChange();
            }, 'select', 100);
          };
        };
      })(this);
      html = '<div class=\'box-hexagon\'>\n  <div class=\'{{parameters.noBorderStyle?"":"big-box-border-top"}}\'></div>\n  <div class=\'{{parameters.noBorderStyle?"":"box-content"}} max-height\'>\n    <div id="player" ng-dblclick="controller.showPopover($event)" >\n        <div graphic-player="graphic-player" options="graphicOptions" template-id="templateId"\n             controller="controller" on-template-load="onTemplateLoad()"\n             on-element-changed="onElementChanged()" parameters="parameters"\n             class="graphic-viewer"></div>\n        <div id="element-placeholder" ng-show=\'placeholderMode != "none"\'\n           data-activates="placeholder-menu" md-dropdown="md-dropdown" data-hover="false" data-beloworigin="true"\n           title2="信息窗口">\n          <div id="element-placeholder-popover" style="width:100%; height:100%;" ng-click2="togglePopover($event)"\n               element-popover="element-popover" data-style="inverse"\n               data-title="{{element.propertyValues.name || controller.element.id}}"\n               element="element" controller="controller" data-trigger="manual" data-placement="auto"\n               data-closeable="true" data-dismissible="false" data-animation="fade"\n               title2="信息展示：在选中项前双击即可弹出信息窗口"></div>\n        </div>\n    </div>\n  </div>\n  <div class=\'{{parameters.noBorderStyle?"":"big-box-border-bottom"}}\'></div>\n</div>';
      initializeGraphicOptions();
      initializeView();
      ele = this.$compile(html)(scope);
      element.find("#graphic").empty();
      element.find("#graphic").append(ele);
      return scope.$watch("parameters.templateId", (function(_this) {
        return function(templateId) {
          if (!templateId) {
            return;
          }
          scope.templateId = {
            user: _this.$routeParams.user,
            project: _this.$routeParams.project,
            template: scope.parameters.templateId,
            parameters: scope.parameters.templateParameters
          };
          initializeGraphicOptions();
          return initializeView();
        };
      })(this));
    };

    Graphic2BoxDirective.prototype.resize = function(scope) {};

    Graphic2BoxDirective.prototype.dispose = function(scope) {
      var _ref;
      if ((_ref = scope.selectSubscribe) != null) {
        _ref.dispose();
      }
      return _.map(scope.predictSubscribe, function(item) {
        return item.dispose();
      });
    };

    return Graphic2BoxDirective;

  })(base.BaseDirective);
  return exports = {
    Graphic2BoxDirective: Graphic2BoxDirective
  };
});
