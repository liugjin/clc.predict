// Generated by IcedCoffeeScript 108.0.13

/*
* File: comp-workplan-directive
* User: James
* Date: 2019/11/20
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var CompWorkplanDirective, exports;
  CompWorkplanDirective = (function(_super) {
    __extends(CompWorkplanDirective, _super);

    function CompWorkplanDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.createProcessTemplate = __bind(this.createProcessTemplate, this);
      this.loadShift = __bind(this.loadShift, this);
      this.init = __bind(this.init, this);
      this.loadGroup = __bind(this.loadGroup, this);
      this.deleteShift = __bind(this.deleteShift, this);
      this.saveShift = __bind(this.saveShift, this);
      this.warpShifts = __bind(this.warpShifts, this);
      this.show = __bind(this.show, this);
      this.id = "comp-workplan";
      CompWorkplanDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
      this.allUsers = [];
      this.allShifts = [];
      this.groupService = commonService.modelEngine.modelManager.getService("groups");
      this.shiftService = commonService.modelEngine.modelManager.getService("shifts");
      this.processService = commonService.modelEngine.modelManager.getService("processes");
    }

    CompWorkplanDirective.prototype.setScope = function() {};

    CompWorkplanDirective.prototype.setCSS = function() {
      return css;
    };

    CompWorkplanDirective.prototype.setTemplate = function() {
      return view;
    };

    CompWorkplanDirective.prototype.show = function(scope, element, attrs) {
      var checkTime, defaultVal, formatToStr, setGlDatePicker, today, widths, _ref;
      this.init(scope);
      scope.allGroups = [];
      scope.workcontentIndex = null;
      scope.selectedWorkconItem = null;
      scope.workcontentNode = this.getComponentPath('images/startnode.png');
      scope.workcontentEndNode = this.getComponentPath('images/endnode.png');
      scope.workRoute = [];
      scope.current = defaultVal = {
        weekdays: {
          Mon: true,
          Tue: true,
          Wed: true,
          Thu: true,
          Fri: true,
          Sta: true,
          Sun: true
        },
        jobs: [
          {
            job: "job-1",
            name: "任务-1",
            crons: [
              {
                type: "on"
              }
            ],
            tasks: [
              {
                type: "",
                process: ""
              }
            ]
          }
        ],
        month: moment().add("months", 1).format("YYYY-MM"),
        visible: true,
        enable: true
      };
      scope.current.group = "";
      scope.weekdays = [
        {
          name: '周一',
          key: 'Mon',
          chkstatus: true
        }, {
          name: '周二',
          key: 'Tue',
          chkstatus: true
        }, {
          name: '周三',
          key: 'Wed',
          chkstatus: true
        }, {
          name: '周四',
          key: 'Thu',
          chkstatus: true
        }, {
          name: '周五',
          key: 'Fri',
          chkstatus: true
        }, {
          name: '周六',
          key: 'Sta',
          chkstatus: true
        }, {
          name: '周日',
          key: 'Sun',
          chkstatus: true
        }
      ];
      scope.textinfo = {
        btns: [
          {
            title: "删除",
            show: true,
            icon: "delete_forever"
          }, {
            title: "取消",
            show: false,
            icon: "cancel"
          }, {
            title: "保存",
            show: true,
            icon: "save"
          }, {
            title: "新增",
            show: true,
            icon: "note_add"
          }
        ]
      };
      scope.editState = true;
      today = moment().format("YYYY-MM-DD");
      scope.selectNodeId = null;
      scope.selectSignalNodeId = null;
      scope.memberList = [];
      scope.groupInfo = {
        shift: "",
        name: "",
        onTime: moment().format("HH:mm"),
        offTime: "",
        startTime: moment().format("YYYY-MM-DD"),
        endTime: moment().add(1, "years").format("YYYY-MM-DD"),
        desc: "",
        engineers: [],
        addUser: ""
      };
      widths = [0, 0];
      setGlDatePicker = function(element, value) {
        if (!value) {
          return;
        }
        return setTimeout((function(_this) {
          return function() {
            var gl;
            return gl = $(element).glDatePicker({
              dowNames: ["日", "一", "二", "三", "四", "五", "六"],
              monthNames: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"],
              selectedDate: moment(value).toDate(),
              onClick: function(target, cell, date, data) {
                return target.val(moment(date).format("YYYY-MM-DD")).trigger("change");
              }
            });
          };
        })(this), 500);
      };
      setGlDatePicker($('.datepickerInput')[0], today);
      setGlDatePicker($('.datepickerInput')[1], today);
      scope.setDrop = (function(_this) {
        return function(type) {
          var resize;
          if (type === 0) {
            resize = $($('.datepickerInput')[0]).offset();
            if (widths[0] === 0) {
              widths[0] = $($('.datepickerInput')[0]).outerWidth();
            }
            $($('.gldp-default')[0]).css({
              "left": resize.left + "px",
              "width": (widths[0] + 5) + "px",
              "top": (resize.top + 40) + "px",
              "position": "absolute",
              "text-align": "center"
            });
          } else {
            resize = $($('.datepickerInput')[1]).offset();
            if (widths[1] === 0) {
              widths[1] = $($('.datepickerInput')[1]).outerWidth();
            }
            $($('.gldp-default')[1]).css({
              "left": resize.left + "px",
              "width": (widths[1] + 5) + "px",
              "top": (resize.top + 40) + "px",
              "position": "absolute",
              "text-align": "center"
            });
          }
          return $('.core').css({
            "display": "inline-block"
          });
        };
      })(this);
      checkTime = (function(_this) {
        return function(startTime, endTime) {
          return moment(startTime).valueOf() > moment(endTime).valueOf();
        };
      })(this);
      formatToStr = function(time) {
        var arr;
        arr = [time.getHours(), time.getMinutes(), "00"];
        arr = _.map(arr, function(d) {
          if (d === 0) {
            return "00";
          }
          return d;
        });
        return arr.join(":");
      };
      scope.btnClick = (function(_this) {
        return function(type) {
          var childGroups, editObj, reg, regExp, tmpName, tmpWeekDays, x, _i, _len, _ref;
          if (type === 2) {
            if (_.isEmpty(scope.groupInfo.shift)) {
              _this.display("温馨提示：请输入不超过20数字字符、字母或-！");
              return;
            }
            if (_.isEmpty(scope.groupInfo.name)) {
              _this.display("温馨提示：请输入工班名称！");
              return;
            }
            tmpName = scope.groupInfo.name.replace(/\s+/g, "");
            if (!(tmpName.length > 0) || tmpName.length > 20) {
              _this.display("温馨提示：请输入小于20个字的工班名称！");
              return;
            }
            if (!scope.editState) {
              if (_this.current.creator.id !== scope.$root.user.user) {
                _this.display("温馨提示：创建该任务的人才有权限修改！！");
                return;
              }
            }
            if (scope.groupInfo.shift === "" || scope.groupInfo.name === "") {
              M.toast({
                html: '温馨提示：工班ID/工班名称不可为空！！'
              });
              return;
            }
            if (checkTime(scope.groupInfo.startTime, scope.groupInfo.endTime)) {
              M.toast({
                html: '温馨提示：计划开始时间不可晚于计划结束时间！！'
              });
              return;
            }
            if (scope.editState) {
              childGroups = _.find(_this.allShifts, function(d) {
                return d.shift === scope.groupInfo.shift;
              });
              if (childGroups) {
                _this.display("温馨提示：该ID已被占用！！");
                return;
              }
            }
            reg = /^((20|21|22|23|[0-1]\d):[0-5]\d)|((20|21|22|23|[0-1]\d):[0-5]\d:[0-5]\d)$/;
            regExp = new RegExp(reg);
            if (!regExp.test(scope.groupInfo.onTime)) {
              _this.display("温馨提示：时间不能为空，请查证！");
              return;
            }
            tmpWeekDays = _.filter(scope.weekdays, function(item) {
              return item.chkstatus;
            });
            if (!(tmpWeekDays.length > 0)) {
              _this.display("温馨提示：周天不能为空，请查证！");
              return;
            }
            if (scope.memberList.length < 1) {
              _this.display("温馨提示：请选择班组成员！");
              return;
            }
            _this.current = {
              shift: scope.groupInfo.shift,
              name: scope.groupInfo.name.replace(/\s+/g, ""),
              desc: scope.groupInfo.desc,
              engineers: scope.memberList,
              startTime: scope.groupInfo.startTime,
              endTime: scope.groupInfo.endTime,
              onTime: scope.groupInfo.onTime
            };
            editObj = _.find(_this.allShifts, function(d) {
              return d.shift === _this.current.shift;
            });
            if (editObj) {
              _ref = ["_index", "_id", "project", "user"];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                x = _ref[_i];
                _this.current[x] = editObj[x];
              }
            } else {
              _this.current = _.extend(scope.project.getIds(), _this.current);
            }
            _this.current = _.extend(_this.current, defaultVal);
            return _this.saveShift(scope);
          } else if (type === 3) {
            scope.selectNodeId = null;
            scope.memberList = [];
            scope.workRoute = [];
            scope.editState = true;
            scope.weekdays = [
              {
                name: '周一',
                key: 'Mon',
                chkstatus: true
              }, {
                name: '周二',
                key: 'Tue',
                chkstatus: true
              }, {
                name: '周三',
                key: 'Wed',
                chkstatus: true
              }, {
                name: '周四',
                key: 'Thu',
                chkstatus: true
              }, {
                name: '周五',
                key: 'Fri',
                chkstatus: true
              }, {
                name: '周六',
                key: 'Sta',
                chkstatus: true
              }, {
                name: '周日',
                key: 'Sun',
                chkstatus: true
              }
            ];
            scope.selectedEquipSignalList = [];
            return scope.groupInfo = {
              shift: _this.getUniqueName(scope.shiftList, "plan", 'shift', 1),
              name: _this.getUniqueName(scope.shiftList, "巡检工单", 'name', 1),
              onTime: moment().format("HH:mm"),
              offTime: "",
              startTime: moment().format("YYYY-MM-DD"),
              endTime: moment().add(1, "years").format("YYYY-MM-DD"),
              desc: "",
              engineers: [],
              addUser: ""
            };
          } else if (type === 0) {
            if (scope.groupInfo.shift !== "") {
              _this.current = {
                shift: scope.groupInfo.shift,
                name: scope.groupInfo.name,
                desc: scope.groupInfo.desc,
                engineers: scope.memberList,
                startTime: scope.groupInfo.startTime,
                endTime: scope.groupInfo.endTime,
                onTime: moment(scope.groupInfo.onTime).format("HH:mm"),
                offTime: moment(scope.groupInfo.offTime).format("HH:mm")
              };
              _this.current = _.extend(_this.current, scope.project.getIds());
              return scope.prompt('温馨提示', '是否确定删除工班 ' + scope.groupInfo.name + "?", function(ok, comment) {
                if (!ok) {
                  return;
                }
                return _this.deleteShift(scope);
              });
            } else {
              return M.toast({
                html: "不可删除空id的表单！！"
              });
            }
          }
        };
      })(this);
      this.loadShift(scope, (function(_this) {
        return function(shifts) {
          return _this.warpShifts(scope, shifts);
        };
      })(this));
      scope.selectShift = (function(_this) {
        return function(index, item) {
          var filter;
          scope.editState = false;
          if (scope.selectNodeId !== index) {
            scope.selectedWorkconItem = null;
            scope.workcontentIndex = null;
            scope.workRoute = [];
            scope.selectNodeId = index;
            _this.current = _.find(_this.allShifts, function(shiftItem) {
              return shiftItem._id === item._id;
            });
            _this.current.startTime = moment(_this.current.startTime).format("YYYY-MM-DD");
            _this.current.endTime = moment(_this.current.endTime).format("YYYY-MM-DD");
            _this.current.creator = item.creator;
            scope.selectNodeId = index;
            scope.groupInfo = _this.current;
            scope.memberList = item.engineers ? item.engineers : [];
            _.mapObject(item.weekdays, function(val, key) {
              var weekdaysObj;
              weekdaysObj = _.find(scope.weekdays, {
                key: key
              });
              return weekdaysObj != null ? weekdaysObj.chkstatus = val : void 0;
            });
            filter = item.jobs[0].tasks[0];
            delete filter["actionType"];
            _.extend(filter, scope.project.getIds());
            _this.processService.query(filter, null, function(err, processDatas) {
              var workContent, workcontentGroup;
              if (processDatas) {
                if (angular.isString(processDatas.nodes[0].contents[0].content)) {
                  workContent = JSON.parse(processDatas.nodes[0].contents[0].content);
                } else {
                  workContent = processDatas.nodes[0].contents[0].content;
                }
                if (!_.isEmpty(workContent.content)) {
                  if (workContent.content.length > 0) {
                    scope.workcontentIndex = 0;
                    scope.selectedWorkconItem = workContent.content[0];
                    workcontentGroup = _.groupBy(workContent.content, function(item) {
                      return item.stationName + "." + item.equipName;
                    });
                    _.mapObject(workcontentGroup, function(val, key) {
                      var titleContent, valItem, _i, _len;
                      titleContent = "\n ";
                      for (_i = 0, _len = val.length; _i < _len; _i++) {
                        valItem = val[_i];
                        titleContent += valItem.signalName + "\n";
                      }
                      return scope.workRoute.push({
                        equipId: key,
                        lists: titleContent,
                        imgurl: scope.workcontentNode
                      });
                    });
                    scope.workRoute[scope.workRoute.length - 1].imgurl = scope.workcontentEndNode;
                  }
                }
                return scope.selectedEquipSignalList = workContent.content;
              }
            });
            return scope.$applyAsync();
          }
        };
      })(this);
      scope.selectWorkcontent = (function(_this) {
        return function(index, item) {
          if (scope.workcontentIndex !== index) {
            scope.workcontentIndex = index;
            return scope.selectedWorkconItem = item;
          }
        };
      })(this);
      scope.selectEquipSignal = (function(_this) {
        return function(index, item) {
          if (scope.selectSignalNodeId !== index) {
            scope.selectSignalNodeId = index;
            return scope.$applyAsync();
          }
        };
      })(this);
      scope.updateMember = (function(_this) {
        return function(index) {
          var addUserObj, hasUser;
          if (typeof index === "number") {
            scope.memberList = _.filter(scope.memberList, function(d) {
              return d.id !== scope.memberList[index].id;
            });
            scope.showAddSelect = false;
            return scope.$applyAsync();
          } else {
            hasUser = _.find(scope.memberList, function(d) {
              return d.id === index;
            });
            addUserObj = _.find(scope.userList, function(d) {
              return d.value === index;
            });
            if (!hasUser && addUserObj) {
              scope.memberList.push({
                name: addUserObj.name,
                title: "employee",
                id: addUserObj.value
              });
              scope.groupInfo.addUser = "";
              return scope.$applyAsync();
            } else {
              return M.toast({
                html: index === "" ? "不可选择空用户！！" : '请选择一个不在班组内的用户！！'
              });
            }
          }
        };
      })(this);
      scope.resetdUserList = (function(_this) {
        return function() {
          var selectGgroup, userOption;
          scope.memberList = [];
          scope.groupInfo.addUser = null;
          selectGgroup = _.find(scope.allGroups, {
            group: scope.current.group
          });
          if (selectGgroup) {
            userOption = _.map(selectGgroup.engineers, function(d) {
              return {
                name: d.name,
                value: d.name
              };
            });
            scope.userList = userOption;
          } else {
            scope.userList = null;
          }
          return scope.$applyAsync();
        };
      })(this);
      scope.saveWorkItems = (function(_this) {
        return function() {
          var checkpointno, tmpEquipSignals, tmpEquipSignalsItem, workcontentGroup, _i, _len;
          tmpEquipSignals = _.filter(scope.equipSignalList, function(item) {
            return item.chkstatus;
          });
          checkpointno = 0;
          for (_i = 0, _len = tmpEquipSignals.length; _i < _len; _i++) {
            tmpEquipSignalsItem = tmpEquipSignals[_i];
            checkpointno++;
            tmpEquipSignalsItem.orderno = checkpointno;
          }
          scope.selectedEquipSignalList = tmpEquipSignals;
          if (!_.isEmpty(scope.selectedEquipSignalList)) {
            if (scope.selectedEquipSignalList.length > 0) {
              scope.workcontentIndex = 0;
              scope.selectedWorkconItem = scope.selectedEquipSignalList[0];
              workcontentGroup = _.groupBy(scope.selectedEquipSignalList, function(item) {
                return item.stationName + "." + item.equipName;
              });
              scope.workRoute = [];
              _.mapObject(workcontentGroup, function(val, key) {
                var titleContent, valItem, _j, _len1;
                titleContent = "\n ";
                for (_j = 0, _len1 = val.length; _j < _len1; _j++) {
                  valItem = val[_j];
                  titleContent += valItem.signalName + "\n";
                }
                return scope.workRoute.push({
                  equipId: key,
                  lists: titleContent,
                  imgurl: scope.workcontentNode
                });
              });
              return scope.workRoute[scope.workRoute.length - 1].imgurl = scope.workcontentEndNode;
            }
          }
        };
      })(this);
      scope.contentMoveup = (function(_this) {
        return function() {
          var k, lastIndex, lastItem, v, workcontentGroup, _ref;
          if (_.isEmpty(scope.selectedWorkconItem)) {
            _this.display("温馨提示：请选择工作内容记录！");
            return;
          }
          if (scope.workcontentIndex !== 0) {
            lastIndex = scope.workcontentIndex - 1;
            lastItem = scope.selectedEquipSignalList[lastIndex];
            scope.selectedEquipSignalList[lastIndex] = scope.selectedWorkconItem;
            scope.selectedEquipSignalList[scope.workcontentIndex] = lastItem;
            scope.workcontentIndex = lastIndex;
            _ref = scope.selectedEquipSignalList;
            for (k in _ref) {
              v = _ref[k];
              if (k !== "_indexOf") {
                v.orderno = parseInt(k) + 1;
              }
            }
            workcontentGroup = _.groupBy(scope.selectedEquipSignalList, function(item) {
              return item.stationName + "." + item.equipName;
            });
            scope.workRoute = [];
            _.mapObject(workcontentGroup, function(val, key) {
              var titleContent, valItem, _i, _len;
              titleContent = "\n ";
              for (_i = 0, _len = val.length; _i < _len; _i++) {
                valItem = val[_i];
                titleContent += valItem.signalName + "\n";
              }
              return scope.workRoute.push({
                equipId: key,
                lists: titleContent,
                imgurl: scope.workcontentNode
              });
            });
            scope.workRoute[scope.workRoute.length - 1].imgurl = scope.workcontentEndNode;
            return scope.$applyAsync();
          }
        };
      })(this);
      scope.contentMovedown = (function(_this) {
        return function() {
          var endIndex, k, nextIndex, nextItem, v, workcontentGroup, _ref;
          if (_.isEmpty(scope.selectedWorkconItem)) {
            _this.display("温馨提示：请选择工作内容记录！");
            return;
          }
          endIndex = scope.selectedEquipSignalList.length - 1;
          if (scope.workcontentIndex !== endIndex) {
            nextIndex = scope.workcontentIndex + 1;
            nextItem = scope.selectedEquipSignalList[nextIndex];
            scope.selectedEquipSignalList[nextIndex] = scope.selectedWorkconItem;
            scope.selectedEquipSignalList[scope.workcontentIndex] = nextItem;
            scope.workcontentIndex = nextIndex;
            _ref = scope.selectedEquipSignalList;
            for (k in _ref) {
              v = _ref[k];
              if (k !== "_indexOf") {
                v.orderno = parseInt(k) + 1;
              }
            }
            workcontentGroup = _.groupBy(scope.selectedEquipSignalList, function(item) {
              return item.stationName + "." + item.equipName;
            });
            scope.workRoute = [];
            _.mapObject(workcontentGroup, function(val, key) {
              var titleContent, valItem, _i, _len;
              titleContent = "\n ";
              for (_i = 0, _len = val.length; _i < _len; _i++) {
                valItem = val[_i];
                titleContent += valItem.signalName + "\n";
              }
              return scope.workRoute.push({
                equipId: key,
                lists: titleContent,
                imgurl: scope.workcontentNode
              });
            });
            scope.workRoute[scope.workRoute.length - 1].imgurl = scope.workcontentEndNode;
            return scope.$applyAsync();
          }
        };
      })(this);
      if ((_ref = scope.checkEquipsSubscription) != null) {
        _ref.dispose();
      }
      scope.checkEquipsSubscription = this.commonService.subscribeEventBus('checkEquips', (function(_this) {
        return function(msg) {
          var equip, equipKey, equipObj, projectIds, signalItme, tmpequips, _i, _j, _len, _len1, _ref1;
          tmpequips = _.filter(msg.message, function(item) {
            return item.level === 'equipment';
          });
          scope.selectedEquips = [];
          scope.equipSignalList = [];
          scope.allSelectStatus = false;
          projectIds = scope.project.getIds();
          for (_i = 0, _len = tmpequips.length; _i < _len; _i++) {
            equip = tmpequips[_i];
            equipKey = projectIds.user + "_" + projectIds.project + "_" + equip.station + "_" + equip.id;
            equipObj = _.find(scope.allEquips, {
              key: equipKey
            });
            if (equipObj) {
              scope.selectedEquips.push(equipObj);
              _ref1 = equipObj.points.items;
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                signalItme = _ref1[_j];
                scope.equipSignalList.push({
                  id: equipObj.model.station + "." + equipObj.model.equipment + "." + signalItme.model.signal,
                  station: equipObj.model.station,
                  stationName: equipObj.model.stationName,
                  equipment: equipObj.model.equipment,
                  equipName: equipObj.model.name,
                  signal: signalItme.model.point,
                  signalName: signalItme.model.name,
                  chkstatus: false
                });
              }
            }
          }
          return scope.$applyAsync();
        };
      })(this));
      scope.selectAllSignals = (function(_this) {
        return function() {
          if (scope.allSelectStatus) {
            _.each(scope.equipSignalList, function(item) {
              return item.chkstatus = true;
            });
          } else {
            _.each(scope.equipSignalList, function(item) {
              return item.chkstatus = false;
            });
          }
          return scope.$applyAsync();
        };
      })(this);
      return this.loadGroup(scope, (function(_this) {
        return function(groups) {
          var groupItem, userOption, _i, _len;
          if (groups) {
            userOption = [];
            for (_i = 0, _len = groups.length; _i < _len; _i++) {
              groupItem = groups[_i];
              _.map(groupItem.engineers, function(d) {
                return userOption.push({
                  name: d.name,
                  value: d.name
                });
              });
            }
            scope.userList = userOption;
            return scope.$applyAsync();
          }
        };
      })(this));
    };

    CompWorkplanDirective.prototype.warpShifts = function(scope, shifts) {
      var shiftOption;
      shiftOption = _.sortBy(shifts, function(item) {
        return -item._index;
      });
      scope.shiftList = shiftOption;
      return scope.$applyAsync();
    };

    CompWorkplanDirective.prototype.saveShift = function(scope) {
      var _ref;
      if ((_.isEmpty(scope.selectedEquipSignalList)) || (((_ref = scope.selectedEquipSignalList) != null ? _ref.length : void 0) < 1)) {
        this.display("温馨提示：工作内容不能为空，请查证！");
        return;
      }
      return this.createProcessTemplate(scope, (function(_this) {
        return function(err, processData) {
          var dayItem, _i, _len, _ref1;
          if (err) {
            _this.display("错误提示：" + err);
            return;
          }
          scope.editState = false;
          _ref1 = scope.weekdays;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            dayItem = _ref1[_i];
            _this.current.weekdays[dayItem.key] = dayItem.chkstatus;
          }
          _this.current.onTime = scope.groupInfo.onTime;
          _this.current.jobs[0].tasks[0] = {
            type: processData.type,
            process: processData.process,
            actionType: "process"
          };
          return _this.shiftService.save(_this.current, function(err, shiftData) {
            var index;
            if (err) {
              return _this.display(err, shiftData);
            } else {
              shiftData.startTime = shiftData.startTime ? moment(shiftData.startTime).format("YYYY-MM-DD") : "";
              shiftData.endTime = shiftData.endTime ? moment(shiftData.endTime).format("YYYY-MM-DD") : "";
              scope.groupInfo = shiftData;
              index = null;
              _.map(scope.shiftList, function(d, i) {
                if (d.shift === shiftData.shift) {
                  return index = i;
                }
              });
              if (_.isNull(index)) {
                scope.shiftList.unshift(shiftData);
                scope.selectNodeId = 0;
              } else {
                scope.shiftList[index] = shiftData;
                scope.selectNodeId = index;
              }
              scope.memberList = shiftData.engineers;
              scope.$applyAsync();
              _this.loadShift(scope, function(shifts) {
                return _this.warpShifts(scope, shifts);
              });
              return _this.display("温馨提示：操作成功！");
            }
          });
        };
      })(this));
    };

    CompWorkplanDirective.prototype.deleteShift = function(scope) {
      return this.shiftService.remove(this.current, (function(_this) {
        return function(err, shiftData) {
          var tmpProcess;
          if (err) {
            return _this.display(err, shiftData);
          } else {
            tmpProcess = scope.project.getIds();
            tmpProcess.process = "plan-" + _this.current.shift;
            _this.processService.remove(tmpProcess, function(err, processData) {});
            scope.selectNodeId = null;
            scope.memberList = [];
            scope.editState = true;
            scope.selectedEquipSignalList = {};
            scope.groupInfo = {
              shift: "",
              name: "",
              onTime: "",
              offTime: "",
              startTime: "",
              endTime: "",
              desc: "",
              engineers: [],
              addUser: ""
            };
            scope.shiftList = _.filter(scope.shiftList, function(d) {
              return d.shift !== shiftData[0].shift;
            });
            scope.$applyAsync();
            return _this.display("温馨提示：操作成功！");
          }
        };
      })(this));
    };

    CompWorkplanDirective.prototype.loadGroup = function(scope, callback) {
      var filter;
      filter = {};
      filter.user = this.$routeParams.user;
      filter.project = this.$routeParams.project;
      return this.groupService.query(filter, 'group name managerName parent engineers', (function(_this) {
        return function(err, groupModels) {
          if (groupModels) {
            scope.allGroups = groupModels;
          }
          return callback(groupModels);
        };
      })(this), true);
    };

    CompWorkplanDirective.prototype.getUniqueName = function(items, prefix, property, index) {
      var item, name, _i, _len;
      if (index == null) {
        index = 1;
      }
      name = "" + prefix + "-" + index;
      if (items) {
        for (_i = 0, _len = items.length; _i < _len; _i++) {
          item = items[_i];
          if (item[property] === name) {
            return this.getUniqueName(items, prefix, property, index + 1);
          }
        }
      }
      return name;
    };

    CompWorkplanDirective.prototype.init = function(scope) {
      var stationItem, tmpStations, _i, _len, _results;
      scope.allEquips = [];
      scope.allSelectStatus = false;
      tmpStations = _.filter(scope.project.stations.items, function(item) {
        return item.model.station.charAt(0) !== "_";
      });
      _results = [];
      for (_i = 0, _len = tmpStations.length; _i < _len; _i++) {
        stationItem = tmpStations[_i];
        _results.push(stationItem.loadEquipments(null, null, function(err, equips) {
          var equip, _j, _len1, _results1;
          if (equips) {
            _results1 = [];
            for (_j = 0, _len1 = equips.length; _j < _len1; _j++) {
              equip = equips[_j];
              if (equip.model.equipment.charAt(0) !== "_") {
                console.info(equip);
                _results1.push(equip.loadPoints(null, (function(_this) {
                  return function(err, signals) {
                    var equipObj;
                    if (signals) {
                      console.info(signals);
                      if (signals.length > 0) {
                        equipObj = signals[0].equipment;
                        equipObj.model.stationName = signals[0].station.model.name;
                        return scope.allEquips.push(signals[0].equipment);
                      }
                    }
                  };
                })(this)));
              } else {
                _results1.push(void 0);
              }
            }
            return _results1;
          }
        }));
      }
      return _results;
    };

    CompWorkplanDirective.prototype.loadShift = function(scope, callback) {
      var filter;
      filter = {};
      return this.commonService.loadProjectModelByService("shifts", filter, null, (function(_this) {
        return function(err, shiftModels) {
          if (shiftModels) {
            _this.allShifts = shiftModels;
          }
          return callback(shiftModels);
        };
      })(this), true);
    };

    CompWorkplanDirective.prototype.createProcessTemplate = function(scope, callback) {
      var filter, processId, processName, selectedEquipSignal, workContents, _i, _len, _ref;
      workContents = [];
      _ref = scope.selectedEquipSignalList;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        selectedEquipSignal = _ref[_i];
        workContents.push({
          orderno: selectedEquipSignal.orderno,
          station: selectedEquipSignal.station,
          stationName: selectedEquipSignal.stationName,
          equipment: selectedEquipSignal.equipment,
          equipName: selectedEquipSignal.equipName,
          signal: selectedEquipSignal.signal,
          signalName: selectedEquipSignal.signalName,
          value: null,
          setvalue: null,
          defect_representation: "",
          defect_reason: "",
          defect_analysis: "",
          loss_situation: "",
          severity: 1,
          status: 0,
          work_status: 0
        });
      }
      processId = "plan-" + scope.groupInfo.shift;
      processName = scope.groupInfo.name + "流程";
      filter = scope.project.getIds();
      filter.process = processId;
      return this.processService.query(filter, null, (function(_this) {
        return function(err, procesDatas) {
          var nodeObj, templateObj;
          if (!(_.isEmpty(procesDatas))) {
            procesDatas.nodes[0].contents[0].content = {
              content: workContents,
              handle_details: [],
              attachments: []
            };
            return _this.processService.save(procesDatas, function(err, processData) {
              return typeof callback === "function" ? callback(err, processData) : void 0;
            });
          } else {
            nodeObj = {
              name: "流程节点1",
              node: "node-1",
              timeout: 0,
              actions: {
                approval: true,
                reject: true,
                forward: true,
                save: true
              },
              contents: [
                {
                  type: "json",
                  content: {
                    content: workContents,
                    handle_details: [],
                    attachments: []
                  }
                }
              ]
            };
            templateObj = {
              name: processName,
              process: processId,
              desc: scope.groupInfo.desc,
              trigger: "shift",
              type: "plan",
              enable: true,
              visible: true,
              cancleable: true,
              priority: 1,
              nodes: []
            };
            templateObj.nodes.push(nodeObj);
            templateObj = _.extend(templateObj, scope.project.getIds());
            return _this.processService.save(templateObj, function(err, processData) {
              return typeof callback === "function" ? callback(err, processData) : void 0;
            });
          }
        };
      })(this), true);
    };

    CompWorkplanDirective.prototype.getUniqueName = function(items, prefix, property, index) {
      var item, name, _i, _len;
      if (index == null) {
        index = 1;
      }
      name = "" + prefix + "-" + index;
      if (items) {
        for (_i = 0, _len = items.length; _i < _len; _i++) {
          item = items[_i];
          if (item[property] === name) {
            return this.getUniqueName(items, prefix, property, index + 1);
          }
        }
      }
      return name;
    };

    CompWorkplanDirective.prototype.resize = function(scope) {};

    CompWorkplanDirective.prototype.dispose = function(scope) {
      var _ref;
      $('.gldp-default').remove();
      return (_ref = scope.checkEquipsSubscription) != null ? _ref.dispose() : void 0;
    };

    return CompWorkplanDirective;

  })(base.BaseDirective);
  return exports = {
    CompWorkplanDirective: CompWorkplanDirective
  };
});
