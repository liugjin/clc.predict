// Generated by IcedCoffeeScript 108.0.13

/*
* File: device-main-signal-directive
* User: David
* Date: 2020/02/20
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var DeviceMainSignalDirective, exports;
  DeviceMainSignalDirective = (function(_super) {
    __extends(DeviceMainSignalDirective, _super);

    function DeviceMainSignalDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.addZero = __bind(this.addZero, this);
      this.getSeverityLabelColor = __bind(this.getSeverityLabelColor, this);
      this.getSeverityColor = __bind(this.getSeverityColor, this);
      this.setDeviceSignal = __bind(this.setDeviceSignal, this);
      this.getDeviceSpecialSignal = __bind(this.getDeviceSpecialSignal, this);
      this.show = __bind(this.show, this);
      this.id = "device-main-signal";
      DeviceMainSignalDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    DeviceMainSignalDirective.prototype.setScope = function() {};

    DeviceMainSignalDirective.prototype.setCSS = function() {
      return css;
    };

    DeviceMainSignalDirective.prototype.setTemplate = function() {
      return view;
    };

    DeviceMainSignalDirective.prototype.show = function(scope, element, attrs) {
      scope.showEquipsFlag = false;
      console.log(scope.equipment);
      scope.signalDataArr = [];
      scope.equipSubscription = {};
      scope.equipmentState = "正常";
      scope.currentOpcSignal = [];
      scope.hidemodal = function() {
        $('#opc-modal').modal('close');
        return scope.$root.loading = false;
      };
      scope.showmodal = function() {
        return $('#opc-modal').modal('open');
      };
      scope.checkSignal = function(sig) {
        WebuiPopovers.hideAll();
        scope.currentOpcSignal = sig;
        scope.chartTitle = sig.equipName + "/" + sig.signalName;
        return $('#opc-modal').modal('open');
      };
      scope.clickStation = (function(_this) {
        return function() {
          return window.location.hash = "#/station-info/" + scope.project.model.user + "/" + scope.project.model.project + "/" + scope.station.model.station;
        };
      })(this);
      this.getDeviceSpecialSignal(scope, "communication-status", null);
      return scope.equipment.loadSignals(null, (function(_this) {
        return function(err, signals) {
          var index, sig, signalData, _i, _len, _results;
          if (signals) {
            index = 0;
            _results = [];
            for (_i = 0, _len = signals.length; _i < _len; _i++) {
              sig = signals[_i];
              if (sig.model.template === scope.equipment.model.template) {
                index++;
                if (index > 6) {

                } else {
                  signalData = {
                    equipName: '',
                    signalName: '',
                    setValue: 0,
                    unit: '',
                    signalID: '',
                    severity: '',
                    severityColor: '',
                    severityLabelColor: ''
                  };
                  signalData.equipName = scope.equipment.model.name;
                  signalData.signalName = sig.model.name;
                  signalData.unit = sig.model.desc;
                  signalData.signalID = sig.model.signal;
                  scope.signalDataArr.push(signalData);
                  _results.push(_this.getDeviceSpecialSignal(scope, sig.model.signal, sig));
                }
              } else {
                _results.push(void 0);
              }
            }
            return _results;
          }
        };
      })(this), true);
    };

    DeviceMainSignalDirective.prototype.getDeviceSpecialSignal = function(scope, signalID, sig) {
      var filter, _ref;
      filter = {
        user: scope.project.model.user,
        project: scope.project.model.project,
        station: scope.station.model.station,
        equipment: scope.equipment.model.equipment,
        signal: signalID
      };
      if ((_ref = scope.equipSubscription[signalID]) != null) {
        _ref.dispose();
      }
      return scope.equipSubscription[signalID] = this.commonService.signalLiveSession.subscribeValues(filter, (function(_this) {
        return function(err, signal) {
          if (signal && signal.message) {
            if (sig != null) {
              sig.setValue(signal.message);
            }
            signal = signal.message;
            return _this.setDeviceSignal(scope, signalID, signal, sig);
          }
        };
      })(this));
    };

    DeviceMainSignalDirective.prototype.setDeviceSignal = function(scope, signalID, signal, sig) {
      var data, _i, _len, _ref, _results;
      if (signalID === "communication-status" && signal.signal === "communication-status") {
        if (signal.value === -1) {
          scope.equipmentState = "离线";
        }
        if (signal.value === 0) {
          return scope.equipmentState = "正常";
        }
      } else {
        _ref = scope.signalDataArr;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          data = _ref[_i];
          if (data.signalID === signal.signal) {
            data.setValue = sig.data.formatValue;
            data.serverity = sig.data.severity;
            data.severityColor = this.getSeverityColor(scope, sig.data.severity);
            _results.push(data.severityLabelColor = this.getSeverityLabelColor(scope, sig.data.severity));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    };

    DeviceMainSignalDirective.prototype.getSeverityColor = function(scope, severity) {
      var color;
      if (severity < 1) {
        return scope.defaultColor;
      }
      color = '#FADB00';
      return color;
    };

    DeviceMainSignalDirective.prototype.getSeverityLabelColor = function(scope, severity) {
      var color;
      if (severity < 1) {
        return scope.defaultColor;
      }
      color = '#F4D601';
      return color;
    };

    DeviceMainSignalDirective.prototype.addZero = function(num) {
      if (parseInt(num) < 10 && parseInt(num) > 0) {
        num = '0' + num;
      }
      return num;
    };

    DeviceMainSignalDirective.prototype.resize = function(scope) {};

    DeviceMainSignalDirective.prototype.dispose = function(scope) {
      return _.map(scope.equipSubscription, (function(_this) {
        return function(value, key) {
          return value != null ? value.dispose() : void 0;
        };
      })(this));
    };

    return DeviceMainSignalDirective;

  })(base.BaseDirective);
  return exports = {
    DeviceMainSignalDirective: DeviceMainSignalDirective
  };
});
