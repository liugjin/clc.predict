// Generated by IcedCoffeeScript 108.0.13

/*
* File: message-feedback-directive
* User: David
* Date: 2020/03/30
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var MessageFeedbackDirective, exports;
  MessageFeedbackDirective = (function(_super) {
    __extends(MessageFeedbackDirective, _super);

    function MessageFeedbackDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "message-feedback";
      MessageFeedbackDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    MessageFeedbackDirective.prototype.setScope = function() {};

    MessageFeedbackDirective.prototype.setCSS = function() {
      return css;
    };

    MessageFeedbackDirective.prototype.setTemplate = function() {
      return view;
    };

    MessageFeedbackDirective.prototype.show = function(scope, element, attrs) {
      var checkFilter, formatData, getEquipmentName, getSignalName, getStationName, getUnit, loadEquipmentAndSignals, _ref, _ref1;
      scope.multiflag = null;
      scope.view = false;
      scope.viewName = "报表11";
      scope.reportName = "高频数据记录表";
      scope.currentItem = null;
      scope.selectSignals = [];
      scope.clickFlag = false;
      scope.query = {
        startTime: '',
        endTime: ''
      };
      scope.headers = [
        {
          headerName: "序号",
          field: "index"
        }, {
          headerName: "项目名称",
          field: "stationName"
        }, {
          headerName: "设备名称",
          field: "equipmentName"
        }, {
          headerName: "故障预测",
          field: "vSignalName"
        }, {
          headerName: "预测值",
          field: "value"
        }, {
          headerName: "备注",
          field: "text"
        }, {
          headerName: "操作人",
          field: "user"
        }, {
          headerName: "采集时间",
          field: "sampleTime"
        }
      ];
      scope.garddatas = [
        {
          index: "",
          stationName: "暂无数据",
          equipmentName: "暂无数据",
          vSignalName: "",
          value: "",
          text: "",
          user: "",
          sampleTime: ""
        }
      ];
      if ((_ref = scope.timeSubscription) != null) {
        _ref.dispose();
      }
      scope.timeSubscription = this.commonService.subscribeEventBus('time', (function(_this) {
        return function(d) {
          scope.query.startTime = moment(d.message.startTime).startOf('day');
          return scope.query.endTime = moment(d.message.endTime).endOf('day');
        };
      })(this));
      if ((_ref1 = scope.selectEquipSubscription) != null) {
        _ref1.dispose();
      }
      scope.selectEquipSubscription = this.commonService.subscribeEventBus('selectEquip', (function(_this) {
        return function(msg) {
          scope.multiflag = false;
          scope.selectedEquips = [msg.message];
          scope.selectedEquips = _.filter(scope.selectedEquips, function(item) {
            return item.level === 'equipment';
          });
          return loadEquipmentAndSignals(scope.selectedEquips, function(data) {
            scope.selectSignals = [scope.signals[0]];
            if (scope.selectSignals.length) {
              return scope.queryReport();
            }
          });
        };
      })(this));
      loadEquipmentAndSignals = (function(_this) {
        return function(equipments, callback) {
          var equip, equipmentId, station, stationId, _i, _len, _results;
          scope.equipments = [];
          scope.signals = [];
          _results = [];
          for (_i = 0, _len = equipments.length; _i < _len; _i++) {
            equip = equipments[_i];
            if (equip.level === 'equipment') {
              stationId = equip.station;
              equipmentId = equip.id;
              _results.push((function() {
                var _j, _len1, _ref2, _results1;
                _ref2 = scope.project.stations.items;
                _results1 = [];
                for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
                  station = _ref2[_j];
                  if ((station != null ? station.model.station : void 0) === stationId) {
                    _results1.push(this.commonService.loadEquipmentById(station, equipmentId, (function(_this) {
                      return function(err, equipment) {
                        if (err) {
                          return console.log("err:", err);
                        }
                        scope.equipments.push(equipment);
                        return equipment.loadSignals(null, function(err, model) {
                          var finalData;
                          if (err) {
                            return console.log("err:", err);
                          }
                          finalData = _.uniq(model);
                          scope.signals = _.filter(finalData, function(sig) {
                            var _ref3;
                            return (_ref3 = sig.model.signal) === 'manual-describe';
                          });
                          return typeof callback === "function" ? callback(true) : void 0;
                        });
                      };
                    })(this)));
                  } else {
                    _results1.push(void 0);
                  }
                }
                return _results1;
              }).call(_this));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        };
      })(this);
      checkFilter = function() {
        if (!scope.selectedEquips || (!scope.selectedEquips.length)) {
          M.toast({
            html: '请选择设备'
          });
          return true;
        }
        if (moment(scope.query.startTime).isAfter(moment(scope.query.endTime))) {
          M.toast({
            html: '开始时间大于结束时间！'
          });
          return true;
        }
        return false;
      };
      scope.filterSig = (function(_this) {
        return function() {
          return function(equipment) {
            var _ref2;
            if ((_ref2 = equipment.model.dataType) === "int" || _ref2 === "float" || _ref2 === "enum" || _ref2 === "string") {
              return true;
            }
            return false;
          };
        };
      })(this);
      scope.queryReport = (function(_this) {
        return function(page, pageItems) {
          var data, filter, paging;
          if (page == null) {
            page = 1;
          }
          if (pageItems == null) {
            pageItems = scope.parameters.pageItems;
          }
          if (checkFilter()) {
            return;
          }
          if (scope.selectSignals[0]) {
            filter = {};
            filter["$or"] = _.map(scope.selectedEquips, function(equip) {
              return {
                station: equip.station,
                equipment: equip.id
              };
            });
            filter.startTime = scope.query.startTime;
            filter.endTime = scope.query.endTime;
            filter.user = scope.selectSignals[0].model.user;
            filter.project = scope.selectSignals[0].model.project;
            filter.signal = scope.selectSignals[0].model.signal;
            filter.mode = {
              "$nin": ["event"]
            };
            paging = {
              page: page,
              pageItems: pageItems
            };
            data = {
              filter: filter,
              paging: paging,
              sorting: {
                station: 1,
                equipment: 1,
                timestamp: 1
              }
            };
            return _this.commonService.reportingService.querySignalRecords(data, function(err, records, paging2) {
              var dataArray, pCount, _i, _ref2, _results;
              if (err) {
                return console.log('err:', err);
              }
              console.log(paging2);
              pCount = (paging2 != null ? paging2.pageCount : void 0) || 0;
              if (pCount <= 6) {
                if (paging2 != null) {
                  paging2.pages = (function() {
                    _results = [];
                    for (var _i = 1; 1 <= pCount ? _i <= pCount : _i >= pCount; 1 <= pCount ? _i++ : _i--){ _results.push(_i); }
                    return _results;
                  }).apply(this);
                }
              } else if (page > 3 && page < pCount - 2) {
                if (paging2 != null) {
                  paging2.pages = [1, page - 2, page - 1, page, page + 1, page + 2, pCount];
                }
              } else if (page <= 3) {
                if (paging2 != null) {
                  paging2.pages = [1, 2, 3, 4, 5, 6, pCount];
                }
              } else if (page >= pCount - 2) {
                if (paging2 != null) {
                  paging2.pages = [1, pCount - 5, pCount - 4, pCount - 3, pCount - 2, pCount - 1, pCount];
                }
              }
              scope.pagination = paging2;
              dataArray = records;
              if (!dataArray.length) {
                scope.barlinevalue = [];
                return scope.garddatas = [];
              } else {
                if ((_ref2 = dataArray[0].dataType) === 'json' || _ref2 === 'string') {
                  return formatData(dataArray, function(d) {
                    scope.garddatas = d;
                    return scope.$applyAsync();
                  });
                } else {
                  return _this.display('此报表仅支持数字数据信号查询！', 500);
                }
              }
            });
          }
        };
      })(this);
      formatData = function(records, callback) {
        var finalData, index;
        finalData = null;
        index = 0;
        finalData = _.map(records, (function(_this) {
          return function(record) {
            var vname;
            vname = '';
            if (record.value.name) {
              vname = record.value.name;
            } else {
              vname = record.value.psignal;
            }
            _.extend(record, {
              index: index + 1,
              stationName: getStationName(record.station),
              equipmentName: getEquipmentName(record.station + "." + record.equipment),
              value: record.value.mvalue,
              text: record.value.desc,
              user: record.user,
              vSignalName: vname,
              sampleTime: moment(record.timestamp).format("YYYY-MM-DD HH:mm:ss")
            });
            return index++;
          };
        })(this));
        if (index === records.length) {
          return typeof callback === "function" ? callback(records) : void 0;
        }
      };
      scope.queryPage = function(page) {
        var paging;
        paging = scope.pagination;
        if (!paging) {
          return;
        }
        if (page === 'next') {
          page = paging.page + 1;
        } else if (page === 'previous') {
          page = paging.page - 1;
        }
        if (page > paging.pageCount || page < 1) {
          return;
        }
        return scope.queryReport(page, paging.pageItems);
      };
      getStationName = function(stationId) {
        var item, _i, _len, _ref2;
        _ref2 = scope.project.stations.items;
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          item = _ref2[_i];
          if (item.model.station === stationId) {
            return item.model.name;
          }
        }
        return stationId;
      };
      getEquipmentName = function(equipmentId) {
        var item, tempEquipment, _i, _len, _ref2;
        tempEquipment = equipmentId.split('.');
        _ref2 = scope.equipments;
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          item = _ref2[_i];
          if (item.model.equipment === tempEquipment[1] && item.model.station === tempEquipment[0]) {
            return item.model.name;
          }
        }
        return equipmentId;
      };
      getSignalName = function(signalId) {
        var item, _i, _len, _ref2;
        _ref2 = scope.signals;
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          item = _ref2[_i];
          if (item.model.signal === signalId) {
            return item.model.name;
          }
        }
        return signalId;
      };
      getUnit = function(unitid) {
        var item, unitItem, _i, _len, _ref2, _ref3;
        if (!unitid) {
          return '';
        }
        _ref3 = (_ref2 = scope.project.dictionary) != null ? _ref2.signaltypes.items : void 0;
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          item = _ref3[_i];
          unitItem = item.model;
          if (unitItem.type === unitid) {
            return unitItem.unit;
          }
        }
        return unitid;
      };
      return scope.exportReport = (function(_this) {
        return function(header, garddatas, name) {
          var data, data2, reportName, wb, ws;
          if (garddatas[0].stationName && garddatas[0].stationName === '暂无数据') {
            return _this.display("暂无数据，无法导出！");
          }
          data2 = _.map(garddatas, function(item) {
            return {
              "序号": item.index,
              "项目名称": item.stationName,
              "设备名称": item.equipmentName,
              "故障预测": item.vSignalName,
              "预测值": item.value,
              "备注": item.text,
              "操作人": item.user,
              "采集时间": item.sampleTime
            };
          });
          data = data2;
          ws = XLSX.utils.json_to_sheet(data);
          wb = XLSX.utils.book_new();
          XLSX.utils.book_append_sheet(wb, ws, "Presidents");
          reportName = name + moment().format("YYYYMMDDHHmmss") + ".xlsx";
          return XLSX.writeFile(wb, reportName);
        };
      })(this);
    };

    MessageFeedbackDirective.prototype.resize = function(scope) {};

    MessageFeedbackDirective.prototype.dispose = function(scope) {
      var _ref;
      return (_ref = scope.selectEquipSubscription) != null ? _ref.dispose() : void 0;
    };

    return MessageFeedbackDirective;

  })(base.BaseDirective);
  return exports = {
    MessageFeedbackDirective: MessageFeedbackDirective
  };
});
