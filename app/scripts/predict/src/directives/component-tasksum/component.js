// Generated by IcedCoffeeScript 108.0.13

/*
* File: component-tasksum-directive
* User: David
* Date: 2019/07/17
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment", 'clc.foundation.angular/models/structure-model'], function(base, css, view, _, moment, sm) {
  var ComponentTasksumDirective, exports;
  ComponentTasksumDirective = (function(_super) {
    __extends(ComponentTasksumDirective, _super);

    function ComponentTasksumDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "component-tasksum";
      ComponentTasksumDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
      this.timeSubscription = null;
      if (this.types == null) {
        this.types = new sm.StructureModel('type');
      }
      this.alltaskDatas = [];
    }

    ComponentTasksumDirective.prototype.setScope = function() {};

    ComponentTasksumDirective.prototype.setCSS = function() {
      return css;
    };

    ComponentTasksumDirective.prototype.setTemplate = function() {
      return view;
    };

    ComponentTasksumDirective.prototype.show = function(scope, element, attrs) {
      var _ref, _ref1;
      this.timeSubscription = null;
      scope.taskRecNum = 0;
      scope.query = {
        startTime: moment().subtract(7, "days").startOf('day'),
        endTime: moment().endOf('day')
      };
      scope.pieDatas = [
        {
          orderid: 1,
          name: "等待处理",
          value: 0
        }, {
          orderid: 2,
          name: "已结束",
          value: 0
        }, {
          orderid: 3,
          name: "进行中",
          value: 0
        }
      ];
      scope.headers = [
        {
          headerName: "单号",
          field: "name"
        }, {
          headerName: "工单类型",
          field: "typeName"
        }, {
          headerName: "工单状态",
          field: "statusName"
        }, {
          headerName: "当前执行时间",
          field: "currexcutetime"
        }, {
          headerName: "负责人",
          field: "excutor"
        }, {
          headerName: "创建时间",
          field: "creator"
        }, {
          headerName: "创建人",
          field: "createtime"
        }
      ];
      scope.garddatas = [
        {
          sumoper: "工单汇总",
          tasksum: "--",
          todo: "--",
          ongoing: "--",
          finished: "--"
        }
      ];
      if ((_ref = this.timeSubscription) != null) {
        _ref.dispose();
      }
      this.timeSubscription = this.commonService.subscribeEventBus('time', (function(_this) {
        return function(d) {
          scope.query.startTime = moment(d.message.startTime).startOf('day');
          return scope.query.endTime = moment(d.message.endTime).endOf('day');
        };
      })(this));
      if ((_ref1 = this.taskprocessStaticSubscription) != null) {
        _ref1.dispose();
      }
      this.taskprocessStaticSubscription = this.commonService.subscribeEventBus('task-process-statics', (function(_this) {
        return function(d) {
          var mesg;
          mesg = d.message;
          if (_this.alltaskDatas.length > 0) {
            scope.garddatas = [];
            scope.garddatas = _.filter(_this.alltaskDatas, function(item) {
              return item.statusName === mesg.data;
            });
            return scope.$applyAsync();
          }
        };
      })(this));
      this.loadTypes((function(_this) {
        return function(err, typedatas) {
          _this.getTaskDatas(scope);
          return scope.$applyAsync();
        };
      })(this), true);
      scope.queryReport = (function(_this) {
        return function() {
          return _this.getTaskDatas(scope);
        };
      })(this);
      return scope.exportReport = (function(_this) {
        return function(header, name) {
          var reportName;
          reportName = name + moment().format("YYYYMMDDHHmmss") + ".csv";
          return _this.commonService.publishEventBus("export-report", {
            header: header,
            name: reportName
          });
        };
      })(this);
    };

    ComponentTasksumDirective.prototype.getTaskDatas = function(scope) {
      var filter;
      if (scope.query.startTime > scope.query.endTime) {
        this.display(null, '温馨提示：开始时间晚于结束时间，请查证！');
        return;
      }
      scope.pieDatas = [
        {
          orderid: 1,
          name: "等待处理",
          value: 0
        }, {
          orderid: 2,
          name: "已结束",
          value: 0
        }, {
          orderid: 3,
          name: "进行中",
          value: 0
        }
      ];
      scope.garddatas = [
        {
          name: "--",
          typeName: "--",
          statusName: "--",
          currexcutetime: "--",
          excutor: "--",
          creator: "--",
          createtime: "--"
        }
      ];
      filter = {};
      filter.user = this.$routeParams.user;
      filter.project = this.$routeParams.project;
      filter.createtime = {
        "$gte": scope.query.startTime,
        "$lte": scope.query.endTime
      };
      return this.commonService.loadProjectModelByService('tasks', filter, '_id user project type process name creator task phase nodes createtime', (function(_this) {
        return function(err, taskmodels) {
          var excutor, gardatasItem, taskmodelItem, typeModel, _i, _j, _len, _len1, _ref, _ref1, _results;
          if (!taskmodels) {
            return;
          }
          _this.alltaskDatas = [];
          scope.garddatas = [];
          scope.taskRecNum = taskmodels.length;
          for (_i = 0, _len = taskmodels.length; _i < _len; _i++) {
            taskmodelItem = taskmodels[_i];
            if ((_.isEmpty(taskmodelItem.phase.nextManager)) && !(taskmodelItem.phase.progress >= 0)) {
              scope.pieDatas[0].value++;
            } else if ((taskmodelItem.phase.progress < 1) || (!_.isEmpty(taskmodelItem.phase.nextManager))) {
              scope.pieDatas[2].value++;
            } else {
              scope.pieDatas[1].value++;
            }
            typeModel = _.filter(_this.types.model, function(modelItem) {
              return modelItem.type === taskmodelItem.type;
            });
            excutor = "";
            if ((_.isEmpty(taskmodelItem.phase.nextManager)) && (taskmodelItem.phase.progress === 1)) {
              excutor = taskmodelItem.phase.manager.name;
            } else if (_.isEmpty(taskmodelItem.phase.nextManager)) {
              excutor = null;
            } else if (!_.isEmpty(taskmodelItem.phase.manager)) {
              excutor = taskmodelItem.phase.manager.name;
            } else if (!_.isEmpty(taskmodelItem.phase.nextManager)) {
              excutor = taskmodelItem.phase.nextManager.name;
            }
            scope.garddatas.push({
              _id: taskmodelItem._id,
              name: taskmodelItem.name,
              typeName: typeModel[0].name,
              statusName: _this.getStatusName(taskmodelItem.phase.progress, taskmodelItem.phase.state, taskmodelItem.phase.nextManager),
              currexcutetime: (_.isEmpty(taskmodelItem.phase.timestamp) ? null : moment(taskmodelItem.phase.timestamp).format("YYYY-MM-DD HH:mm:ss")),
              excutor: excutor,
              creator: (_ref = taskmodelItem.creator) != null ? _ref.name : void 0,
              createtime: moment(taskmodelItem.createtime).format("YYYY-MM-DD HH:mm:ss")
            });
          }
          _ref1 = scope.garddatas;
          _results = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            gardatasItem = _ref1[_j];
            _results.push(_this.alltaskDatas.push(gardatasItem));
          }
          return _results;
        };
      })(this));
    };

    ComponentTasksumDirective.prototype.getStatusName = function(progress, state, manager) {
      if ((_.isEmpty(manager)) && !(progress >= 0)) {
        return "等待处理";
      } else if (state === "reject") {
        return "拒绝";
      } else if (state === "cancel") {
        return "取消";
      } else if ((progress < 1) || (!_.isEmpty(manager))) {
        return "进行中";
      } else {
        return "已结束";
      }
    };

    ComponentTasksumDirective.prototype.loadTypes = function(callback, refresh) {
      return this.commonService.loadProjectModelByService('processtypes', {}, 'type name', (function(_this) {
        return function(err, model) {
          _this.types.setItems(model);
          return typeof callback === "function" ? callback(err, model) : void 0;
        };
      })(this), refresh);
    };

    ComponentTasksumDirective.prototype.resize = function(scope) {};

    ComponentTasksumDirective.prototype.dispose = function(scope) {};

    return ComponentTasksumDirective;

  })(base.BaseDirective);
  return exports = {
    ComponentTasksumDirective: ComponentTasksumDirective
  };
});
