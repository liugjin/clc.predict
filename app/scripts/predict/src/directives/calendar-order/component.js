// Generated by IcedCoffeeScript 108.0.13

/*
* File: calendar-order-directive
* User: David
* Date: 2019/11/14
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment", "fullcalendar"], function(base, css, view, _, moment, fullcalendar) {
  var CalendarOrderDirective, exports;
  CalendarOrderDirective = (function(_super) {
    __extends(CalendarOrderDirective, _super);

    function CalendarOrderDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "calendar-order";
      CalendarOrderDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    CalendarOrderDirective.prototype.setScope = function() {};

    CalendarOrderDirective.prototype.setCSS = function() {
      return css;
    };

    CalendarOrderDirective.prototype.setTemplate = function() {
      return view;
    };

    CalendarOrderDirective.prototype.show = function(scope, element, attrs) {
      var drawWorkflow, emptyTotalNumber, getUnprocessedOrder, getWorkflowData, init, setTaskData, _ref, _ref1;
      if (!scope.firstload) {
        return;
      }
      scope.taskTypes = [
        {
          name: "总工单数",
          key: "total",
          val1: 0,
          val2: 0
        }, {
          name: "故障工单数",
          key: "defect",
          val1: 0,
          val2: 0
        }, {
          name: "运维工单数",
          key: "plan",
          val1: 0,
          val2: 0
        }, {
          name: "维保工单数",
          key: "predict",
          val1: 0,
          val2: 0
        }
      ];
      scope.typeMap = {
        defect: "故障工单",
        plan: "运维工单",
        predict: "维保工单"
      };
      scope.stateMap = {
        approval: "已处理",
        unprocessed: "待处理"
      };
      scope.tasks = [];
      scope.ng = {
        calendar: null,
        monthStartTime: "",
        monthEndTime: "",
        workflowData: [],
        total: 1,
        completed: 0,
        unprocessed: 0,
        monthOrderInfo: [],
        recordOrderInfo: [],
        onceExecute: true
      };
      scope.modal = M.Modal.getInstance($("#task-modal"));
      scope.showOrderDetial = (function(_this) {
        return function(order) {
          var _ref;
          scope.task = order.id;
          if (typeof ((_ref = scope.modal) != null ? _ref.open : void 0) === "function") {
            _this.commonService.publishEventBus("task-model", order.id);
            return scope.modal.open();
          } else {
            scope.modal = M.Modal.getInstance($("#task-modal"));
            _this.commonService.publishEventBus("task-model", order.id);
            return scope.modal.open();
          }
        };
      })(this);
      emptyTotalNumber = (function(_this) {
        return function() {
          var eventNum;
          eventNum = $(element).find('.workflow-table .fc-body .fc-week .fc-content-skeleton .fc-event-container').length;
          if (eventNum === 0) {
            scope.ng.total = 1;
            scope.ng.completed = 0;
            scope.ng.unprocessed = 0;
            return scope.$applyAsync();
          }
        };
      })(this);
      setTaskData = (function(_this) {
        return function(err, taskModels) {
          scope.ng.workflowData = _.map(taskModels, function(task) {
            var color, createtime, id, name, nodes, phase, state, updatetime;
            id = task != null ? task.task : void 0;
            createtime = moment(task.createtime).local().format("YYYY-MM-DD HH:mm");
            updatetime = moment(task.updatetime).local().format("YYYY-MM-DD HH:mm");
            name = task.name;
            nodes = task.nodes;
            phase = task.phase.nextNode;
            color = "";
            state = "";
            if (!_this.getStatus(task.phase)) {
              color = "#32CA59";
              state = "approval";
            } else {
              color = "#DFB145";
              state = "unprocessed";
            }
            return {
              id: id,
              title: name,
              color: color,
              start: createtime,
              createtime: createtime,
              updatetime: updatetime,
              state: state,
              content: nodes,
              type: task.type
            };
          });
          scope.ng.workflowData = _.filter(scope.ng.workflowData, function(item) {
            return item !== void 0;
          });
          drawWorkflow();
          if (scope.ng.onceExecute) {
            return getUnprocessedOrder();
          }
        };
      })(this);
      getWorkflowData = (function(_this) {
        return function() {
          var _ref;
          return (_ref = _this.commonService) != null ? _ref.loadProjectModelByService('tasks', {}, null, setTaskData, true) : void 0;
        };
      })(this);
      getUnprocessedOrder = (function(_this) {
        return function() {
          return scope.ng.recordOrderInfo = _.filter(scope.ng.monthOrderInfo, function(order) {
            return order.state === "unprocessed";
          });
        };
      })(this);
      drawWorkflow = (function(_this) {
        return function() {
          var dom, options;
          options = {
            plugins: ['dayGrid', 'timeGrid'],
            lang: 'zh-cn',
            header: {
              left: 'prev,next today',
              center: 'title',
              right: ''
            },
            buttonText: {
              prev: '◀',
              next: '▶'
            },
            contentHeight: '90vh',
            timeFormat: "H:mm",
            eventClick: function(data, event, table) {
              return scope.showOrderDetial(data);
            },
            eventRender: function(data, event, table) {
              var map;
              scope.ng.monthStartTime = moment(table.intervalStart._d).startOf('month').format('YYYY-MM-DD ') + "00:00:00";
              scope.ng.monthEndTime = moment(table.intervalStart._d).endOf('month').format('YYYY-MM-DD ') + "23:59:59";
              scope.ng.total = 0;
              scope.ng.completed = 0;
              scope.ng.unprocessed = 0;
              map = {};
              _.each(scope.taskTypes, (function(_this) {
                return function(type, index) {
                  type.val1 = 0;
                  type.val2 = 0;
                  return map[type.key] = index;
                };
              })(this));
              scope.tasks = _.map(_.filter(scope.ng.workflowData, (function(_this) {
                return function(task) {
                  return moment(scope.ng.monthStartTime).isBefore(task.createtime) && moment(task.createtime).isBefore(scope.ng.monthEndTime);
                };
              })(this)), (function(_this) {
                return function(d) {
                  if (d.state === "approval") {
                    scope.taskTypes[map[d.type]].val1++;
                    scope.taskTypes[map["total"]].val1++;
                  } else {
                    scope.taskTypes[map[d.type]].val2++;
                    scope.taskTypes[map["total"]].val2++;
                  }
                  return d;
                };
              })(this));
              scope.ng.monthOrderInfo = scope.tasks;
              return scope.$applyAsync();
            },
            events: scope.ng.workflowData
          };
          scope.ng.calendar = new fullcalendar.Calendar(element.find('.workflow-table'), options);
          scope.ng.calendar.render();
          dom = '<div class="completed-bar"></div> <div class="completed">已处理</div> <div class="unprocessed-bar"></div> <div class="unprocessed">待处理</div>';
          $(element).find(".workflow-table .fc-toolbar .fc-left").find(".fc-prev-button").on("click", function() {
            emptyTotalNumber();
            return getUnprocessedOrder();
          });
          $(element).find(".workflow-table .fc-toolbar .fc-left").find(".fc-next-button").on("click", function() {
            emptyTotalNumber();
            return getUnprocessedOrder();
          });
          return $(dom).appendTo(element.find('.task-workflow-box .fc-toolbar .fc-right'));
        };
      })(this);
      init = (function(_this) {
        return function() {
          var topic, user, _ref, _ref1;
          $(element).find(".workflow-table").children().remove();
          if ((_ref = scope.subscribeOrderType) != null) {
            _ref.dispose();
          }
          scope.subscribeOrderType = _this.commonService.subscribeEventBus("orderType", function(data) {
            var map1, map2;
            if (!data) {
              return;
            }
            map1 = {
              "总工单数": "total",
              "故障工单数": "defect",
              "运维工单数": "plan",
              "维保工单数": "predict"
            };
            map2 = {
              "已处理": "approval",
              "待处理": "unprocessed"
            };
            if (map1[data.message.seriesName] === "total" && data.message.name !== "总量") {
              scope.tasks = _.filter(scope.ng.monthOrderInfo, function(o) {
                return map2[data.message.name] === o.state;
              });
            } else if (map1[data.message.seriesName] !== "total" && data.message.name !== "总量") {
              scope.tasks = _.filter(scope.ng.monthOrderInfo, function(o) {
                return o.type === map1[data.message.seriesName] && map2[data.message.name] === o.state;
              });
            } else if (map1[data.message.seriesName] === "total" && data.message.name === "总量") {
              scope.tasks = scope.ng.monthOrderInfo;
            } else if (map1[data.message.seriesName] !== "total" && data.message.name === "总量") {
              scope.tasks = _.filter(scope.ng.monthOrderInfo, function(o) {
                return o.type === map1[data.message.seriesName];
              });
            }
            return scope.$applyAsync();
          });
          user = scope.$root.user.user;
          topic = "tasks/" + user + "/#";
          if ((_ref1 = scope.maintasksSubscri) != null) {
            _ref1.dispose();
          }
          scope.maintasksSubscri = _this.commonService.configurationLiveSession.subscribe(topic, function(err, order) {
            if (!order) {
              return;
            }
            return getWorkflowData();
          });
          return getWorkflowData();
        };
      })(this);
      init();
      if ((_ref = scope.subModel) != null) {
        _ref.dispose();
      }
      scope.subModel = this.commonService.subscribeEventBus("task-model", (function(_this) {
        return function(msg) {
          var _ref1, _ref2;
          if (typeof (msg != null ? (_ref1 = msg.message) != null ? _ref1.open : void 0 : void 0) === "boolean" && !(msg != null ? (_ref2 = msg.message) != null ? _ref2.open : void 0 : void 0)) {
            return scope.modal.close();
          }
        };
      })(this));
      if ((_ref1 = scope.subQuery) != null) {
        _ref1.dispose();
      }
      return scope.subQuery = this.commonService.subscribeEventBus("task-query", (function(_this) {
        return function(msg) {
          if (typeof (msg != null ? msg.message : void 0) === "string") {
            return getWorkflowData();
          }
        };
      })(this));
    };

    CalendarOrderDirective.prototype.getStatus = function(phase) {
      var manager, progress, state;
      state = phase != null ? phase.state : void 0;
      manager = phase != null ? phase.nextManager : void 0;
      progress = phase != null ? phase.progress : void 0;
      if (_.isEmpty(manager) && !(progress >= 0)) {
        return true;
      } else if (state === "reject") {
        return false;
      } else if (state === "cancel") {
        return false;
      } else if ((progress < 1) || !_.isEmpty(manager)) {
        return true;
      } else {
        return false;
      }
    };

    CalendarOrderDirective.prototype.resize = function(scope) {};

    CalendarOrderDirective.prototype.dispose = function(scope) {
      var _ref, _ref1, _ref2, _ref3;
      if ((_ref = scope.subModel) != null) {
        _ref.dispose();
      }
      if ((_ref1 = scope.subQuery) != null) {
        _ref1.dispose();
      }
      if ((_ref2 = scope.maintasksSubscri) != null) {
        _ref2.dispose();
      }
      return (_ref3 = scope.subscribeOrderType) != null ? _ref3.dispose() : void 0;
    };

    return CalendarOrderDirective;

  })(base.BaseDirective);
  return exports = {
    CalendarOrderDirective: CalendarOrderDirective
  };
});
