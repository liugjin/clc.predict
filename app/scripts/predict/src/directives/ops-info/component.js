// Generated by IcedCoffeeScript 108.0.13

/*
* File: ops-info-directive
* User: David
* Date: 2019/11/07
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment", "rx"], function(base, css, view, _, moment, Rx) {
  var OpsInfoDirective, exports;
  OpsInfoDirective = (function(_super) {
    __extends(OpsInfoDirective, _super);

    function OpsInfoDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.getDeviceAlarmInfo = __bind(this.getDeviceAlarmInfo, this);
      this.show = __bind(this.show, this);
      this.id = "ops-info";
      OpsInfoDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
      this.processtypesService = commonService.modelEngine.modelManager.getService("processtypes");
    }

    OpsInfoDirective.prototype.setScope = function() {};

    OpsInfoDirective.prototype.setCSS = function() {
      return css;
    };

    OpsInfoDirective.prototype.setTemplate = function() {
      return view;
    };

    OpsInfoDirective.prototype.show = function(scope, element, attrs) {
      var init;
      scope.switchOrderType = (function(_this) {
        return function(type) {
          scope.switchType = type;
          return _this.commonService.publishEventBus("orderType", type);
        };
      })(this);
      init = (function(_this) {
        return function() {
          var filter;
          scope.defectOrderType = "故障工单";
          scope.planOrderType = "巡检工单";
          scope.processtypes = [];
          scope.allFailureDevice = [];
          scope.switchType = "all";
          filter = scope.project.getIds();
          _this.processtypesService.query(filter, null, function(err, data) {
            if (!data) {
              return _this.display("查询工单类型失败!!", 500);
            }
            scope.processtypes = data;
            return _.each(scope.processtypes, function(item) {
              if (item.type === "plan") {
                return scope.planOrderType = item.name;
              } else if (item.type === "defect") {
                return scope.defectOrderType = item.name;
              }
            });
          });
          return _this.getDeviceAlarmInfo(scope);
        };
      })(this);
      return init();
    };

    OpsInfoDirective.prototype.getDeviceAlarmInfo = function(scope) {
      var getAllDevice, statisticalDeviceFailure, subScriptDeviceEventCount;
      scope.allDevice = [];
      scope.allStation = [];
      scope.alarmDeviceCount = 0;
      scope.healthDeviceCount = 0;
      scope.Rx = new Rx.Subject();
      statisticalDeviceFailure = (function(_this) {
        return function() {
          var whetherExcute;
          scope.allFailureDevice = [];
          scope.alarmDeviceCount = 0;
          whetherExcute = scope.allDeviceCount - 1;
          return _.each(scope.allDevice, function(device, num) {
            if (device.alarmInfo.length > 0) {
              scope.alarmDeviceCount++;
              scope.allFailureDevice.push(device);
            }
            if (num === whetherExcute) {
              scope.healthDeviceCount = scope.allDeviceCount - scope.alarmDeviceCount;
              return scope.$applyAsync();
            }
          });
        };
      })(this);
      subScriptDeviceEventCount = (function(_this) {
        return function() {
          var filter, _ref;
          statisticalDeviceFailure();
          filter = {
            user: scope.project.model.user,
            project: scope.project.model.project
          };
          if ((_ref = scope.subAlarmInfo) != null) {
            _ref.dispose();
          }
          scope.subAlarmInfo = _this.commonService.eventLiveSession.subscribeValues(filter, function(err, data) {
            _.each(scope.allDevice, function(device) {
              if (device.model.station === data.message.station && device.model.equipment === data.message.equipment) {
                _.each(device.alarmInfo, function(alarm) {
                  if (alarm._index === data.message._index) {
                    return device.alarmInfo = _.filter(device.alarmInfo, function(item) {
                      return item._index !== data.message._index;
                    });
                  }
                });
                device.alarmInfo.push(data.message);
                device.alarmInfo = _.filter(device.alarmInfo, function(item) {
                  return !item.endTime;
                });
                if (device.alarmInfo.length > 0) {
                  return device.state = 1;
                } else {
                  return device.state = 0;
                }
              }
            });
            return scope.Rx.onNext();
          });
          return scope.Rx.debounce(200).subscribe(function() {
            return statisticalDeviceFailure();
          });
        };
      })(this);
      getAllDevice = (function(_this) {
        return function() {
          scope.allDevice = [];
          return scope.project.loadStations(null, function(err, stations) {
            var num, station, stationCount, _i, _len, _ref;
            scope.allStation = stations;
            stationCount = scope.allStation.length;
            _ref = scope.allStation;
            for (num = _i = 0, _len = _ref.length; _i < _len; num = ++_i) {
              station = _ref[num];
              if (!station) {
                return;
              }
              station.loadEquipments({}, null, function(err, equipments) {
                stationCount--;
                _.each(equipments, function(equipment, num) {
                  if (equipment.model.equipment.indexOf("_") === -1) {
                    equipment.loadEvents();
                    equipment.alarmInfo = [];
                    equipment.state = 0;
                    return scope.allDevice.push(equipment);
                  }
                });
                if (stationCount === 0) {
                  scope.allDeviceCount = scope.allDevice.length;
                  return subScriptDeviceEventCount();
                }
              });
            }
          });
        };
      })(this);
      return getAllDevice();
    };

    OpsInfoDirective.prototype.resize = function(scope) {};

    OpsInfoDirective.prototype.dispose = function(scope) {
      var _ref;
      return (_ref = scope.subAlarmInfo) != null ? _ref.dispose() : void 0;
    };

    return OpsInfoDirective;

  })(base.BaseDirective);
  return exports = {
    OpsInfoDirective: OpsInfoDirective
  };
});
