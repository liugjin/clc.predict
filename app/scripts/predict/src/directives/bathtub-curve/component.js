// Generated by IcedCoffeeScript 108.0.13

/*
* File: bathtub-curve-directive
* User: David
* Date: 2019/12/23
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment", "echarts"], function(base, css, view, _, moment, echarts) {
  var BathtubCurveDirective, exports;
  BathtubCurveDirective = (function(_super) {
    __extends(BathtubCurveDirective, _super);

    function BathtubCurveDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.createOption = __bind(this.createOption, this);
      this.show = __bind(this.show, this);
      this.id = "bathtub-curve";
      BathtubCurveDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    BathtubCurveDirective.prototype.setScope = function() {};

    BathtubCurveDirective.prototype.setCSS = function() {
      return css;
    };

    BathtubCurveDirective.prototype.setTemplate = function() {
      return view;
    };

    BathtubCurveDirective.prototype.show = function(scope, element, attrs) {
      var getDeviceSignal, myChart, option;
      scope.equipSubscription = {};
      scope.signalDataArr = [];
      scope.dataDeviceArr = [0, 0, 0, 0, 0, 0];
      scope.dataDeviceAve = [0, 0, 0, 0];
      scope.yearData = [moment().format('YYYY'), moment().add(1, 'years').format('YYYY'), moment().add(2, 'years').format('YYYY'), moment().add(3, 'years').format('YYYY')];
      myChart = element.find("#main");
      scope.echart = echarts.init(myChart[0]);
      option = this.createOption(scope);
      scope.echart.setOption(option);
      window.onresize = scope.echart.resize;
      getDeviceSignal = (function(_this) {
        return function(scope, equipment, signalID) {
          var filter, str, _ref;
          filter = {
            user: scope.project.model.user,
            project: scope.project.model.project,
            station: equipment.model.station,
            equipment: equipment.model.equipment,
            signal: signalID
          };
          str = equipment.key + "-" + signalID;
          if ((_ref = scope.equipSubscription[str]) != null) {
            _ref.dispose();
          }
          return scope.equipSubscription[str] = _this.commonService.signalLiveSession.subscribeValues(filter, function(err, signal) {
            var value1;
            if (signal && signal.message) {
              value1 = Number(signal.message.value);
              if (isNaN(value1)) {
                value1 = 0;
              }
              scope.dataDeviceAve[0] = value1.toFixed(2);
              scope.dataDeviceAve[1] = 2 * scope.dataDeviceAve[0];
              scope.dataDeviceAve[2] = 2 * scope.dataDeviceAve[1];
              scope.dataDeviceAve[3] = 2 * scope.dataDeviceAve[2];
              option = _this.createOption(scope);
              return scope.echart.setOption(option);
            }
          });
        };
      })(this);
      return getDeviceSignal(scope, scope.equipment, 'device-health');
    };

    BathtubCurveDirective.prototype.createOption = function(scope) {
      var option;
      option = {
        grid: {
          left: '10%',
          top: '20%',
          right: '15%',
          bottom: '10%'
        },
        tooltip: {
          trigger: 'axis',
          formatter: '{b}: {c}%',
          axisPointer: {
            type: 'cross',
            label: {
              backgroundColor: '#10ebf4'
            }
          }
        },
        xAxis: {
          name: '年份',
          nameTextStyle: {
            color: '#fff'
          },
          axisLine: {
            show: true,
            lineStyle: {
              color: '#1b3274'
            }
          },
          axisLabel: {
            show: true,
            textStyle: {
              color: '#e2edf2'
            }
          },
          axisTick: {
            show: false
          },
          type: 'category',
          boundaryGap: false,
          data: scope.yearData
        },
        yAxis: {
          name: '风险概率(%)',
          nameTextStyle: {
            color: '#fff',
            align: 'left',
            verticalAlign: 'middle'
          },
          axisLabel: {
            show: true,
            textStyle: {
              color: '#e2edf2'
            }
          },
          axisLine: {
            show: true,
            lineStyle: {
              color: '#1b3274'
            }
          },
          splitLine: {
            show: false
          },
          type: 'value'
        },
        visualMap: {
          show: false,
          pieces: [
            {
              gt: 0,
              lte: 25,
              color: '#10ebf4'
            }, {
              gt: 25,
              lte: 50,
              color: '#0094ff'
            }, {
              gt: 50,
              lte: 75,
              color: '#f3bc0f'
            }, {
              gt: 75,
              lte: 10000,
              color: '#ff0045'
            }
          ]
        },
        series: [
          {
            data: scope.dataDeviceAve,
            type: 'line'
          }
        ]
      };
      return option;
    };

    BathtubCurveDirective.prototype.resize = function(scope) {};

    BathtubCurveDirective.prototype.dispose = function(scope) {
      var _ref;
      if ((_ref = scope.echart) != null) {
        _ref.dispose();
      }
      return _.map(scope.equipSubscription, (function(_this) {
        return function(value, key) {
          return value != null ? value.dispose() : void 0;
        };
      })(this));
    };

    return BathtubCurveDirective;

  })(base.BaseDirective);
  return exports = {
    BathtubCurveDirective: BathtubCurveDirective
  };
});
