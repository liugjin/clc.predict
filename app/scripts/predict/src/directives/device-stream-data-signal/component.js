// Generated by IcedCoffeeScript 108.0.13

/*
* File: device-stream-data-signal-directive
* User: David
* Date: 2020/02/24
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var DeviceStreamDataSignalDirective, exports;
  DeviceStreamDataSignalDirective = (function(_super) {
    __extends(DeviceStreamDataSignalDirective, _super);

    function DeviceStreamDataSignalDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "device-stream-data-signal";
      DeviceStreamDataSignalDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    DeviceStreamDataSignalDirective.prototype.setScope = function() {};

    DeviceStreamDataSignalDirective.prototype.setCSS = function() {
      return css;
    };

    DeviceStreamDataSignalDirective.prototype.setTemplate = function() {
      return view;
    };

    DeviceStreamDataSignalDirective.prototype.show = function(scope, element, attrs) {
      var _ref;
      scope.originalDataFlag = true;
      scope.streamFlag = false;
      scope.currentSignal = {};
      scope.hidemodal = function() {
        $('#stream-chart-modal').modal('close');
        scope.$root.loading = false;
        return scope.streamFlag = false;
      };
      scope.showmodal = function() {
        return $('#stream-chart-modal').modal('open');
      };
      scope.checkSignal = function() {
        return $('#stream-chart-modal').modal('open');
      };
      scope.checkStreamSignal = function(model) {
        WebuiPopovers.hideAll();
        scope.streamFlag = true;
        console.log(model);
        if (scope.currentSignal.name) {
          if (scope.currentSignal.name !== model.name) {
            scope.originalDataFlag = true;
          }
        }
        scope.currentSignal.name = model.name;
        scope.currentSignal.signal = model.signal;
        scope.chartModal = 1;
        if (model.signal === 's-data-7' || model.signal === 's-data-6' || model.signal === 's-data-5') {
          return scope.chartModal = 3;
        } else {
          return scope.chartModal = 1;
        }
      };
      scope.streamArr = [];
      setTimeout((function(_this) {
        return function() {
          return scope.equipment.loadSignals(null, function(err, signals) {
            var sig, _i, _len, _results;
            if (signals) {
              _results = [];
              for (_i = 0, _len = signals.length; _i < _len; _i++) {
                sig = signals[_i];
                if (sig.model.template === "predict-base-class" && sig.model.group && sig.model.group === "stream") {
                  sig.model.imgUrl = _this.getComponentPath('images/' + sig.model.signal + '.svg');
                  _results.push(scope.streamArr.push(sig));
                } else {
                  _results.push(void 0);
                }
              }
              return _results;
            }
          }, true);
        };
      })(this), 10);
      if ((_ref = scope.switchEventBus) != null) {
        _ref.dispose();
      }
      return scope.switchEventBus = this.commonService.subscribeEventBus('old-new-stream-flag', (function(_this) {
        return function(msg) {
          if (msg.message === 'old') {
            scope.originalDataFlag = false;
          } else if (msg.message === 'new') {
            scope.originalDataFlag = true;
          }
          return scope.$applyAsync();
        };
      })(this));
    };

    DeviceStreamDataSignalDirective.prototype.resize = function(scope) {};

    DeviceStreamDataSignalDirective.prototype.dispose = function(scope) {};

    return DeviceStreamDataSignalDirective;

  })(base.BaseDirective);
  return exports = {
    DeviceStreamDataSignalDirective: DeviceStreamDataSignalDirective
  };
});
