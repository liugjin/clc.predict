// Generated by IcedCoffeeScript 108.0.13
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['clc.foundation', 'rx', 'underscore', './server'], function(base, Rx, _, Server) {
  var Rack, exports;
  Rack = (function(_super) {
    __extends(Rack, _super);

    function Rack(model, service) {
      this.model = model;
      this.service = service;
      Rack.__super__.constructor.call(this, this.model);
      this.subject = new Rx.Subject;
      this.sceneSubject = new Rx.Subject;
      this.NOASSETFLAG = "---";
      this.data = {};
      this.uwei = {};
      this.COLOR = {
        auto: "-1--1--1",
        off: "0-0-0",
        red: "1-0-0",
        green: "0-1-0",
        blue: "0-0-1",
        yellow: "3-5-0",
        purple: "3-0-5",
        cyan: "0-3-5",
        white: "3-4-5",
        redflash: "1000-0-0",
        greenflash: "0-1000-0",
        blueflash: "0-0-1000",
        yellowflash: "60-100-0",
        purpleflash: "60-0-100",
        cyanflash: "0-60-100",
        whiteflash: "60-80-100"
      };
      this.LED = {
        idle: this.COLOR.red,
        uprack: this.COLOR.blue,
        illegaluprack: this.COLOR.blueflash,
        downrack: this.COLOR.red,
        illegaldownrack: this.COLOR.redflash,
        planuprack: this.COLOR.green,
        plandownrack: this.COLOR.yellow
      };
      this.getRackProperty();
      this.subscribeRack();
    }

    Rack.prototype.getRackProperty = function() {
      var _ref;
      this.mu = (_ref = this.model.sampleUnits[0]) != null ? _ref.value : void 0;
      this.service.getEquipmentProperty(this.model, "height", (function(_this) {
        return function(val) {
          return _this.height = val != null ? val : 42;
        };
      })(this));
      this.service.getEquipmentProperty(this.model, "has-u-locator", (function(_this) {
        return function(val) {
          return _this.hasULocator = val != null ? parseInt(val) : 0;
        };
      })(this));
      this.service.getEquipmentProperty(this.model, "u-direction", (function(_this) {
        return function(val) {
          return _this.udirection = val != null ? parseInt(val) : 0;
        };
      })(this));
      this.service.getEquipmentProperty(this.model, "normal-temperature", (function(_this) {
        return function(val) {
          return _this.NORMALTEMPERATURE = val != null ? val : 23;
        };
      })(this));
      return this.service.equip.find({
        user: this.model.user,
        project: this.model.project,
        station: this.model.station,
        parent: this.model.equipment
      }, null, (function(_this) {
        return function(err, models) {
          var model, server, _i, _len, _results;
          if (err) {
            return;
          }
          _results = [];
          for (_i = 0, _len = models.length; _i < _len; _i++) {
            model = models[_i];
            server = new Server.Server(model, _this.service, _this);
            _results.push(server.getInfo(function(svr) {
              var row, _j, _ref1, _ref2, _results1;
              _results1 = [];
              for (row = _j = _ref1 = svr.row, _ref2 = svr.lrow; _ref1 <= _ref2 ? _j <= _ref2 : _j >= _ref2; row = _ref1 <= _ref2 ? ++_j : --_j) {
                _results1.push(_this.uwei[row] = {
                  server: svr
                });
              }
              return _results1;
            }));
          }
          return _results;
        };
      })(this));
    };

    Rack.prototype.setSignal = function(data) {
      var reg, _ref;
      if (!(data != null ? (_ref = data.message) != null ? _ref.signal : void 0 : void 0)) {
        return;
      }
      reg = new RegExp(/^u-[\d]*-asset$/);
      this.data[data.message.signal] = data.message.value;
      if (reg.test(data.message.signal)) {
        data.message.uwei = parseInt(data.message.signal.split("-")[1]);
        return this.subject.onNext(data.message);
      }
    };

    Rack.prototype.setCommand = function(data) {
      var b, g, r, reg1, reg2, row, _ref, _ref1;
      if (!(data != null ? (_ref = data.message) != null ? _ref.command : void 0 : void 0)) {
        return;
      }
      reg1 = new RegExp(/^set-u-[\d]*-led$/);
      reg2 = new RegExp(/^set-u-plan-[\d]*/);
      if (data.message.command === "toggle-scene") {
        this.sceneSubject.onNext(data);
      }
      if (reg1.test(data.message.command)) {
        row = parseInt(data.message.command.split('-')[2]);
        r = _.find(data.message.parameters, function(it) {
          return it.key === "r";
        });
        g = _.find(data.message.parameters, function(it) {
          return it.key === "g";
        });
        b = _.find(data.message.parameters, function(it) {
          return it.key === "b";
        });
        if (!this.udirection) {
          this.setUValue("u-" + row, "led", (r != null ? r.value : void 0) + "-" + (g != null ? g.value : void 0) + "-" + (b != null ? b.value : void 0));
        }
        if (this.udirection) {
          this.setUValue("u-" + (43 - row), "led", (r != null ? r.value : void 0) + "-" + (g != null ? g.value : void 0) + "-" + (b != null ? b.value : void 0));
        }
      }
      if (reg2.test(data.message.command)) {
        row = parseInt(data.message.command.split('-')[3]);
        return (_ref1 = this.uwei[row]) != null ? _ref1.planStatus = data : void 0;
      }
    };

    Rack.prototype.setEvent = function(data) {
      var reg3, row, _ref, _ref1, _ref2;
      if (!(data != null ? (_ref = data.message) != null ? _ref.event : void 0 : void 0)) {
        return;
      }
      reg3 = new RegExp(/^illegal-[\w]*-rack-[\d]*/);
      if (reg3.test(data.message.event)) {
        row = parseInt(data.message.event.split('-')[3]);
        if (data.message.event.split('-')[1] === "up") {
          if ((_ref1 = this.uwei[row]) != null) {
            _ref1.illegaluprack = data.message.endTime == null;
          }
        }
        if (data.message.event.split('-')[1] === "down") {
          return (_ref2 = this.uwei[row]) != null ? _ref2.illegaldownrack = data.message.endTime == null : void 0;
        }
      }
    };

    Rack.prototype.subscribeRack = function() {
      this.subject.subscribe((function(_this) {
        return function(data) {
          var val;
          if (data.value === _this.NOASSETFLAG) {
            return _this.removeAssetFromRack(data.uwei);
          } else {
            val = data.value.substr(0, 13);
            return _this.addAssetToRack(data.uwei, val);
          }
        };
      })(this));
      return this.sceneSubject.subscribe((function(_this) {
        return function(data) {
          var value, _ref, _ref1;
          if (data.message.phase !== "executing") {
            return;
          }
          value = (_ref = data.message.parameters) != null ? (_ref1 = _ref[0]) != null ? _ref1.value : void 0 : void 0;
          console.log(new Date(), " toggle scene to " + value);
          switch (value) {
            case 0:
              _this.switchToSpaceMode();
              break;
            case 1:
              _this.switchToCapacityMode("space");
              break;
            case 2:
              _this.switchToCapacityMode("power");
              break;
            case 3:
              _this.switchToCapacityMode("cooling");
              break;
            case 4:
              _this.switchToCapacityMode("weight");
              break;
            case 5:
              _this.switchToHeatmapMode();
              break;
            case 6:
              _this.switchToLedMode("auto");
              break;
            case 7:
              _this.switchToLedMode("off");
          }
          if (value != null) {
            _this.setUValue("_", "scene", value);
          }
          data.message.phase = "complete";
          data.message.endTime = new Date();
          return _this.service.publishToMqtt(data.topic, data.message, {
            qos: 2,
            retain: true
          });
        };
      })(this));
    };

    Rack.prototype.removeAssetFromRack = function(uwei) {
      var begin, end, server, u, _i, _j, _ref, _ref1, _ref2, _ref3, _ref4, _results, _results1;
      server = (_ref = this.uwei[uwei]) != null ? _ref.server : void 0;
      if (server) {
        begin = parseInt(server.row);
        end = parseInt(server.lrow);
        server.removeFromRack(this);
        if (((_ref1 = this.uwei[uwei].planStatus) != null ? (_ref2 = _ref1.message) != null ? (_ref3 = _ref2.parameters[0]) != null ? _ref3.value : void 0 : void 0 : void 0) === 2 || ((_ref4 = this.uwei[uwei]) != null ? _ref4.illegaluprack : void 0)) {
          _results = [];
          for (u = _i = begin; begin <= end ? _i <= end : _i >= end; u = begin <= end ? ++_i : --_i) {
            _results.push(this.updateUStatus(u, "down"));
          }
          return _results;
        } else {
          _results1 = [];
          for (u = _j = begin; begin <= end ? _j <= end : _j >= end; u = begin <= end ? ++_j : --_j) {
            _results1.push(this.updateUStatus(u, "illegalDown"));
          }
          return _results1;
        }
      }
    };

    Rack.prototype.addAssetToRack = function(uwei, asset) {
      var _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      if (!((_ref = this.uwei[uwei]) != null ? _ref.server : void 0) || this.uwei[uwei].server.model.type === "_server") {
        console.log("asset:", asset, this.uwei[uwei]);
        if (((_ref1 = this.uwei[uwei]) != null ? (_ref2 = _ref1.server) != null ? (_ref3 = _ref2.model) != null ? _ref3.tag : void 0 : void 0 : void 0) !== asset) {
          if ((_ref4 = this.uwei[uwei]) != null) {
            if ((_ref5 = _ref4.server) != null) {
              _ref5.removeFromRack(this);
            }
          }
        }
        return this.findAsset(asset, (function(_this) {
          return function(server) {
            var srv, u, _i, _j, _ref10, _ref11, _ref12, _ref13, _ref6, _ref7, _ref8, _ref9, _results, _results1;
            if (server) {
              srv = new Server.Server(server, _this.service, _this);
              srv.addToRack(_this, uwei);
              if (((_ref6 = _this.uwei[uwei]) != null ? (_ref7 = _ref6.planStatus) != null ? (_ref8 = _ref7.message) != null ? (_ref9 = _ref8.parameters[0]) != null ? _ref9.value : void 0 : void 0 : void 0 : void 0) === 1) {
                _results = [];
                for (u = _i = _ref10 = srv.row, _ref11 = srv.lrow; _ref10 <= _ref11 ? _i <= _ref11 : _i >= _ref11; u = _ref10 <= _ref11 ? ++_i : --_i) {
                  _results.push(_this.updateUStatus(u, "up"));
                }
                return _results;
              } else {
                _results1 = [];
                for (u = _j = _ref12 = srv.row, _ref13 = srv.lrow; _ref12 <= _ref13 ? _j <= _ref13 : _j >= _ref13; u = _ref12 <= _ref13 ? ++_j : --_j) {
                  _results1.push(_this.updateUStatus(u, "illegalUp"));
                }
                return _results1;
              }
            } else {
              return _this.addNewAssetByAssetId(uwei, asset);
            }
          };
        })(this));
      }
    };

    Rack.prototype.addNewAssetByAssetId = function(uwei, assetId) {
      var asset, server;
      asset = {
        user: this.model.user,
        project: this.model.project,
        station: this.model.station,
        type: "_server",
        template: "_server_1U",
        vendor: "hyiot",
        equipment: assetId,
        name: assetId,
        tag: assetId,
        parent: this.model.equipment,
        commands: [],
        events: [],
        ports: [],
        properties: [
          {
            id: 'row',
            value: uwei
          }
        ],
        sampleUnits: [],
        enable: true
      };
      server = new Server.Server(asset, this.service, this);
      server.addToRack(this, uwei);
      return this.updateUStatus(uwei, "illegalUp");
    };

    Rack.prototype.findAsset = function(assetId, callback) {
      return this.service.equip.findOne({
        user: this.model.user,
        project: this.model.project,
        station: this.model.station,
        tag: assetId
      }, null, (function(_this) {
        return function(err, asset) {
          if (err) {
            return console.log(err);
          }
          console.log("find asset:", assetId, " result:", asset);
          return typeof callback === "function" ? callback(asset) : void 0;
        };
      })(this));
    };

    Rack.prototype.updateUStatus = function(uwei, status) {
      var arr, color, flag, idown, iup, ledColor, _base;
      console.log("updateUStatus:", status, " in uwei:", uwei);
      switch (status) {
        case "up":
          flag = true;
          ledColor = this.LED.uprack;
          iup = 0;
          idown = 0;
          break;
        case "illegalUp":
          ledColor = this.LED.illegaluprack;
          iup = 1;
          idown = 0;
          break;
        case "down":
          flag = true;
          ledColor = this.LED.downrack;
          iup = 0;
          idown = 0;
          break;
        case "illegalDown":
          ledColor = this.LED.illegaldownrack;
          iup = 0;
          idown = 1;
          break;
        default:
          ledColor = this.LED.idle;
          iup = 0;
          idown = 0;
      }
      if ((_base = this.uwei)[uwei] == null) {
        _base[uwei] = {};
      }
      this.uwei[uwei].illegaluprack = iup;
      this.uwei[uwei].illegaldownrack = idown;
      if (flag) {
        this.setUPlanStatus(this.uwei[uwei].planStatus, 0);
      }
      if (this.hasULocator) {
        console.log("set u controller:", uwei, " with color:", ledColor);
        arr = ["r", "g", "b"];
        color = _.map(ledColor.split("-"), function(val, key) {
          return {
            key: arr[key],
            value: parseInt(val)
          };
        });
        this.setULedColor("set-u-" + uwei + "-led", color);
      }
      if (!this.udirection) {
        this.setUValue("u-" + uwei, "led", ledColor);
      }
      if (this.udirection) {
        this.setUValue("u-" + (43 - uwei), "led", ledColor);
      }
      this.setUValue("u-" + uwei, "illegal-up-rack", iup);
      return this.setUValue("u-" + uwei, "illegal-down-rack", idown);
    };

    Rack.prototype.setUPlanStatus = function(data, value) {
      var message, topic, _ref, _ref1;
      if (!data) {
        return;
      }
      topic = data.topic;
      message = data.message;
      if ((_ref = message.parameters) != null) {
        if ((_ref1 = _ref[0]) != null) {
          _ref1.value = value;
        }
      }
      return this.service.publishToMqtt(topic, message, {
        qos: 0,
        retain: true
      });
    };

    Rack.prototype.setULedColor = function(command, value) {
      var message, topic;
      topic = "command-values/" + this.model.user + "/" + this.model.project + "/" + this.model.station + "/" + this.model.equipment + "/" + command;
      message = {
        user: this.model.user,
        project: this.model.project,
        station: this.model.station,
        equipment: this.model.equipment,
        command: command,
        phase: "executing",
        startTime: new Date(),
        trigger: "script",
        operator: "system",
        parameters: value
      };
      return this.service.publishToMqtt(topic, message, {
        qos: 2,
        retain: true
      });
    };

    Rack.prototype.setUValue = function(su, channel, value) {
      var message, topic;
      topic = "sample-values/" + this.mu + "/" + su + "/" + channel;
      if (channel === "scene") {
        topic = "sample-values/" + this.mu + "/scene";
      }
      message = {
        monitoringUnitId: this.mu,
        sampleUnitId: su,
        channelId: channel,
        value: value,
        timestamp: new Date()
      };
      return this.service.publishToMqtt(topic, message, {
        qos: 0,
        retain: true
      });
    };

    Rack.prototype.splitColor = function(color) {
      var ret;
      if (color === this.COLOR.auto) {
        ret = {
          r: -1,
          g: -1,
          b: -1
        };
      } else if ((color != null ? color.split('-').length : void 0) === 3) {
        ret = {
          r: parseInt(color.split('-')[0]),
          g: parseInt(color.split('-')[1]),
          b: parseInt(color.split('-')[2])
        };
      } else {
        ret = this.splitColor(this.COLOR.whiteflash);
      }
      return ret;
    };

    Rack.prototype.switchToSpaceMode = function() {
      var leds, n, uleds, _i, _ref, _ref1, _ref10, _ref11, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
      uleds = {};
      for (n = _i = 1, _ref = this.height; 1 <= _ref ? _i <= _ref : _i >= _ref; n = 1 <= _ref ? ++_i : --_i) {
        uleds[n] = {
          key: "u-" + n,
          value: this.LED.idle
        };
        if ((_ref1 = this.uwei[n]) != null ? _ref1.illegaluprack : void 0) {
          uleds[n].value = this.LED.illegaluprack;
        } else if ((_ref2 = this.uwei[n]) != null ? _ref2.illegaldownrack : void 0) {
          uleds[n].value = this.LED.illegaldownrack;
        } else if (((_ref3 = this.uwei[n]) != null ? (_ref4 = _ref3.planStatus) != null ? (_ref5 = _ref4.message) != null ? (_ref6 = _ref5.parameters[0]) != null ? _ref6.value : void 0 : void 0 : void 0 : void 0) === 1) {
          uleds[n].value = this.LED.planuprack;
        } else if (((_ref7 = this.uwei[n]) != null ? (_ref8 = _ref7.planStatus) != null ? (_ref9 = _ref8.message) != null ? (_ref10 = _ref9.parameters[0]) != null ? _ref10.value : void 0 : void 0 : void 0 : void 0) === 2) {
          uleds[n].value = this.LED.plandownrack;
        } else if ((_ref11 = this.uwei[n]) != null ? _ref11.server : void 0) {
          uleds[n].value = this.LED.uprack;
        }
      }
      leds = _.values(uleds);
      return this.setLeds(leds);
    };

    Rack.prototype.switchToCapacityMode = function(mode) {
      var assetcount, getModeColor, i, j, l, leds, plancount, planvalue, ucount, value, _i, _j, _k, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
      getModeColor = (function(_this) {
        return function(mod) {
          var ret;
          ret = _this.COLOR.white;
          switch (mod) {
            case "space":
              ret = _this.COLOR.green;
              break;
            case "power":
              ret = _this.COLOR.red;
              break;
            case "cooling":
              ret = _this.COLOR.blue;
              break;
            case "weight":
              ret = _this.COLOR.cyan;
              break;
            case "planspace":
              ret = _this.COLOR.greenflash;
              break;
            case "planpower":
              ret = _this.COLOR.redflash;
              break;
            case "plancooling":
              ret = _this.COLOR.blueflash;
              break;
            case "planweight":
              ret = _this.COLOR.cyanflash;
          }
          return ret;
        };
      })(this);
      value = (_ref = (_ref1 = this.data) != null ? _ref1["ratio-" + mode] : void 0) != null ? _ref : 0;
      planvalue = (_ref2 = (_ref3 = this.data) != null ? _ref3["plan-ratio-" + mode] : void 0) != null ? _ref2 : 0;
      ucount = (_ref4 = (_ref5 = (_ref6 = this.data) != null ? _ref6["ucount"] : void 0) != null ? _ref5 : this.height) != null ? _ref4 : 42;
      assetcount = parseInt(ucount * value / 100);
      plancount = parseInt(ucount * planvalue / 100);
      leds = [];
      if (1 <= assetcount) {
        for (i = _i = 1; 1 <= assetcount ? _i <= assetcount : _i >= assetcount; i = 1 <= assetcount ? ++_i : --_i) {
          leds.push({
            key: "u-" + i,
            value: getModeColor(mode)
          });
        }
      }
      if (assetcount + 1 <= assetcount + plancount) {
        for (j = _j = _ref7 = assetcount + 1, _ref8 = assetcount + plancount; _ref7 <= _ref8 ? _j <= _ref8 : _j >= _ref8; j = _ref7 <= _ref8 ? ++_j : --_j) {
          leds.push({
            key: "u-" + j,
            value: getModeColor("plan" + mode)
          });
        }
      }
      if (assetcount + plancount + 1 <= ucount) {
        for (l = _k = _ref9 = assetcount + plancount + 1; _ref9 <= ucount ? _k <= ucount : _k >= ucount; l = _ref9 <= ucount ? ++_k : --_k) {
          leds.push({
            key: "u-" + l,
            value: getModeColor("blank")
          });
        }
      }
      return this.setLeds(leds);
    };

    Rack.prototype.switchToHeatmapMode = function() {
      var getTemperatureColor, i, leds, ucount, _i, _ref, _ref1, _ref2;
      getTemperatureColor = (function(_this) {
        return function(uwei) {
          var ret, value, _ref;
          ret = _this.COLOR.green;
          value = (_ref = _this.data) != null ? _ref["u-" + uwei + "-server-temperature"] : void 0;
          if ((value - _this.NORMALTEMPERATURE) >= 3) {
            ret = _this.COLOR.red;
          } else if ((value - _this.NORMALTEMPERATURE) >= 1 && (value - _this.NORMALTEMPERATURE) < 3) {
            ret = _this.COLOR.yellow;
          } else if ((_this.NORMALTEMPERATURE - value) >= 1 && (_this.NORMALTEMPERATURE - value) < 3) {
            ret = _this.COLOR.cyan;
          } else if ((_this.NORMALTEMPERATURE - value) >= 3 && (value != null)) {
            ret = _this.COLOR.blue;
          }
          return ret;
        };
      })(this);
      ucount = (_ref = (_ref1 = (_ref2 = this.data) != null ? _ref2["ucount"] : void 0) != null ? _ref1 : this.height) != null ? _ref : 42;
      leds = [];
      for (i = _i = 1; 1 <= ucount ? _i <= ucount : _i >= ucount; i = 1 <= ucount ? ++_i : --_i) {
        leds.push({
          key: "u-" + i,
          value: getTemperatureColor(i)
        });
      }
      return this.setLeds(leds);
    };

    Rack.prototype.switchToLedMode = function(mode) {
      var i, leds, ucount, _i, _ref, _ref1, _ref2;
      ucount = (_ref = (_ref1 = (_ref2 = this.data) != null ? _ref2["ucount"] : void 0) != null ? _ref1 : this.height) != null ? _ref : 42;
      leds = [];
      for (i = _i = 1; 1 <= ucount ? _i <= ucount : _i >= ucount; i = 1 <= ucount ? ++_i : --_i) {
        leds.push({
          key: "u-" + i,
          value: this.COLOR[mode]
        });
      }
      return this.setLeds(leds);
    };

    Rack.prototype.setLeds = function(leds) {
      var led, _i, _j, _len, _len1;
      for (_i = 0, _len = leds.length; _i < _len; _i++) {
        led = leds[_i];
        if (!this.udirection) {
          this.setUValue(led.key, "led", led.value);
        }
        if (this.udirection) {
          this.setUValue("u-" + (43 - parseInt(led.key.split("-")[1])), "led", led.value);
        }
      }
      if (this.hasULocator) {
        for (_j = 0, _len1 = leds.length; _j < _len1; _j++) {
          led = leds[_j];
          led.value = this.splitColor(led.value);
          if (this.udirection) {
            led.key = "u-" + (43 - parseInt(led.key.split("-")[1]));
          }
        }
        return this.setULedColor("set-u-leds", leds);
      }
    };

    Rack.prototype.updateServer = function(server) {
      var srv, uwei, _base, _name;
      uwei = _.find(server.properties, function(pro) {
        return pro.id === "row";
      });
      if (!(uwei != null ? uwei.value : void 0)) {
        return;
      }
      srv = new Server.Server(server, this.service, this);
      srv.getInfo();
      if ((_base = this.uwei)[_name = uwei.value] == null) {
        _base[_name] = {};
      }
      return this.uwei[uwei.value].server = srv;
    };

    Rack.prototype.dispose = function() {
      var _ref, _ref1, _ref2, _ref3, _ref4;
      if ((_ref = this.signalSubscription) != null) {
        _ref.dispose();
      }
      if ((_ref1 = this.commandSubscription) != null) {
        _ref1.dispose();
      }
      if ((_ref2 = this.eventSubscription) != null) {
        _ref2.dispose();
      }
      if ((_ref3 = this.subject) != null) {
        _ref3.dispose();
      }
      if ((_ref4 = this.sceneSubject) != null) {
        _ref4.dispose();
      }
      return Rack.__super__.dispose.apply(this, arguments);
    };

    return Rack;

  })(base.Service);
  return exports = {
    Rack: Rack
  };
});
