// Generated by IcedCoffeeScript 108.0.13
if (typeof define !== 'function') { var define = require('amdefine')(module) };
define(['underscore'], function(_) {
  var Server, exports;
  Server = (function() {
    function Server(model, service, rack) {
      var id;
      this.model = model;
      this.service = service;
      this.rack = rack;
      id = this.model.user + "." + this.model.project + "." + this.model.station + "." + this.model.equipment;
      this.service.servers[id] = this;
    }

    Server.prototype.getInfo = function(callback) {
      this.service.getEquipmentProperty(this.model, "row", (function(_this) {
        return function(val) {
          return _this.row = val;
        };
      })(this));
      return this.service.getEquipmentProperty(this.model, "height", (function(_this) {
        return function(val) {
          _this.height = val;
          _this.lrow = _this.row > _this.height ? _this.row - _this.height + 1 : 1;
          return typeof callback === "function" ? callback(_this) : void 0;
        };
      })(this));
    };

    Server.prototype.removeFromRack = function(rack) {
      var row, _i, _ref, _ref1, _ref2, _results;
      if (this.model.parent !== rack.model.equipment) {
        return;
      }
      this.model.parent = "";
      this.service.equip.save(this.model, (function(_this) {
        return function(err, model) {
          _this.publishAssetUpdate(model);
          return _this.rack = null;
        };
      })(this));
      _results = [];
      for (row = _i = _ref = this.row, _ref1 = this.lrow; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; row = _ref <= _ref1 ? ++_i : --_i) {
        _results.push((_ref2 = rack.uwei[row]) != null ? _ref2.server = null : void 0);
      }
      return _results;
    };

    Server.prototype.addToRack = function(rack, row) {
      var uwei;
      this.model.parent = rack.model.equipment;
      uwei = _.findWhere(this.model.properties, {
        id: "row"
      });
      if (uwei) {
        uwei.value = row;
      } else {
        this.model.properties.push({
          id: 'row',
          value: row
        });
      }
      this.service.equip.save(this.model, (function(_this) {
        return function(err, model) {
          return _this.publishAssetUpdate(_this.model, _this.model._id ? "update" : "create");
        };
      })(this));
      return this.getInfo((function(_this) {
        return function(server) {
          var _i, _ref, _ref1, _results;
          console.log("getInfo:", _this.row, _this.lrow);
          _results = [];
          for (row = _i = _ref = _this.row, _ref1 = _this.lrow; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; row = _ref <= _ref1 ? ++_i : --_i) {
            if (rack.uwei[row]) {
              _results.push(rack.uwei[row].server = _this);
            } else {
              _results.push(rack.uwei[row] = {
                server: _this
              });
            }
          }
          return _results;
        };
      })(this));
    };

    Server.prototype.publishAssetUpdate = function(asset, type) {
      var topic;
      if (type == null) {
        type = "update";
      }
      console.log("publish configuration:", asset);
      topic = "configuration/equipment/" + type + "/" + asset.user + "/" + asset.project + "/" + asset.station + "/" + asset.equipment;
      return this.service.publishToMqtt(topic, asset, {
        qos: 0,
        retain: false
      });
    };

    Server.prototype.dispose = function() {
      return this.model = null;
    };

    return Server;

  })();
  return exports = {
    Server: Server
  };
});
