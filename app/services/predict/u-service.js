// Generated by IcedCoffeeScript 108.0.13
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

define(['clc.foundation', 'clc.foundation.data/app/models/configuration/equipments-model', 'clc.foundation.data/app/models/configuration/equipment-types-model', 'clc.foundation.data/app/models/configuration/equipment-templates-model', 'clc.foundation.data/app/models/configuration/equipment-properties-model', './model/rack', 'underscore', '../../../index-setting.json'], function(base, equipment, type, template, property, Rack, _, setting) {
  var UService, exports;
  UService = (function(_super) {
    __extends(UService, _super);

    function UService(options) {
      this.options = options;
      UService.__super__.constructor.call(this, this.options);
      this.equip = new equipment.EquipmentsModel;
      this.template = new template.EquipmentTemplatesModel;
      this.type = new type.EquipmentTypesModel;
      this.property = new property.EquipmentPropertiesModel;
      this.cache = {};
      this.racks = {};
      this.templates = {};
      this.servers = {};
    }

    UService.prototype.initialize = function(callback) {
      UService.__super__.initialize.call(this, callback);
      return this.getRacks();
    };

    UService.prototype.getRacks = function() {
      return this.equip.find({
        type: 'rack'
      }, null, (function(_this) {
        return function(err, models) {
          if (err) {
            return;
          }
          return _this.type.find({
            base: 'IT'
          }, null, function(err, types) {
            _this.tps = _.uniq(_.pluck(types, "type"));
            return _this.property.find({
              type: {
                $in: _this.tps
              },
              property: {
                $in: ['height', 'has-u-locator', 'u-direction', 'normal-temperature']
              }
            }, null, function(err, properties) {
              var key, _i, _len;
              for (_i = 0, _len = properties.length; _i < _len; _i++) {
                property = properties[_i];
                key = property.user + "." + property.project + "." + property.type + "." + property.template + "." + property.property;
                _this.cache[key] = {
                  property: property.value
                };
              }
              return _this.template.find({
                type: {
                  $in: _this.tps
                }
              }, null, function(err, templates) {
                var model, rack, rackId, _j, _k, _len1, _len2;
                for (_j = 0, _len1 = templates.length; _j < _len1; _j++) {
                  template = templates[_j];
                  if (template.base) {
                    _this.templates[template.user + "." + template.project + "." + template.type + "." + template.template] = template.user + "." + template.project + "." + template.base;
                  }
                }
                for (_k = 0, _len2 = models.length; _k < _len2; _k++) {
                  model = models[_k];
                  rack = new Rack.Rack(model, _this);
                  rackId = rack.model.user + "." + rack.model.project + "." + rack.model.station + "." + rack.model.equipment;
                  _this.racks[rackId] = rack;
                }
                return setTimeout(function() {
                  console.log("begin to subscribe rack info");
                  _this.subscribeRackSignal("scene");
                  _this.subscribeRackSignal("ratio-space");
                  _this.subscribeRackSignal("ratio-power");
                  _this.subscribeRackSignal("ratio-cooling");
                  _this.subscribeRackSignal("ratio-weight");
                  _this.subscribeRackSignal("plan-ratio-space");
                  _this.subscribeRackSignal("plan-ratio-power");
                  _this.subscribeRackSignal("plan-ratio-cooling");
                  _this.subscribeRackSignal("plan-ratio-weight");
                  _this.subscribeRackSignal("ucount");
                  _this.subscribeRackSignal("u-[n]-server-temperature", 42);
                  _this.subscribeRackSignal("u-[n]-asset", 42);
                  _this.subscribeRackCommand("set-u-plan-[n]", 42);
                  _this.subscribeRackCommand("set-u-[n]-led", 42);
                  _this.subscribeRackCommand("toggle-scene");
                  _this.subscribeRackEvent("illegal-up-rack-[n]", 42);
                  _this.subscribeRackEvent("illegal-down-rack-[n]", 42);
                  return _this.subscribeRackULocatorChange();
                }, 10000);
              });
            });
          });
        };
      })(this));
    };

    UService.prototype.getEquipmentProperty = function(equip, property, callback) {
      var key, pty;
      pty = _.find(equip.properties, function(pt) {
        return pt.id === property;
      });
      if (pty) {
        return typeof callback === "function" ? callback(pty.value) : void 0;
      }
      key = equip.user + "." + equip.project + "." + equip.type + "." + equip.template + "." + property;
      return this.getTemplateProperties(key, (function(_this) {
        return function(value) {
          return typeof callback === "function" ? callback(value) : void 0;
        };
      })(this));
    };

    UService.prototype.getTemplateProperties = function(key, callback) {
      var project, user, _ref, _ref1;
      if ((_ref = this.cache[key]) != null ? _ref.property : void 0) {
        return callback(this.cache[key].property);
      } else if ((_ref1 = this.cache[key]) != null ? _ref1.base : void 0) {
        return this.getTemplateProperties(this.cache[key].base, callback);
      } else {
        user = key.split('.')[0];
        project = key.split('.')[1];
        type = key.split('.')[2];
        template = key.split('.')[3];
        property = key.split(".")[4];
        return this.getBaseTemplateProperties(user, project, type, template, property, callback);
      }
    };

    UService.prototype.getBaseTemplateProperties = function(user, project, type, template, property, callback) {
      var key;
      key = this.templates[user + "." + project + "." + type + "." + template];
      if (!key) {
        return typeof callback === "function" ? callback(null) : void 0;
      } else {
        return this.getTemplateProperties(key + "." + property, callback);
      }
    };

    UService.prototype.subscribeRackSignal = function(signal, count) {
      var i, topic, _i, _results;
      if (count == null) {
        count = 1;
      }
      _results = [];
      for (i = _i = 1; 1 <= count ? _i <= count : _i >= count; i = 1 <= count ? ++_i : --_i) {
        topic = "signal-values/+/+/+/+/" + signal.replace("[n]", i);
        _results.push(this.subscribeToMqtt(topic, {
          qos: 0
        }, (function(_this) {
          return function(data) {
            var rackId, _ref;
            if (data.message.equipmentType !== "rack") {
              return;
            }
            rackId = data.message.user + "." + data.message.project + "." + data.message.station + "." + data.message.equipment;
            return (_ref = _this.racks[rackId]) != null ? _ref.setSignal(data) : void 0;
          };
        })(this)));
      }
      return _results;
    };

    UService.prototype.subscribeRackCommand = function(command, count) {
      var i, topic, _i, _results;
      if (count == null) {
        count = 1;
      }
      _results = [];
      for (i = _i = 1; 1 <= count ? _i <= count : _i >= count; i = 1 <= count ? ++_i : --_i) {
        topic = "command-values/+/+/+/+/" + command.replace("[n]", i);
        _results.push(this.subscribeToMqtt(topic, {
          qos: 0
        }, (function(_this) {
          return function(data) {
            var rackId, _ref;
            if (!data.message || data.message.phase !== "executing" || !data.message._phase) {
              return;
            }
            rackId = data.message.user + "." + data.message.project + "." + data.message.station + "." + data.message.equipment;
            return (_ref = _this.racks[rackId]) != null ? _ref.setCommand(data) : void 0;
          };
        })(this)));
      }
      return _results;
    };

    UService.prototype.subscribeRackEvent = function(event, count) {
      var i, topic, _i, _results;
      if (count == null) {
        count = 1;
      }
      _results = [];
      for (i = _i = 1; 1 <= count ? _i <= count : _i >= count; i = 1 <= count ? ++_i : --_i) {
        topic = "event-values/+/+/+/+/" + event.replace("[n]", i);
        _results.push(this.subscribeToMqtt(topic, {
          qos: 0
        }, (function(_this) {
          return function(data) {
            var rackId, _ref;
            if (data.message.equipmentType !== "rack") {
              return;
            }
            rackId = data.message.user + "." + data.message.project + "." + data.message.station + "." + data.message.equipment;
            return (_ref = _this.racks[rackId]) != null ? _ref.setEvent(data) : void 0;
          };
        })(this)));
      }
      return _results;
    };

    UService.prototype.subscribeRackULocatorChange = function() {
      var topic;
      topic = "configuration/equipment/#";
      return this.subscribeToMqtt(topic, {
        qos: 0
      }, (function(_this) {
        return function(data) {
          var id, key, rack, rackId, _ref, _ref1, _ref2;
          if (!_.isEmpty(data.message.parent)) {
            rackId = data.message.user + "." + data.message.project + "." + data.message.station + "." + data.message.parent;
            if (_this.racks.hasOwnProperty(rackId)) {
              _this.racks[rackId].updateServer(data.message);
              return console.log("update server:", data.message);
            }
          } else if (data.message.type === "rack") {
            rackId = data.message.user + "." + data.message.project + "." + data.message.station + "." + data.message.equipment;
            if ((_ref = _this.racks[rackId]) != null) {
              _ref.dispose();
            }
            if (data.topic.indexOf("create") > 0 || data.topic.indexOf("update") > 0) {
              rack = new Rack.Rack(data.message, _this);
              key = rack.model.user + "." + rack.model.project + "." + rack.model.station + "." + rack.model.equipment;
              return _this.racks[key] = rack;
            }
          } else if (_ref1 = data.message.type, __indexOf.call(_this.tps, _ref1) >= 0) {
            id = data.message.user + "." + data.message.project + "." + data.message.station + "." + data.message.equipment;
            if ((_ref2 = _this.servers[id]) != null ? _ref2.rack : void 0) {
              return _this.servers[id].removeFromRack(_this.servers[id].rack);
            }
          }
        };
      })(this), false);
    };

    return UService;

  })(base.MqttService);
  return exports = {
    UService: UService
  };
});
