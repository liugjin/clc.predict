// Generated by IcedCoffeeScript 108.0.13
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['clc.foundation', 'clc.foundation.data/app/models/monitoring/event-values-model', 'clc.foundation.data/app/models/configuration/equipments-model', 'clc.foundation.data/app/models/configuration/stations-model', 'underscore'], function(base, event, equipment, station, _) {
  var CalculationService, exports;
  CalculationService = (function(_super) {
    __extends(CalculationService, _super);

    function CalculationService(options) {
      this.options = options;
      this.publishdata = __bind(this.publishdata, this);
      this.publishstationdata = __bind(this.publishstationdata, this);
      CalculationService.__super__.constructor.call(this, this.options);
      this.event = new event.EventValuesModel;
      this.equip = new equipment.EquipmentsModel;
      this.station = new station.StationsModel;
      this.map = {};
      this.stationMap = {};
      this.stations = {};
    }

    CalculationService.prototype.initialize = function(callback) {
      CalculationService.__super__.initialize.call(this, callback);
      this.firstload();
      this.subscribeToMqtt('configuration/equipment/#', {
        qos: 1
      }, (function(_this) {
        return function(data) {
          _this.map = {};
          _this.stationMap = {};
          _this.stations = {};
          return _this.firstload();
        };
      })(this), false);
      return this.subscribeToMqtt('configuration/station/#', {
        qos: 1
      }, (function(_this) {
        return function(data) {
          _this.map = {};
          _this.stationMap = {};
          _this.stations = {};
          return _this.firstload();
        };
      })(this), false);
    };

    CalculationService.prototype.firstload = function() {
      return this.event.aggregate([
        {
          $match: {
            endTime: {
              $eq: null
            },
            forceToEnd: {
              $ne: true
            }
          }
        }, {
          $group: {
            _id: {
              user: "$user",
              project: "$project",
              station: "$station",
              equipment: "$equipment"
            },
            alarmNum: {
              $sum: 1
            },
            alarmSeverity: {
              $max: "$severity"
            },
            alarmLevelList: {
              $push: "$severity"
            },
            alarmList: {
              $push: {
                event: "$event",
                startTime: "$startTime"
              }
            }
          }
        }, {
          $project: {
            _id: 0,
            user: "$_id.user",
            project: "$_id.project",
            station: "$_id.station",
            equipment: "$_id.equipment",
            alarmNum: "$alarmNum",
            alarmSeverity: "$alarmSeverity",
            alarmLevelList: "$alarmLevelList",
            alarmList: "$alarmList"
          }
        }
      ], null, (function(_this) {
        return function(err, data) {
          if (err) {
            console.log(err);
            data = [];
          }
          return _this.station.query({}, null, function(err, stations) {
            var id, _i, _len;
            if (!err) {
              for (_i = 0, _len = stations.length; _i < _len; _i++) {
                station = stations[_i];
                id = station.user + "." + station.project + "." + station.station;
                if (station.parent) {
                  _this.stationMap[id] = {
                    user: station.user,
                    project: station.project,
                    station: station.parent
                  };
                }
              }
            }
            return _this.equip.query({}, null, function(err, equips) {
              var eq, equip, equipid, suid, _j, _len1, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
              if (!err) {
                _.each(equips, function(equip) {
                  var _ref, _ref1;
                  if (equip.equipment === "_station_management") {
                    id = equip.user + "." + equip.project + "." + equip.station;
                    return _this.stations[id] = {
                      su: (_ref = equip.sampleUnits) != null ? (_ref1 = _ref[0]) != null ? _ref1.value : void 0 : void 0,
                      equipNum: 0,
                      alarmNum: 0,
                      alarmSeverity: 0,
                      alarmLevelList: []
                    };
                  }
                });
                _this.publishdata(_this.stations);
                for (_j = 0, _len1 = equips.length; _j < _len1; _j++) {
                  equip = equips[_j];
                  if (((_ref = equip.equipment) != null ? _ref.indexOf("_") : void 0) !== 0) {
                    id = equip.user + "." + equip.project + "." + equip.station;
                    if ((_ref1 = _this.stationMap[id]) != null) {
                      _ref1.equipNum += 1;
                    }
                    equipid = equip.user + "." + equip.project + "." + equip.station + "." + equip.equipment;
                    suid = (_ref2 = equip.sampleUnits) != null ? (_ref3 = _ref2[0]) != null ? _ref3.value : void 0 : void 0;
                    eq = _.findWhere(data, {
                      user: equip.user,
                      project: equip.project,
                      station: equip.station,
                      equipment: equip.equipment
                    });
                    if (eq) {
                      _this.map[equipid] = eq;
                    } else {
                      _this.map[equipid] = {
                        user: equip.user,
                        project: equip.project,
                        station: equip.station,
                        equipment: equip.equipment,
                        alarmNum: 0,
                        alarmSeverity: 0,
                        alarmLevelList: [],
                        alarmList: []
                      };
                    }
                    _this.map[equipid].fullequipment = equipid;
                    _this.map[equipid].su = suid;
                    _this.map[equipid].num = equip.type === "loop" ? 0 : 1;
                    _this.computestation(_this.map[equipid]);
                  }
                }
              }
              _this.publishdata(_this.map);
              if ((_ref4 = _this.subscriber) != null) {
                _ref4.dispose();
              }
              _this.subscriber = _this.subscribeToMqtt('event-values/#', {
                qos: 0
              }, function(data) {
                return _this.calculate(data);
              }, false);
              if ((_ref5 = _this.subscriber2) != null) {
                _ref5.dispose();
              }
              return _this.subscriber2 = _this.subscribeToMqtt('event-process/#', {
                qos: 0
              }, function(data) {
                return _this.calculate(data);
              }, false);
            });
          });
        };
      })(this));
    };

    CalculationService.prototype.calculate = function(data) {
      var alarmSeverity, alarms, flag, i, id, j, level, list, msg, _i, _len, _ref;
      msg = data.message;
      id = msg.user + "." + msg.project + "." + msg.station + "." + msg.equipment;
      alarmSeverity = msg.severity;
      if (this.map[id]) {
        alarms = this.map[id].alarmList;
        flag = _.find(alarms, function(item) {
          return item.event === msg.event && item.startTime.toISOString() === msg.startTime;
        });
        if ((!flag && ((_ref = msg.phase) === "end" || _ref === "completed")) || (flag && msg.phase === "start")) {
          return;
        }
        list = this.map[id].alarmLevelList;
        if (msg.phase === "start") {
          this.map[id].alarmNum++;
          list.push(alarmSeverity);
          alarms.push({
            event: msg.event,
            startTime: new Date(msg.startTime)
          });
        } else if (msg.phase === "end" || msg.phase === "completed") {
          this.map[id].alarmNum--;
          for (i = _i = 0, _len = list.length; _i < _len; i = ++_i) {
            level = list[i];
            if (level === alarmSeverity) {
              list.splice(i, 1);
              break;
            }
          }
          j = alarms.indexOf(flag);
          alarms.splice(j, 1);
        }
        if (list.length) {
          this.map[id].alarmSeverity = _.max(list);
        } else {
          this.map[id].alarmSeverity = 0;
        }
        this.publishdata({
          id: this.map[id]
        });
        this.computestation(this.map[id]);
        return this.publishstationdata(msg);
      }
    };

    CalculationService.prototype.computestation = function(device) {
      var deviceList, list, parentStation, stationid, suid, _ref, _ref1;
      stationid = device.user + "." + device.project + "." + device.station;
      if (!this.map[stationid]) {
        suid = (_ref = this.stations[stationid]) != null ? _ref.su : void 0;
        this.map[stationid] = {
          user: device.user,
          project: device.project,
          station: device.station,
          equipment: "_station_management",
          fullequipment: stationid + "._station_management",
          deviceList: {},
          su: suid
        };
      }
      this.map[stationid].deviceList[device.fullequipment] = {
        alarmNum: device.alarmNum,
        alarmSeverity: device.alarmSeverity,
        alarmLevelList: device.alarmLevelList,
        equipNum: (_ref1 = device.num) != null ? _ref1 : device.equipNum
      };
      deviceList = _.values(this.map[stationid].deviceList);
      this.map[stationid].alarmNum = _.reduce(deviceList, function(memo, device) {
        return memo + device.alarmNum;
      }, 0);
      this.map[stationid].equipNum = _.reduce(deviceList, function(memo, device) {
        return memo + device.equipNum;
      }, 0);
      this.map[stationid].alarmSeverity = _.max(_.pluck(deviceList, "alarmSeverity"));
      list = [];
      _.each(deviceList, function(device) {
        return list = list.concat(device.alarmLevelList);
      });
      this.map[stationid].alarmLevelList = list;
      if (this.stationMap.hasOwnProperty(stationid)) {
        parentStation = JSON.parse(JSON.stringify(this.map[stationid]));
        parentStation.station = this.stationMap[stationid].station;
        return this.computestation(parentStation);
      }
    };

    CalculationService.prototype.publishstationdata = function(station) {
      var stationid;
      stationid = station.user + "." + station.project + "." + station.station;
      this.publishdata({
        id: this.map[stationid]
      });
      if (this.stationMap.hasOwnProperty(stationid)) {
        return this.publishstationdata(this.stationMap[stationid]);
      }
    };

    CalculationService.prototype.publishdata = function(data) {
      var alarmSeverityMap, d, k, topic, topic0, topic2, topic3, _results;
      _results = [];
      for (k in data) {
        d = data[k];
        if (d.su) {
          topic0 = "ssv/" + d.su + "/alarms";
          this.publishToMqtt(topic0, d.alarmNum, {
            qos: 0,
            retain: true
          });
          topic2 = "ssv/" + d.su + "/alarmSeverity";
          this.publishToMqtt(topic2, d.alarmSeverity, {
            qos: 0,
            retain: true
          });
          topic3 = "ssv/" + d.su + "/alarmSeverityMap";
          alarmSeverityMap = _.countBy(d.alarmLevelList);
          this.publishToMqtt(topic3, alarmSeverityMap, {
            qos: 0,
            retain: true
          });
        }
        if (d.su && !isNaN(d.equipNum)) {
          topic = "ssv/" + d.su + "/equipments";
          _results.push(this.publishToMqtt(topic, d.equipNum, {
            qos: 0,
            retain: true
          }));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return CalculationService;

  })(base.MqttService);
  return exports = {
    CalculationService: CalculationService
  };
});
